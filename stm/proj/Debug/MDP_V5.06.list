
MDP_V5.06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d59c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc4  0800d72c  0800d72c  0001d72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f0  0800e3f0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3f0  0800e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3f8  0800e3f8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f8  0800e3f8  0001e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3fc  0800e3fc  0001e3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00005344  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200053dc  200053dc  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c9ad  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dad  00000000  00000000  0003cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001970  00000000  00000000  00040868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013fa  00000000  00000000  000421d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023eee  00000000  00000000  000435d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e2c0  00000000  00000000  000674c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9afb  00000000  00000000  00085780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000738c  00000000  00000000  0015f27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00166608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d714 	.word	0x0800d714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d714 	.word	0x0800d714

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b970 	b.w	8000f54 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	460f      	mov	r7, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0xe2>
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	b143      	cbz	r3, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	f1c3 0220 	rsb	r2, r3, #32
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb6:	4317      	orrs	r7, r2
 8000cb8:	409c      	lsls	r4, r3
 8000cba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cbe:	fa1f f58c 	uxth.w	r5, ip
 8000cc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc6:	0c22      	lsrs	r2, r4, #16
 8000cc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ccc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cd0:	fb01 f005 	mul.w	r0, r1, r5
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ce0:	f080 811c 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f240 8119 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000cea:	3902      	subs	r1, #2
 8000cec:	4462      	add	r2, ip
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	b2a4      	uxth	r4, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfe:	fb00 f505 	mul.w	r5, r0, r5
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x90>
 8000d06:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0e:	f080 8107 	bcs.w	8000f20 <__udivmoddi4+0x294>
 8000d12:	42a5      	cmp	r5, r4
 8000d14:	f240 8104 	bls.w	8000f20 <__udivmoddi4+0x294>
 8000d18:	4464      	add	r4, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11e      	cbz	r6, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40dc      	lsrs	r4, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0xbc>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80ed 	beq.w	8000f16 <__udivmoddi4+0x28a>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d149      	bne.n	8000de4 <__udivmoddi4+0x158>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	d302      	bcc.n	8000d5a <__udivmoddi4+0xce>
 8000d54:	4282      	cmp	r2, r0
 8000d56:	f200 80f8 	bhi.w	8000f4a <__udivmoddi4+0x2be>
 8000d5a:	1a84      	subs	r4, r0, r2
 8000d5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d60:	2001      	movs	r0, #1
 8000d62:	4617      	mov	r7, r2
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d0e2      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	e9c6 4700 	strd	r4, r7, [r6]
 8000d6c:	e7df      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xe6>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f382 	clz	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	2101      	movs	r1, #1
 8000d88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d90:	0c22      	lsrs	r2, r4, #16
 8000d92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d96:	fb0e f005 	mul.w	r0, lr, r5
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 80cb 	bhi.w	8000f44 <__udivmoddi4+0x2b8>
 8000dae:	4645      	mov	r5, r8
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x14e>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x14c>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 80bb 	bhi.w	8000f4e <__udivmoddi4+0x2c2>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000de2:	e79f      	b.n	8000d24 <__udivmoddi4+0x98>
 8000de4:	f1c1 0720 	rsb	r7, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df2:	fa05 f401 	lsl.w	r4, r5, r1
 8000df6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dfa:	40fd      	lsrs	r5, r7
 8000dfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb08 f50e 	mul.w	r5, r8, lr
 8000e18:	42a5      	cmp	r5, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e2c:	f080 8088 	bcs.w	8000f40 <__udivmoddi4+0x2b4>
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	f240 8085 	bls.w	8000f40 <__udivmoddi4+0x2b4>
 8000e36:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3a:	4464      	add	r4, ip
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	b29d      	uxth	r5, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e5c:	d26c      	bcs.n	8000f38 <__udivmoddi4+0x2ac>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	d96a      	bls.n	8000f38 <__udivmoddi4+0x2ac>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4464      	add	r4, ip
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	42ac      	cmp	r4, r5
 8000e74:	46c8      	mov	r8, r9
 8000e76:	46ae      	mov	lr, r5
 8000e78:	d356      	bcc.n	8000f28 <__udivmoddi4+0x29c>
 8000e7a:	d053      	beq.n	8000f24 <__udivmoddi4+0x298>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x208>
 8000e7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e82:	eb64 040e 	sbc.w	r4, r4, lr
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40ca      	lsrs	r2, r1
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	4317      	orrs	r7, r2
 8000e90:	e9c6 7400 	strd	r7, r4, [r6]
 8000e94:	4618      	mov	r0, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eac:	409d      	lsls	r5, r3
 8000eae:	432a      	orrs	r2, r5
 8000eb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb4:	fa1f fe8c 	uxth.w	lr, ip
 8000eb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ebc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ec0:	0c11      	lsrs	r1, r2, #16
 8000ec2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eca:	428d      	cmp	r5, r1
 8000ecc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x258>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eda:	d22f      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000edc:	428d      	cmp	r5, r1
 8000ede:	d92d      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	1b49      	subs	r1, r1, r5
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eec:	fb07 1115 	mls	r1, r7, r5, r1
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x282>
 8000efc:	eb1c 0202 	adds.w	r2, ip, r2
 8000f00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f04:	d216      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000f06:	4291      	cmp	r1, r2
 8000f08:	d914      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a52      	subs	r2, r2, r1
 8000f10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f14:	e738      	b.n	8000d88 <__udivmoddi4+0xfc>
 8000f16:	4631      	mov	r1, r6
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e708      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	e6e6      	b.n	8000cee <__udivmoddi4+0x62>
 8000f20:	4610      	mov	r0, r2
 8000f22:	e6fb      	b.n	8000d1c <__udivmoddi4+0x90>
 8000f24:	4548      	cmp	r0, r9
 8000f26:	d2a9      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f28:	ebb9 0802 	subs.w	r8, r9, r2
 8000f2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f30:	3b01      	subs	r3, #1
 8000f32:	e7a3      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f34:	4645      	mov	r5, r8
 8000f36:	e7ea      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f38:	462b      	mov	r3, r5
 8000f3a:	e794      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3c:	4640      	mov	r0, r8
 8000f3e:	e7d1      	b.n	8000ee4 <__udivmoddi4+0x258>
 8000f40:	46d0      	mov	r8, sl
 8000f42:	e77b      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e732      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e70a      	b.n	8000d64 <__udivmoddi4+0xd8>
 8000f4e:	4464      	add	r4, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e742      	b.n	8000dda <__udivmoddi4+0x14e>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <IMU_Initialise>:
//uint32_t gyroPrev[3];
/*
 * INITIALISATION
 */
uint8_t *IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]

    char hex[2];
    uint8_t uartbuf[20] = "  IMU ID =      "; // buffer for data
 8000f64:	4bad      	ldr	r3, [pc, #692]	; (800121c <IMU_Initialise+0x2c4>)
 8000f66:	f107 0418 	add.w	r4, r7, #24
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	7023      	strb	r3, [r4, #0]
 8000f74:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f78:	2200      	movs	r2, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	709a      	strb	r2, [r3, #2]
    uint8_t regData;

    dev->i2cHandle = i2cHandle;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	601a      	str	r2, [r3, #0]
    dev->uart = uart;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	605a      	str	r2, [r3, #4]
    	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
    	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
    	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

    */
    ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	217f      	movs	r1, #127	; 0x7f
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 f9ba 	bl	8001308 <IMU_WriteOneByte>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4ba1      	ldr	r3, [pc, #644]	; (8001220 <IMU_Initialise+0x2c8>)
 8000f9a:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8000f9c:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <IMU_Initialise+0x2c8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <IMU_Initialise+0x5c>
    {
        strcpy((char *)uartbuf, "Error 1\r\n");
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4a9e      	ldr	r2, [pc, #632]	; (8001224 <IMU_Initialise+0x2cc>)
 8000faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fac:	c303      	stmia	r3!, {r0, r1}
 8000fae:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e19a      	b.n	80012ea <IMU_Initialise+0x392>
    }

    //check ID
    /*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
    	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
    ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f107 0317 	add.w	r3, r7, #23
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f9c3 	bl	8001348 <IMU_ReadOneByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b96      	ldr	r3, [pc, #600]	; (8001220 <IMU_Initialise+0x2c8>)
 8000fc8:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8000fca:	4b95      	ldr	r3, [pc, #596]	; (8001220 <IMU_Initialise+0x2c8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <IMU_Initialise+0x8a>
    {
        strcpy((char *)uartbuf, "Error 2\r\n");
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	4a94      	ldr	r2, [pc, #592]	; (8001228 <IMU_Initialise+0x2d0>)
 8000fd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fda:	c303      	stmia	r3!, {r0, r1}
 8000fdc:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e183      	b.n	80012ea <IMU_Initialise+0x392>
    }
    else
    {
        //sprintf(hex, "%x", buf[0]); // change to hexidecimal
        sprintf(hex, "%x", regData); // change to hexidecimal
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <IMU_Initialise+0x2d4>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00b fee5 	bl	800cdbc <siprintf>
        strcpy(uartbuf, hex); // copy back to buf
 8000ff2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00b ff31 	bl	800ce64 <strcpy>
        uartbuf[12] = uartbuf[0] - 32; // change to upper case
 8001002:	7e3b      	ldrb	r3, [r7, #24]
 8001004:	3b20      	subs	r3, #32
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uartbuf[13] = uartbuf[1] - 32;
 800100c:	7e7b      	ldrb	r3, [r7, #25]
 800100e:	3b20      	subs	r3, #32
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uartbuf[14] = '\r';
 8001016:	230d      	movs	r3, #13
 8001018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uartbuf[15] = '\n';
 800101c:	230a      	movs	r3, #10
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uartbuf[16] = '\0';
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        uartbuf[0]  = '\r';
 8001028:	230d      	movs	r3, #13
 800102a:	763b      	strb	r3, [r7, #24]
        uartbuf[1]  = '\n';
 800102c:	230a      	movs	r3, #10
 800102e:	767b      	strb	r3, [r7, #25]
        uartbuf[2]  = 'I';
 8001030:	2349      	movs	r3, #73	; 0x49
 8001032:	76bb      	strb	r3, [r7, #26]
    }


    // for debuggiing - send to uart and return to main to display on OLED and UART
    HAL_UART_Transmit(dev->uart, uartbuf, strlen((char *)uartbuf), HAL_MAX_DELAY);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	685c      	ldr	r4, [r3, #4]
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8c7 	bl	80001d0 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 0118 	add.w	r1, r7, #24
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	4620      	mov	r0, r4
 8001050:	f007 fecd 	bl	8008dee <HAL_UART_Transmit>
    //return &buf[0];

    // Initialize
    // Bank 0 - Reset the device and then auto selects the best available clock source
    ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001054:	2200      	movs	r2, #0
 8001056:	217f      	movs	r1, #127	; 0x7f
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f955 	bl	8001308 <IMU_WriteOneByte>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b6f      	ldr	r3, [pc, #444]	; (8001220 <IMU_Initialise+0x2c8>)
 8001064:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001066:	4b6e      	ldr	r3, [pc, #440]	; (8001220 <IMU_Initialise+0x2c8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <IMU_Initialise+0x126>
    {
        strcpy((char *)uartbuf, "Error 3\r\n");
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4a6f      	ldr	r2, [pc, #444]	; (8001230 <IMU_Initialise+0x2d8>)
 8001074:	ca07      	ldmia	r2, {r0, r1, r2}
 8001076:	c303      	stmia	r3!, {r0, r1}
 8001078:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 800107a:	2300      	movs	r3, #0
 800107c:	e135      	b.n	80012ea <IMU_Initialise+0x392>
    }
    ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 800107e:	22f1      	movs	r2, #241	; 0xf1
 8001080:	2106      	movs	r1, #6
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f000 f940 	bl	8001308 <IMU_WriteOneByte>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b64      	ldr	r3, [pc, #400]	; (8001220 <IMU_Initialise+0x2c8>)
 800108e:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001090:	4b63      	ldr	r3, [pc, #396]	; (8001220 <IMU_Initialise+0x2c8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00a      	beq.n	80010ae <IMU_Initialise+0x156>
    {
        strcpy((char *)uartbuf, "Error 4a\r\n");
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4a65      	ldr	r2, [pc, #404]	; (8001234 <IMU_Initialise+0x2dc>)
 800109e:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a0:	c303      	stmia	r3!, {r0, r1}
 80010a2:	801a      	strh	r2, [r3, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	0c12      	lsrs	r2, r2, #16
 80010a8:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 80010aa:	2300      	movs	r3, #0
 80010ac:	e11d      	b.n	80012ea <IMU_Initialise+0x392>
    }
    HAL_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f003 fe1e 	bl	8004cf0 <HAL_Delay>
    ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 80010b4:	2201      	movs	r2, #1
 80010b6:	2106      	movs	r1, #6
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f925 	bl	8001308 <IMU_WriteOneByte>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <IMU_Initialise+0x2c8>)
 80010c4:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <IMU_Initialise+0x2c8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <IMU_Initialise+0x18c>
    {
        strcpy((char *)uartbuf, "Error 4b\r\n");
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4a59      	ldr	r2, [pc, #356]	; (8001238 <IMU_Initialise+0x2e0>)
 80010d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d6:	c303      	stmia	r3!, {r0, r1}
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	3302      	adds	r3, #2
 80010dc:	0c12      	lsrs	r2, r2, #16
 80010de:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 80010e0:	2300      	movs	r3, #0
 80010e2:	e102      	b.n	80012ea <IMU_Initialise+0x392>
    }


    // Turn off and on Accelator and Gyro - page 28
    HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f003 fe03 	bl	8004cf0 <HAL_Delay>
    ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 80010ea:	223f      	movs	r2, #63	; 0x3f
 80010ec:	2107      	movs	r1, #7
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f90a 	bl	8001308 <IMU_WriteOneByte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <IMU_Initialise+0x2c8>)
 80010fa:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 80010fc:	4b48      	ldr	r3, [pc, #288]	; (8001220 <IMU_Initialise+0x2c8>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00a      	beq.n	800111a <IMU_Initialise+0x1c2>
    {
        strcpy((char *)uartbuf, "Error 5a\r\n");
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <IMU_Initialise+0x2e4>)
 800110a:	ca07      	ldmia	r2, {r0, r1, r2}
 800110c:	c303      	stmia	r3!, {r0, r1}
 800110e:	801a      	strh	r2, [r3, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 8001116:	2300      	movs	r3, #0
 8001118:	e0e7      	b.n	80012ea <IMU_Initialise+0x392>
    }

    HAL_Delay(10);
 800111a:	200a      	movs	r0, #10
 800111c:	f003 fde8 	bl	8004cf0 <HAL_Delay>
    ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 8001120:	2200      	movs	r2, #0
 8001122:	2107      	movs	r1, #7
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f8ef 	bl	8001308 <IMU_WriteOneByte>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <IMU_Initialise+0x2c8>)
 8001130:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <IMU_Initialise+0x2c8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <IMU_Initialise+0x1f8>
    {
        strcpy((char *)uartbuf, "Error 5b\r\n");
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4a40      	ldr	r2, [pc, #256]	; (8001240 <IMU_Initialise+0x2e8>)
 8001140:	ca07      	ldmia	r2, {r0, r1, r2}
 8001142:	c303      	stmia	r3!, {r0, r1}
 8001144:	801a      	strh	r2, [r3, #0]
 8001146:	3302      	adds	r3, #2
 8001148:	0c12      	lsrs	r2, r2, #16
 800114a:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 800114c:	2300      	movs	r3, #0
 800114e:	e0cc      	b.n	80012ea <IMU_Initialise+0x392>
    }

    ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f8d7 	bl	8001308 <IMU_WriteOneByte>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <IMU_Initialise+0x2c8>)
 8001160:	701a      	strb	r2, [r3, #0]


    // Bank 2 - Gyro and Acce and start running
    /* user bank 2 register */
    ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001162:	2220      	movs	r2, #32
 8001164:	217f      	movs	r1, #127	; 0x7f
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f8ce 	bl	8001308 <IMU_WriteOneByte>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <IMU_Initialise+0x2c8>)
 8001172:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <IMU_Initialise+0x2c8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <IMU_Initialise+0x234>
    {
        strcpy((char *)uartbuf, "Error 6\r\n");
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4a30      	ldr	r2, [pc, #192]	; (8001244 <IMU_Initialise+0x2ec>)
 8001182:	ca07      	ldmia	r2, {r0, r1, r2}
 8001184:	c303      	stmia	r3!, {r0, r1}
 8001186:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 8001188:	2300      	movs	r3, #0
 800118a:	e0ae      	b.n	80012ea <IMU_Initialise+0x392>
    }
    ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x04);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 800118c:	2204      	movs	r2, #4
 800118e:	2100      	movs	r1, #0
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f8b9 	bl	8001308 <IMU_WriteOneByte>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <IMU_Initialise+0x2c8>)
 800119c:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <IMU_Initialise+0x2c8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <IMU_Initialise+0x25e>
    {
        strcpy((char *)uartbuf, "Error 7\r\n");
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4a27      	ldr	r2, [pc, #156]	; (8001248 <IMU_Initialise+0x2f0>)
 80011ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ae:	c303      	stmia	r3!, {r0, r1}
 80011b0:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 80011b2:	2300      	movs	r3, #0
 80011b4:	e099      	b.n	80012ea <IMU_Initialise+0x392>
    }
    ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 80011b6:	2233      	movs	r2, #51	; 0x33
 80011b8:	2101      	movs	r1, #1
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f8a4 	bl	8001308 <IMU_WriteOneByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <IMU_Initialise+0x2c8>)
 80011c6:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <IMU_Initialise+0x2c8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <IMU_Initialise+0x288>
    {
        strcpy((char *)uartbuf, "Error 8\r\n");
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <IMU_Initialise+0x2f4>)
 80011d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d8:	c303      	stmia	r3!, {r0, r1}
 80011da:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 80011dc:	2300      	movs	r3, #0
 80011de:	e084      	b.n	80012ea <IMU_Initialise+0x392>
    }

    ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 80011e0:	2207      	movs	r2, #7
 80011e2:	2111      	movs	r1, #17
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 f88f 	bl	8001308 <IMU_WriteOneByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <IMU_Initialise+0x2c8>)
 80011f0:	701a      	strb	r2, [r3, #0]
    ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 80011f2:	2200      	movs	r2, #0
 80011f4:	2110      	movs	r1, #16
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f886 	bl	8001308 <IMU_WriteOneByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <IMU_Initialise+0x2c8>)
 8001202:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <IMU_Initialise+0x2c8>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d023      	beq.n	8001254 <IMU_Initialise+0x2fc>
    {
        strcpy((char *)uartbuf, "Error 9\r\n");
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <IMU_Initialise+0x2f8>)
 8001212:	ca07      	ldmia	r2, {r0, r1, r2}
 8001214:	c303      	stmia	r3!, {r0, r1}
 8001216:	801a      	strh	r2, [r3, #0]
        return &uartbuf[0];
 8001218:	2300      	movs	r3, #0
 800121a:	e066      	b.n	80012ea <IMU_Initialise+0x392>
 800121c:	0800d7cc 	.word	0x0800d7cc
 8001220:	200000b4 	.word	0x200000b4
 8001224:	0800d72c 	.word	0x0800d72c
 8001228:	0800d738 	.word	0x0800d738
 800122c:	0800d744 	.word	0x0800d744
 8001230:	0800d748 	.word	0x0800d748
 8001234:	0800d754 	.word	0x0800d754
 8001238:	0800d760 	.word	0x0800d760
 800123c:	0800d76c 	.word	0x0800d76c
 8001240:	0800d778 	.word	0x0800d778
 8001244:	0800d784 	.word	0x0800d784
 8001248:	0800d790 	.word	0x0800d790
 800124c:	0800d79c 	.word	0x0800d79c
 8001250:	0800d7a8 	.word	0x0800d7a8
    }

    // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
    ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 8001254:	2231      	movs	r2, #49	; 0x31
 8001256:	2114      	movs	r1, #20
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 f855 	bl	8001308 <IMU_WriteOneByte>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <IMU_Initialise+0x39c>)
 8001264:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <IMU_Initialise+0x39c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <IMU_Initialise+0x32c>
    {
        strcpy((char *)uartbuf, "Error 10\r\n");
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <IMU_Initialise+0x3a0>)
 8001274:	ca07      	ldmia	r2, {r0, r1, r2}
 8001276:	c303      	stmia	r3!, {r0, r1}
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	3302      	adds	r3, #2
 800127c:	0c12      	lsrs	r2, r2, #16
 800127e:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 8001280:	2300      	movs	r3, #0
 8001282:	e032      	b.n	80012ea <IMU_Initialise+0x392>
    }

    IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001284:	2200      	movs	r2, #0
 8001286:	2153      	movs	r1, #83	; 0x53
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 f83d 	bl	8001308 <IMU_WriteOneByte>



    // back to bank 0
    ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800128e:	2200      	movs	r2, #0
 8001290:	217f      	movs	r1, #127	; 0x7f
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f838 	bl	8001308 <IMU_WriteOneByte>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <IMU_Initialise+0x39c>)
 800129e:	701a      	strb	r2, [r3, #0]
    if ( ret != HAL_OK )
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <IMU_Initialise+0x39c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <IMU_Initialise+0x366>
    {
        strcpy((char *)uartbuf, "Error 11\r\n");
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <IMU_Initialise+0x3a4>)
 80012ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b0:	c303      	stmia	r3!, {r0, r1}
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	701a      	strb	r2, [r3, #0]
        return &uartbuf[0];
 80012ba:	2300      	movs	r3, #0
 80012bc:	e015      	b.n	80012ea <IMU_Initialise+0x392>
    }
    HAL_Delay(100);
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f003 fd16 	bl	8004cf0 <HAL_Delay>

    /* offset */
    //      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
    gyroPosOld[0] = 0;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <IMU_Initialise+0x3a8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
    gyroPosOld[1] = 0;
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <IMU_Initialise+0x3a8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
    gyroPosOld[2] = 0;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <IMU_Initialise+0x3a8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]

    gyroNegOld[0] = 0;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <IMU_Initialise+0x3ac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    gyroNegOld[1] = 0;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <IMU_Initialise+0x3ac>)
 80012de:	2200      	movs	r2, #0
 80012e0:	605a      	str	r2, [r3, #4]
    gyroNegOld[2] = 0;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <IMU_Initialise+0x3ac>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
    // everthing OK
    //strcpy((char*)buf, "Initialize OK\r\n");
    //return &buf;
    return 0; // 0 means 0 error
 80012e8:	2300      	movs	r3, #0

}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000b4 	.word	0x200000b4
 80012f8:	0800d7b4 	.word	0x0800d7b4
 80012fc:	0800d7c0 	.word	0x0800d7c0
 8001300:	200000bc 	.word	0x200000bc
 8001304:	200000c8 	.word	0x200000c8

08001308 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af04      	add	r7, sp, #16
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
 8001314:	4613      	mov	r3, r2
 8001316:	70bb      	strb	r3, [r7, #2]
    uint8_t regData = data;
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	23d0      	movs	r3, #208	; 0xd0
 8001322:	b299      	uxth	r1, r3
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030f 	add.w	r3, r7, #15
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	f004 fd3d 	bl	8005db8 <HAL_I2C_Mem_Write>
 800133e:	4603      	mov	r3, r0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af04      	add	r7, sp, #16
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	460b      	mov	r3, r1
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	72fb      	strb	r3, [r7, #11]
    ret = HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	23d0      	movs	r3, #208	; 0xd0
 800135c:	b299      	uxth	r1, r3
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	b29a      	uxth	r2, r3
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	f004 fe1b 	bl	8005fac <HAL_I2C_Mem_Read>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <IMU_ReadOneByte+0x44>)
 800137c:	701a      	strb	r2, [r3, #0]
    return ret;
 800137e:	4b03      	ldr	r3, [pc, #12]	; (800138c <IMU_ReadOneByte+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000b4 	.word	0x200000b4

08001390 <IMU_GyroReadHeading>:
//int32_t cmpfunc (const void * a, const void * b) {
//   return ( *(int32_t*)a - *(int32_t*)b );
//}

int32_t IMU_GyroReadHeading(ICM20948 *dev)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    // return the change in value instead of current value
    uint8_t i, u8Buf[2] = {0}; // reset to zero
 8001398:	2300      	movs	r3, #0
 800139a:	81bb      	strh	r3, [r7, #12]
    int32_t gyroRaw = {0};  // reset to zero
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    uint32_t gyroPos, gyroNeg;
    uint32_t valPos, valNeg;
    uint32_t elapsedMs, tick;
    int32_t gyroSum = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	461a      	mov	r2, r3
 80013aa:	2138      	movs	r1, #56	; 0x38
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ffcb 	bl	8001348 <IMU_ReadOneByte>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b7c      	ldr	r3, [pc, #496]	; (80015a8 <IMU_GyroReadHeading+0x218>)
 80013b8:	701a      	strb	r2, [r3, #0]
    ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	3301      	adds	r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	2137      	movs	r1, #55	; 0x37
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffbf 	bl	8001348 <IMU_ReadOneByte>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <IMU_GyroReadHeading+0x218>)
 80013d0:	701a      	strb	r2, [r3, #0]
    if (prevTick == 0)
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <IMU_GyroReadHeading+0x21c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <IMU_GyroReadHeading+0x5a>
    {
        prevTick = xTaskGetTickCount();
 80013da:	f00a f955 	bl	800b688 <xTaskGetTickCount>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b72      	ldr	r3, [pc, #456]	; (80015ac <IMU_GyroReadHeading+0x21c>)
 80013e4:	601a      	str	r2, [r3, #0]
        return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e11b      	b.n	8001622 <IMU_GyroReadHeading+0x292>
    }
    tick = xTaskGetTickCount();
 80013ea:	f00a f94d 	bl	800b688 <xTaskGetTickCount>
 80013ee:	4603      	mov	r3, r0
 80013f0:	617b      	str	r3, [r7, #20]
    elapsedMs = tick - prevTick;
 80013f2:	4b6e      	ldr	r3, [pc, #440]	; (80015ac <IMU_GyroReadHeading+0x21c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	613b      	str	r3, [r7, #16]
    prevTick = tick;
 80013fc:	4a6b      	ldr	r2, [pc, #428]	; (80015ac <IMU_GyroReadHeading+0x21c>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	6013      	str	r3, [r2, #0]

    gyroRaw = (u8Buf[1] << 8) | u8Buf[0] -  gyro_offset[2];
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	021a      	lsls	r2, r3, #8
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	4619      	mov	r1, r3
 800140a:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <IMU_GyroReadHeading+0x220>)
 800140c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001410:	1acb      	subs	r3, r1, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]
    if(gyroRaw < 0x8000)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800141c:	da04      	bge.n	8001428 <IMU_GyroReadHeading+0x98>
    {
        //    	gyroRaw = gyroRaw*0.01525878906*elapsedMs/10*2.546257;
        gyroNeg = gyroRaw;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	62bb      	str	r3, [r7, #40]	; 0x28
        gyroPos = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001426:	e006      	b.n	8001436 <IMU_GyroReadHeading+0xa6>

    }
    else
    {
        //    	gyroRaw = (65535 - gyroRaw)*0.01525878906*elapsedMs/10*2.546257;
        gyroNeg = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
        gyroPos = 65535 - gyroRaw;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001432:	33ff      	adds	r3, #255	; 0xff
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Median Filtering
    gyroNegOld[2] = gyroNegOld[1];
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 800143c:	6093      	str	r3, [r2, #8]
    gyroPosOld[2] = gyroPosOld[1];
 800143e:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a5d      	ldr	r2, [pc, #372]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001444:	6093      	str	r3, [r2, #8]

    gyroNegOld[1] = gyroNegOld[0];
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a5a      	ldr	r2, [pc, #360]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 800144c:	6053      	str	r3, [r2, #4]
    gyroPosOld[1] = gyroPosOld[0];
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a59      	ldr	r2, [pc, #356]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001454:	6053      	str	r3, [r2, #4]

    gyroNegOld[0] = gyroNeg;
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 800145a:	6013      	str	r3, [r2, #0]
    gyroPosOld[0] = gyroPos;
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001460:	6013      	str	r3, [r2, #0]

    if(gyroNegOld[1] <= gyroNegOld[0] && gyroNegOld[1] >= gyroNegOld[2])valNeg = gyroNegOld[1];
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	dc09      	bgt.n	8001482 <IMU_GyroReadHeading+0xf2>
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	429a      	cmp	r2, r3
 8001478:	db03      	blt.n	8001482 <IMU_GyroReadHeading+0xf2>
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	e042      	b.n	8001508 <IMU_GyroReadHeading+0x178>
    else if(gyroNegOld[1] <= gyroNegOld[2] && gyroNegOld[1] >= gyroNegOld[0])valNeg = gyroNegOld[1];
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	dc09      	bgt.n	80014a2 <IMU_GyroReadHeading+0x112>
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	db03      	blt.n	80014a2 <IMU_GyroReadHeading+0x112>
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	e032      	b.n	8001508 <IMU_GyroReadHeading+0x178>

    else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc09      	bgt.n	80014c2 <IMU_GyroReadHeading+0x132>
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b40      	ldr	r3, [pc, #256]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	db03      	blt.n	80014c2 <IMU_GyroReadHeading+0x132>
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	623b      	str	r3, [r7, #32]
 80014c0:	e022      	b.n	8001508 <IMU_GyroReadHeading+0x178>
    else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dc09      	bgt.n	80014e2 <IMU_GyroReadHeading+0x152>
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	db03      	blt.n	80014e2 <IMU_GyroReadHeading+0x152>
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	e012      	b.n	8001508 <IMU_GyroReadHeading+0x178>

    else if(gyroNegOld[2] <= gyroNegOld[0] && gyroNegOld[2] >= gyroNegOld[1])valNeg = gyroNegOld[2];
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dc09      	bgt.n	8001502 <IMU_GyroReadHeading+0x172>
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	db03      	blt.n	8001502 <IMU_GyroReadHeading+0x172>
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	623b      	str	r3, [r7, #32]
 8001500:	e002      	b.n	8001508 <IMU_GyroReadHeading+0x178>
    else valNeg = gyroNegOld[2];
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <IMU_GyroReadHeading+0x224>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	623b      	str	r3, [r7, #32]

    if(gyroPosOld[1] <= gyroPosOld[0] && gyroPosOld[1] >= gyroPosOld[2])valPos = gyroPosOld[1];
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	dc09      	bgt.n	8001528 <IMU_GyroReadHeading+0x198>
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	db03      	blt.n	8001528 <IMU_GyroReadHeading+0x198>
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	e04c      	b.n	80015c2 <IMU_GyroReadHeading+0x232>
    else if(gyroPosOld[1] <= gyroPosOld[2] && gyroPosOld[1] >= gyroPosOld[0])valPos = gyroPosOld[1];
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	429a      	cmp	r2, r3
 8001532:	dc09      	bgt.n	8001548 <IMU_GyroReadHeading+0x1b8>
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	db03      	blt.n	8001548 <IMU_GyroReadHeading+0x1b8>
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	e03c      	b.n	80015c2 <IMU_GyroReadHeading+0x232>

    else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	429a      	cmp	r2, r3
 8001552:	dc09      	bgt.n	8001568 <IMU_GyroReadHeading+0x1d8>
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	db03      	blt.n	8001568 <IMU_GyroReadHeading+0x1d8>
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	e02c      	b.n	80015c2 <IMU_GyroReadHeading+0x232>
    else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	429a      	cmp	r2, r3
 8001572:	dc09      	bgt.n	8001588 <IMU_GyroReadHeading+0x1f8>
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	db03      	blt.n	8001588 <IMU_GyroReadHeading+0x1f8>
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e01c      	b.n	80015c2 <IMU_GyroReadHeading+0x232>

    else if(gyroPosOld[2] <= gyroPosOld[0] && gyroPosOld[2] >= gyroPosOld[1])valPos = gyroPosOld[2];
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	dc13      	bgt.n	80015bc <IMU_GyroReadHeading+0x22c>
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	db0d      	blt.n	80015bc <IMU_GyroReadHeading+0x22c>
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <IMU_GyroReadHeading+0x228>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	e00c      	b.n	80015c2 <IMU_GyroReadHeading+0x232>
 80015a8:	200000b4 	.word	0x200000b4
 80015ac:	200000b8 	.word	0x200000b8
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	200000c8 	.word	0x200000c8
 80015b8:	200000bc 	.word	0x200000bc
    else valPos = gyroPosOld[2];
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <IMU_GyroReadHeading+0x29c>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    //    			valPos = gyroNegOld - gyroNeg;
    //    			valNeg = 0;
    //    		}
    //    	}
    //    }
    dev->gyro[2] = ((double)((int32_t)valPos - (int32_t)valNeg - (int32_t)gyro_offset_f) * 0.01525878906f * elapsedMs / 1000);
 80015c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <IMU_GyroReadHeading+0x2a0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffa8 	bl	8000524 <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <IMU_GyroReadHeading+0x2a4>)
 80015da:	f7ff f80d 	bl	80005f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
 80015e6:	6938      	ldr	r0, [r7, #16]
 80015e8:	f7fe ff8c 	bl	8000504 <__aeabi_ui2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff f800 	bl	80005f8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <IMU_GyroReadHeading+0x2a8>)
 8001606:	f7ff f921 	bl	800084c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fad3 	bl	8000bbc <__aeabi_d2f>
 8001616:	4602      	mov	r2, r0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	61da      	str	r2, [r3, #28]
    //		heading_f = heading_f - 360;
    //	}
    //	while(heading_f < 0){
    //		heading_f = heading_f + 360;
    //	}
    return (int32_t)valPos - (int32_t)valNeg;
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	1ad3      	subs	r3, r2, r3
    //    if(heading >= 122850) heading = heading - 122850;
    //
    ////    heading %= 360;
    //	return heading*0.29304029304;

}
 8001622:	4618      	mov	r0, r3
 8001624:	3730      	adds	r7, #48	; 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	200000bc 	.word	0x200000bc
 8001630:	200000dc 	.word	0x200000dc
 8001634:	3f8f4000 	.word	0x3f8f4000
 8001638:	408f4000 	.word	0x408f4000

0800163c <Gyro_calibrateHeading>:

void Gyro_calibrateHeading(ICM20948 *dev, double ticks)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	ed87 0b00 	vstr	d0, [r7]
    int32_t offset_local = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    int16_t i;
    for (i = 0; i < 512; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	827b      	strh	r3, [r7, #18]
 8001650:	e00c      	b.n	800166c <Gyro_calibrateHeading+0x30>
    {
        IMU_GyroReadHeading(dev);
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fe9c 	bl	8001390 <IMU_GyroReadHeading>
        osDelayUntil(ticks); // wait for 10msec
 8001658:	ed97 0b00 	vldr	d0, [r7]
 800165c:	f008 fead 	bl	800a3ba <osDelayUntil>
    for (i = 0; i < 512; i++)
 8001660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001664:	b29b      	uxth	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	827b      	strh	r3, [r7, #18]
 800166c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001674:	dbed      	blt.n	8001652 <Gyro_calibrateHeading+0x16>
    }

    for (i = 0; i < 2048; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	827b      	strh	r3, [r7, #18]
 800167a:	e010      	b.n	800169e <Gyro_calibrateHeading+0x62>
    {
        offset_local = offset_local + IMU_GyroReadHeading(dev);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fe87 	bl	8001390 <IMU_GyroReadHeading>
 8001682:	4602      	mov	r2, r0
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]
        //		offset_local = offset_local + (double)dev->gyro[2]/64.0;
        osDelayUntil(ticks); // wait for 10msec
 800168a:	ed97 0b00 	vldr	d0, [r7]
 800168e:	f008 fe94 	bl	800a3ba <osDelayUntil>
    for (i = 0; i < 2048; i++)
 8001692:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3301      	adds	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	827b      	strh	r3, [r7, #18]
 800169e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a6:	dbe9      	blt.n	800167c <Gyro_calibrateHeading+0x40>
    }

    gyro_offset_f = offset_local >> 11;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	12db      	asrs	r3, r3, #11
 80016ac:	4a02      	ldr	r2, [pc, #8]	; (80016b8 <Gyro_calibrateHeading+0x7c>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000dc 	.word	0x200000dc

080016bc <delay>:
uint32_t Distance = 0;
uint32_t prevDistance[4] = {0};
uint8_t Is_First_Captured = 0;  // is the first value captured ?

void delay(uint16_t time)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <delay+0x30>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80016ce:	bf00      	nop
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <delay+0x30>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3f9      	bcc.n	80016d0 <delay+0x14>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000020c 	.word	0x2000020c

080016f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 80f6 	bne.w	80018ee <HAL_TIM_IC_CaptureCallback+0x1fe>
    {
        if (Is_First_Captured == 0) // if the first value is not captured
 8001702:	4b83      	ldr	r3, [pc, #524]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11a      	bne.n	8001740 <HAL_TIM_IC_CaptureCallback+0x50>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800170a:	2104      	movs	r1, #4
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f006 fd99 	bl	8008244 <HAL_TIM_ReadCapturedValue>
 8001712:	4603      	mov	r3, r0
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001716:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8001718:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x220>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a1a      	ldr	r2, [r3, #32]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800172c:	621a      	str	r2, [r3, #32]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
        }
    }
}
 800173e:	e0d6      	b.n	80018ee <HAL_TIM_IC_CaptureCallback+0x1fe>
        else if (Is_First_Captured == 1) // if the first is already captured
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	f040 80d2 	bne.w	80018ee <HAL_TIM_IC_CaptureCallback+0x1fe>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 800174a:	2104      	movs	r1, #4
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f006 fd79 	bl	8008244 <HAL_TIM_ReadCapturedValue>
 8001752:	4603      	mov	r3, r0
 8001754:	4a70      	ldr	r2, [pc, #448]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001756:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
            if (IC_Val2 > IC_Val1)
 8001760:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d907      	bls.n	800177c <HAL_TIM_IC_CaptureCallback+0x8c>
                Difference = IC_Val2 - IC_Val1;
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x228>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a69      	ldr	r2, [pc, #420]	; (800191c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00f      	b.n	800179c <HAL_TIM_IC_CaptureCallback+0xac>
            else if (IC_Val1 > IC_Val2)
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x224>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d909      	bls.n	800179c <HAL_TIM_IC_CaptureCallback+0xac>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8001788:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_TIM_IC_CaptureCallback+0x228>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_TIM_IC_CaptureCallback+0x224>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001796:	33ff      	adds	r3, #255	; 0xff
 8001798:	4a60      	ldr	r2, [pc, #384]	; (800191c <HAL_TIM_IC_CaptureCallback+0x22c>)
 800179a:	6013      	str	r3, [r2, #0]
            prevDistance[2] = prevDistance[1];
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a5f      	ldr	r2, [pc, #380]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80017a2:	6093      	str	r3, [r2, #8]
            prevDistance[1] = prevDistance[0];
 80017a4:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80017aa:	6053      	str	r3, [r2, #4]
            prevDistance[0] = Difference * .034 / 2.0 * 150.0/137.0;
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fea7 	bl	8000504 <__aeabi_ui2d>
 80017b6:	a350      	add	r3, pc, #320	; (adr r3, 80018f8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d0:	f7ff f83c 	bl	800084c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a348      	add	r3, pc, #288	; (adr r3, 8001900 <HAL_TIM_IC_CaptureCallback+0x210>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a346      	add	r3, pc, #280	; (adr r3, 8001908 <HAL_TIM_IC_CaptureCallback+0x218>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f82a 	bl	800084c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9bc 	bl	8000b7c <__aeabi_d2uiz>
 8001804:	4603      	mov	r3, r0
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001808:	6013      	str	r3, [r2, #0]
            if(prevDistance[1] <= prevDistance[0] && prevDistance[1] >= prevDistance[2])Distance = prevDistance[1];
 800180a:	4b45      	ldr	r3, [pc, #276]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d80a      	bhi.n	800182c <HAL_TIM_IC_CaptureCallback+0x13c>
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	d304      	bcc.n	800182c <HAL_TIM_IC_CaptureCallback+0x13c>
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e047      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1cc>
			else if(prevDistance[1] <= prevDistance[2] && prevDistance[1] >= prevDistance[0])Distance = prevDistance[1];
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d80a      	bhi.n	800184e <HAL_TIM_IC_CaptureCallback+0x15e>
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d304      	bcc.n	800184e <HAL_TIM_IC_CaptureCallback+0x15e>
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a36      	ldr	r2, [pc, #216]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e036      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1cc>
			else if(prevDistance[0] <= prevDistance[2] && prevDistance[0] >= prevDistance[1])Distance = prevDistance[0];
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d80a      	bhi.n	8001870 <HAL_TIM_IC_CaptureCallback+0x180>
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	d304      	bcc.n	8001870 <HAL_TIM_IC_CaptureCallback+0x180>
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e025      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1cc>
			else if(prevDistance[0] <= prevDistance[2] && prevDistance[0] >= prevDistance[1])Distance = prevDistance[0];
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d80a      	bhi.n	8001892 <HAL_TIM_IC_CaptureCallback+0x1a2>
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d304      	bcc.n	8001892 <HAL_TIM_IC_CaptureCallback+0x1a2>
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e014      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1cc>
			else if(prevDistance[2] <= prevDistance[0] && prevDistance[2] >= prevDistance[1])Distance = prevDistance[2];
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d80a      	bhi.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x1c4>
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d304      	bcc.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x1c4>
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e003      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1cc>
			else Distance = prevDistance[2];
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_TIM_IC_CaptureCallback+0x230>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_TIM_IC_CaptureCallback+0x234>)
 80018ba:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 0; // set it back to false
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_TIM_IC_CaptureCallback+0x220>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a12      	ldr	r2, [r2, #32]
 80018dc:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x238>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x238>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0204 	bic.w	r2, r2, #4
 80018ec:	60da      	str	r2, [r3, #12]
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	b020c49c 	.word	0xb020c49c
 80018fc:	3fa16872 	.word	0x3fa16872
 8001900:	00000000 	.word	0x00000000
 8001904:	4062c000 	.word	0x4062c000
 8001908:	00000000 	.word	0x00000000
 800190c:	40612000 	.word	0x40612000
 8001910:	20000518 	.word	0x20000518
 8001914:	200004f8 	.word	0x200004f8
 8001918:	200004fc 	.word	0x200004fc
 800191c:	20000500 	.word	0x20000500
 8001920:	20000508 	.word	0x20000508
 8001924:	20000504 	.word	0x20000504
 8001928:	2000020c 	.word	0x2000020c

0800192c <HCSR04_Read>:

void HCSR04_Read(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001930:	2201      	movs	r2, #1
 8001932:	2110      	movs	r1, #16
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <HCSR04_Read+0x34>)
 8001936:	f004 f8c7 	bl	8005ac8 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 800193a:	200a      	movs	r0, #10
 800193c:	f7ff febe 	bl	80016bc <delay>
    HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001940:	2200      	movs	r2, #0
 8001942:	2110      	movs	r1, #16
 8001944:	4806      	ldr	r0, [pc, #24]	; (8001960 <HCSR04_Read+0x34>)
 8001946:	f004 f8bf 	bl	8005ac8 <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HCSR04_Read+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HCSR04_Read+0x38>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0204 	orr.w	r2, r2, #4
 8001958:	60da      	str	r2, [r3, #12]
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40020c00 	.word	0x40020c00
 8001964:	2000020c 	.word	0x2000020c

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800196c:	f003 f94e 	bl	8004c0c <HAL_Init>

    /* USER CODE BEGIN Init */

    Buffer[0] = 'F';
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <main+0xd4>)
 8001972:	2246      	movs	r2, #70	; 0x46
 8001974:	701a      	strb	r2, [r3, #0]
    Buffer[1] = 'W';
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <main+0xd4>)
 8001978:	2257      	movs	r2, #87	; 0x57
 800197a:	705a      	strb	r2, [r3, #1]
    Buffer[2] = '0';
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <main+0xd4>)
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	709a      	strb	r2, [r3, #2]
    Buffer[3] = '9';
 8001982:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <main+0xd4>)
 8001984:	2239      	movs	r2, #57	; 0x39
 8001986:	70da      	strb	r2, [r3, #3]
    Buffer[4] = 'd';
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <main+0xd4>)
 800198a:	2264      	movs	r2, #100	; 0x64
 800198c:	711a      	strb	r2, [r3, #4]

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800198e:	f000 f87b 	bl	8001a88 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001992:	f000 fb91 	bl	80020b8 <MX_GPIO_Init>
    MX_DMA_Init();
 8001996:	f000 fb6f 	bl	8002078 <MX_DMA_Init>
    MX_TIM8_Init();
 800199a:	f000 fa99 	bl	8001ed0 <MX_TIM8_Init>
    MX_TIM2_Init();
 800199e:	f000 f99b 	bl	8001cd8 <MX_TIM2_Init>
    MX_TIM1_Init();
 80019a2:	f000 f8fd 	bl	8001ba0 <MX_TIM1_Init>
    MX_USART3_UART_Init();
 80019a6:	f000 fb3d 	bl	8002024 <MX_USART3_UART_Init>
    MX_TIM3_Init();
 80019aa:	f000 f9e9 	bl	8001d80 <MX_TIM3_Init>
    MX_I2C1_Init();
 80019ae:	f000 f8c9 	bl	8001b44 <MX_I2C1_Init>
    MX_TIM4_Init();
 80019b2:	f000 fa39 	bl	8001e28 <MX_TIM4_Init>
    /* USER CODE BEGIN 2 */
    OLED_Init();
 80019b6:	f002 fa69 	bl	8003e8c <OLED_Init>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <main+0xd8>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <main+0xd8>)
 80019c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c4:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <main+0xdc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <main+0xdc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <main+0xdc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80019d8:	2104      	movs	r1, #4
 80019da:	481b      	ldr	r0, [pc, #108]	; (8001a48 <main+0xe0>)
 80019dc:	f005 fea8 	bl	8007730 <HAL_TIM_IC_Start_IT>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 80019e0:	f008 fbf4 	bl	800a1cc <osKernelInitialize>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of defaultTask */
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <main+0xe4>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <main+0xe8>)
 80019ea:	f008 fc39 	bl	800a260 <osThreadNew>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <main+0xec>)
 80019f2:	6013      	str	r3, [r2, #0]

    /* creation of DisplayTask */
    DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <main+0xf0>)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4818      	ldr	r0, [pc, #96]	; (8001a5c <main+0xf4>)
 80019fa:	f008 fc31 	bl	800a260 <osThreadNew>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <main+0xf8>)
 8001a02:	6013      	str	r3, [r2, #0]

    /* creation of Motor_L */
    Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8001a04:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <main+0xfc>)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4817      	ldr	r0, [pc, #92]	; (8001a68 <main+0x100>)
 8001a0a:	f008 fc29 	bl	800a260 <osThreadNew>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <main+0x104>)
 8001a12:	6013      	str	r3, [r2, #0]

    /* creation of GyroTask */
    GyroTaskHandle = osThreadNew(GyroFunc, NULL, &GyroTask_attributes);
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <main+0x108>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0x10c>)
 8001a1a:	f008 fc21 	bl	800a260 <osThreadNew>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <main+0x110>)
 8001a22:	6013      	str	r3, [r2, #0]

    /* creation of Ultrasonic */
    UltrasonicHandle = osThreadNew(sonic_sensor, NULL, &Ultrasonic_attributes);
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <main+0x114>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <main+0x118>)
 8001a2a:	f008 fc19 	bl	800a260 <osThreadNew>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <main+0x11c>)
 8001a32:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 8001a34:	f008 fbee 	bl	800a214 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001a38:	e7fe      	b.n	8001a38 <main+0xd0>
 8001a3a:	bf00      	nop
 8001a3c:	20000354 	.word	0x20000354
 8001a40:	e000edf0 	.word	0xe000edf0
 8001a44:	e0001000 	.word	0xe0001000
 8001a48:	2000020c 	.word	0x2000020c
 8001a4c:	0800d884 	.word	0x0800d884
 8001a50:	08002221 	.word	0x08002221
 8001a54:	20000340 	.word	0x20000340
 8001a58:	0800d8a8 	.word	0x0800d8a8
 8001a5c:	08002265 	.word	0x08002265
 8001a60:	20000344 	.word	0x20000344
 8001a64:	0800d8cc 	.word	0x0800d8cc
 8001a68:	08002299 	.word	0x08002299
 8001a6c:	20000348 	.word	0x20000348
 8001a70:	0800d8f0 	.word	0x0800d8f0
 8001a74:	08003839 	.word	0x08003839
 8001a78:	2000034c 	.word	0x2000034c
 8001a7c:	0800d914 	.word	0x0800d914
 8001a80:	08003af9 	.word	0x08003af9
 8001a84:	20000350 	.word	0x20000350

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b094      	sub	sp, #80	; 0x50
 8001a8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0320 	add.w	r3, r7, #32
 8001a92:	2230      	movs	r2, #48	; 0x30
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00b f9b0 	bl	800cdfc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <SystemClock_Config+0xb4>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <SystemClock_Config+0xb4>)
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6413      	str	r3, [r2, #64]	; 0x40
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <SystemClock_Config+0xb4>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <SystemClock_Config+0xb8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <SystemClock_Config+0xb8>)
 8001ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <SystemClock_Config+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aec:	2310      	movs	r3, #16
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 f801 	bl	8006b00 <HAL_RCC_OscConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0x80>
    {
        Error_Handler();
 8001b04:	f002 f816 	bl	8003b34 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b08:	230f      	movs	r3, #15
 8001b0a:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 fa64 	bl	8006ff0 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xaa>
    {
        Error_Handler();
 8001b2e:	f002 f801 	bl	8003b34 <Error_Handler>
    }
}
 8001b32:	bf00      	nop
 8001b34:	3750      	adds	r7, #80	; 0x50
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b4a:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <MX_I2C1_Init+0x54>)
 8001b4c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_I2C1_Init+0x58>)
 8001b52:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b66:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_I2C1_Init+0x50>)
 8001b82:	f003 ffd5 	bl	8005b30 <HAL_I2C_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001b8c:	f001 ffd2 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200000e0 	.word	0x200000e0
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	000186a0 	.word	0x000186a0

08001ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b096      	sub	sp, #88	; 0x58
 8001ba4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00b f90f 	bl	800cdfc <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <MX_TIM1_Init+0x134>)
 8001be2:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 160;
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001be6:	22a0      	movs	r2, #160	; 0xa0
 8001be8:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf6:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c0a:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c0c:	f005 fbd0 	bl	80073b0 <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0x7a>
    {
        Error_Handler();
 8001c16:	f001 ff8d 	bl	8003b34 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c24:	4619      	mov	r1, r3
 8001c26:	482a      	ldr	r0, [pc, #168]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c28:	f006 fa44 	bl	80080b4 <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x96>
    {
        Error_Handler();
 8001c32:	f001 ff7f 	bl	8003b34 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c36:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c38:	f005 fc09 	bl	800744e <HAL_TIM_PWM_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM1_Init+0xa6>
    {
        Error_Handler();
 8001c42:	f001 ff77 	bl	8003b34 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c52:	4619      	mov	r1, r3
 8001c54:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c56:	f006 ff9b 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0xc4>
    {
        Error_Handler();
 8001c60:	f001 ff68 	bl	8003b34 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	220c      	movs	r2, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001c86:	f006 f953 	bl	8007f30 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xf4>
    {
        Error_Handler();
 8001c90:	f001 ff50 	bl	8003b34 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cac:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <MX_TIM1_Init+0x130>)
 8001cb8:	f006 ffe6 	bl	8008c88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x126>
    {
        Error_Handler();
 8001cc2:	f001 ff37 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3758      	adds	r7, #88	; 0x58
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000134 	.word	0x20000134
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f00b f888 	bl	800cdfc <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfa:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 65535;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 10;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d34:	2301      	movs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 10;
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d48:	f005 fe1a 	bl	8007980 <HAL_TIM_Encoder_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x7e>
    {
        Error_Handler();
 8001d52:	f001 feef 	bl	8003b34 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_TIM2_Init+0xa4>)
 8001d64:	f006 ff14 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x9a>
    {
        Error_Handler();
 8001d6e:	f001 fee1 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3730      	adds	r7, #48	; 0x30
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000017c 	.word	0x2000017c

08001d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = {0};
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2224      	movs	r2, #36	; 0x24
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00b f834 	bl	800cdfc <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <MX_TIM3_Init+0xa4>)
 8001da0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 10;
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter = 10;
 8001de2:	230a      	movs	r3, #10
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	480c      	ldr	r0, [pc, #48]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001dee:	f005 fdc7 	bl	8007980 <HAL_TIM_Encoder_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0x7c>
    {
        Error_Handler();
 8001df8:	f001 fe9c 	bl	8003b34 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_TIM3_Init+0xa0>)
 8001e0a:	f006 fec1 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0x98>
    {
        Error_Handler();
 8001e14:	f001 fe8e 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200001c4 	.word	0x200001c4
 8001e24:	40000400 	.word	0x40000400

08001e28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_TIM4_Init+0xa4>)
 8001e48:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 16;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 65535;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5c:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e6a:	4817      	ldr	r0, [pc, #92]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e6c:	f005 fc10 	bl	8007690 <HAL_TIM_IC_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM4_Init+0x52>
    {
        Error_Handler();
 8001e76:	f001 fe5d 	bl	8003b34 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	480f      	ldr	r0, [pc, #60]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001e8a:	f006 fe81 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM4_Init+0x70>
    {
        Error_Handler();
 8001e94:	f001 fe4e 	bl	8003b34 <Error_Handler>
    }
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_TIM4_Init+0xa0>)
 8001eb0:	f005 ffa2 	bl	8007df8 <HAL_TIM_IC_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM4_Init+0x96>
    {
        Error_Handler();
 8001eba:	f001 fe3b 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000020c 	.word	0x2000020c
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b096      	sub	sp, #88	; 0x58
 8001ed4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2220      	movs	r2, #32
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00a ff77 	bl	800cdfc <memset>

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f10:	4a43      	ldr	r2, [pc, #268]	; (8002020 <MX_TIM8_Init+0x150>)
 8001f12:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = 0;
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = 7199;
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f22:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f26:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f28:	4b3c      	ldr	r3, [pc, #240]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f3a:	4838      	ldr	r0, [pc, #224]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f3c:	f005 fa38 	bl	80073b0 <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM8_Init+0x7a>
    {
        Error_Handler();
 8001f46:	f001 fdf5 	bl	8003b34 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f54:	4619      	mov	r1, r3
 8001f56:	4831      	ldr	r0, [pc, #196]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f58:	f006 f8ac 	bl	80080b4 <HAL_TIM_ConfigClockSource>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM8_Init+0x96>
    {
        Error_Handler();
 8001f62:	f001 fde7 	bl	8003b34 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f66:	482d      	ldr	r0, [pc, #180]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f68:	f005 fa71 	bl	800744e <HAL_TIM_PWM_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM8_Init+0xa6>
    {
        Error_Handler();
 8001f72:	f001 fddf 	bl	8003b34 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f82:	4619      	mov	r1, r3
 8001f84:	4825      	ldr	r0, [pc, #148]	; (800201c <MX_TIM8_Init+0x14c>)
 8001f86:	f006 fe03 	bl	8008b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM8_Init+0xc4>
    {
        Error_Handler();
 8001f90:	f001 fdd0 	bl	8003b34 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f94:	2360      	movs	r3, #96	; 0x60
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.Pulse = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4818      	ldr	r0, [pc, #96]	; (800201c <MX_TIM8_Init+0x14c>)
 8001fba:	f005 ffb9 	bl	8007f30 <HAL_TIM_PWM_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM8_Init+0xf8>
    {
        Error_Handler();
 8001fc4:	f001 fdb6 	bl	8003b34 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4812      	ldr	r0, [pc, #72]	; (800201c <MX_TIM8_Init+0x14c>)
 8001fd2:	f005 ffad 	bl	8007f30 <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM8_Init+0x110>
    {
        Error_Handler();
 8001fdc:	f001 fdaa 	bl	8003b34 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff8:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_TIM8_Init+0x14c>)
 8002004:	f006 fe40 	bl	8008c88 <HAL_TIMEx_ConfigBreakDeadTime>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM8_Init+0x142>
    {
        Error_Handler();
 800200e:	f001 fd91 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3758      	adds	r7, #88	; 0x58
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000254 	.word	0x20000254
 8002020:	40010400 	.word	0x40010400

08002024 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <MX_USART3_UART_Init+0x50>)
 800202c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002034:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800205c:	f006 fe7a 	bl	8008d54 <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART3_UART_Init+0x46>
    {
        Error_Handler();
 8002066:	f001 fd65 	bl	8003b34 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000029c 	.word	0x2000029c
 8002074:	40004800 	.word	0x40004800

08002078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_DMA_Init+0x3c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <MX_DMA_Init+0x3c>)
 8002088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_DMA_Init+0x3c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	200c      	movs	r0, #12
 80020a0:	f002 ff25 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020a4:	200c      	movs	r0, #12
 80020a6:	f002 ff3e 	bl	8004f26 <HAL_NVIC_EnableIRQ>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <MX_GPIO_Init+0x158>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <MX_GPIO_Init+0x158>)
 80020d8:	f043 0310 	orr.w	r3, r3, #16
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <MX_GPIO_Init+0x158>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	4b48      	ldr	r3, [pc, #288]	; (8002210 <MX_GPIO_Init+0x158>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a47      	ldr	r2, [pc, #284]	; (8002210 <MX_GPIO_Init+0x158>)
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b45      	ldr	r3, [pc, #276]	; (8002210 <MX_GPIO_Init+0x158>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <MX_GPIO_Init+0x158>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <MX_GPIO_Init+0x158>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <MX_GPIO_Init+0x158>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <MX_GPIO_Init+0x158>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a39      	ldr	r2, [pc, #228]	; (8002210 <MX_GPIO_Init+0x158>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <MX_GPIO_Init+0x158>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b33      	ldr	r3, [pc, #204]	; (8002210 <MX_GPIO_Init+0x158>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a32      	ldr	r2, [pc, #200]	; (8002210 <MX_GPIO_Init+0x158>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <MX_GPIO_Init+0x158>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <MX_GPIO_Init+0x158>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <MX_GPIO_Init+0x158>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <MX_GPIO_Init+0x158>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800217c:	4825      	ldr	r0, [pc, #148]	; (8002214 <MX_GPIO_Init+0x15c>)
 800217e:	f003 fca3 	bl	8005ac8 <HAL_GPIO_WritePin>
                      | LED3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	213c      	movs	r1, #60	; 0x3c
 8002186:	4824      	ldr	r0, [pc, #144]	; (8002218 <MX_GPIO_Init+0x160>)
 8002188:	f003 fc9e 	bl	8005ac8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2110      	movs	r1, #16
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <MX_GPIO_Init+0x164>)
 8002192:	f003 fc99 	bl	8005ac8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                             LED3_Pin */
    GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
 8002196:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 800219a:	61fb      	str	r3, [r7, #28]
                          | LED3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	4819      	ldr	r0, [pc, #100]	; (8002214 <MX_GPIO_Init+0x15c>)
 80021b0:	f003 fad6 	bl	8005760 <HAL_GPIO_Init>

    /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
    GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80021b4:	233c      	movs	r3, #60	; 0x3c
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4813      	ldr	r0, [pc, #76]	; (8002218 <MX_GPIO_Init+0x160>)
 80021cc:	f003 fac8 	bl	8005760 <HAL_GPIO_Init>

    /*Configure GPIO pin : SW_Pin */
    GPIO_InitStruct.Pin = SW_Pin;
 80021d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <MX_GPIO_Init+0x164>)
 80021e6:	f003 fabb 	bl	8005760 <HAL_GPIO_Init>

    /*Configure GPIO pin : US_OUT_Pin */
    GPIO_InitStruct.Pin = US_OUT_Pin;
 80021ea:	2310      	movs	r3, #16
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(US_OUT_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <MX_GPIO_Init+0x164>)
 8002202:	f003 faad 	bl	8005760 <HAL_GPIO_Init>

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40021000 	.word	0x40021000
 8002218:	40020000 	.word	0x40020000
 800221c:	40020c00 	.word	0x40020c00

08002220 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    //  HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
    for(;;)
    {

        sprintf(display, "buff:%s", Buffer);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <StartDefaultTask+0x38>)
 800222e:	490b      	ldr	r1, [pc, #44]	; (800225c <StartDefaultTask+0x3c>)
 8002230:	4618      	mov	r0, r3
 8002232:	f00a fdc3 	bl	800cdbc <siprintf>
        OLED_ShowString(10, 20, display);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	461a      	mov	r2, r3
 800223c:	2114      	movs	r1, #20
 800223e:	200a      	movs	r0, #10
 8002240:	f001 fdf2 	bl	8003e28 <OLED_ShowString>
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <StartDefaultTask+0x40>)
 800224a:	f003 fc56 	bl	8005afa <HAL_GPIO_TogglePin>
        osDelay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f008 f898 	bl	800a384 <osDelay>
        sprintf(display, "buff:%s", Buffer);
 8002254:	e7e8      	b.n	8002228 <StartDefaultTask+0x8>
 8002256:	bf00      	nop
 8002258:	20000354 	.word	0x20000354
 800225c:	0800d818 	.word	0x0800d818
 8002260:	40021000 	.word	0x40021000

08002264 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Display */
    uint8_t hello_display[20];
    /* Infinite loop */
    for(;;)
    {
        sprintf(hello_display, "G20 - KACHOW!");
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4908      	ldr	r1, [pc, #32]	; (8002294 <Display+0x30>)
 8002272:	4618      	mov	r0, r3
 8002274:	f00a fda2 	bl	800cdbc <siprintf>
        OLED_ShowString(10, 10, hello_display);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	461a      	mov	r2, r3
 800227e:	210a      	movs	r1, #10
 8002280:	200a      	movs	r0, #10
 8002282:	f001 fdd1 	bl	8003e28 <OLED_ShowString>
        OLED_Refresh_Gram();
 8002286:	f001 fca5 	bl	8003bd4 <OLED_Refresh_Gram>
        osDelay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f008 f87a 	bl	800a384 <osDelay>
        sprintf(hello_display, "G20 - KACHOW!");
 8002290:	e7ec      	b.n	800226c <Display+0x8>
 8002292:	bf00      	nop
 8002294:	0800d820 	.word	0x0800d820

08002298 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 8002298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800229c:	ed2d 8b02 	vpush	{d8}
 80022a0:	b0a1      	sub	sp, #132	; 0x84
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN LeftMotor */

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80022a6:	2100      	movs	r1, #0
 80022a8:	4884      	ldr	r0, [pc, #528]	; (80024bc <LeftMotor+0x224>)
 80022aa:	f005 f929 	bl	8007500 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80022ae:	2104      	movs	r1, #4
 80022b0:	4882      	ldr	r0, [pc, #520]	; (80024bc <LeftMotor+0x224>)
 80022b2:	f005 f925 	bl	8007500 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022b6:	210c      	movs	r1, #12
 80022b8:	4881      	ldr	r0, [pc, #516]	; (80024c0 <LeftMotor+0x228>)
 80022ba:	f005 f921 	bl	8007500 <HAL_TIM_PWM_Start>


    int16_t value, idx;


    while(!is_calibrated)
 80022be:	e002      	b.n	80022c6 <LeftMotor+0x2e>
    {
        osDelay(100);
 80022c0:	2064      	movs	r0, #100	; 0x64
 80022c2:	f008 f85f 	bl	800a384 <osDelay>
    while(!is_calibrated)
 80022c6:	4b7f      	ldr	r3, [pc, #508]	; (80024c4 <LeftMotor+0x22c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f8      	beq.n	80022c0 <LeftMotor+0x28>
    }
    htim1.Instance ->CCR4 = 148.4;
 80022ce:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <LeftMotor+0x228>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2294      	movs	r2, #148	; 0x94
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40




    double target_angle = 90;
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <LeftMotor+0x230>)
 80022dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    uint8_t target_is_before = 0, distance_measure_mode = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    double left_pwm = 0, right_pwm = 0;
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    double PID_dist;

    double target_dist = 0;
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double slip_x = 0, slip_y = 0;
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    char sbuf[10];
    t_heading = current_angle;
 8002328:	4b68      	ldr	r3, [pc, #416]	; (80024cc <LeftMotor+0x234>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fbfb 	bl	8000b2c <__aeabi_d2iz>
 8002336:	4603      	mov	r3, r0
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <LeftMotor+0x238>)
 800233a:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA (&huart3, Buffer, 5);
 800233c:	2205      	movs	r2, #5
 800233e:	4965      	ldr	r1, [pc, #404]	; (80024d4 <LeftMotor+0x23c>)
 8002340:	4865      	ldr	r0, [pc, #404]	; (80024d8 <LeftMotor+0x240>)
 8002342:	f006 fde6 	bl	8008f12 <HAL_UART_Receive_DMA>
    for(;;)
    {
        // Loop until next command is received
        do
        {
            osDelay(80);
 8002346:	2050      	movs	r0, #80	; 0x50
 8002348:	f008 f81c 	bl	800a384 <osDelay>
        }
        while(Buffer[0] == 'd' || Buffer[1] == 'd' || Buffer[2] == 'd' || Buffer[3] == 'd' || Buffer[4] == 'd');
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <LeftMotor+0x23c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d0f8      	beq.n	8002346 <LeftMotor+0xae>
 8002354:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <LeftMotor+0x23c>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d0f4      	beq.n	8002346 <LeftMotor+0xae>
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <LeftMotor+0x23c>)
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d0f0      	beq.n	8002346 <LeftMotor+0xae>
 8002364:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <LeftMotor+0x23c>)
 8002366:	78db      	ldrb	r3, [r3, #3]
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d0ec      	beq.n	8002346 <LeftMotor+0xae>
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <LeftMotor+0x23c>)
 800236e:	791b      	ldrb	r3, [r3, #4]
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d0e8      	beq.n	8002346 <LeftMotor+0xae>
        distance_measure_mode = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        // Convert instruction value to int
        value = (Buffer[2] - '0') * 100 + (Buffer[3] - '0') * 10 + Buffer[4] - '0';
 800237a:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <LeftMotor+0x23c>)
 800237c:	789b      	ldrb	r3, [r3, #2]
 800237e:	3b30      	subs	r3, #48	; 0x30
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	4413      	add	r3, r2
 8002388:	461a      	mov	r2, r3
 800238a:	0091      	lsls	r1, r2, #2
 800238c:	461a      	mov	r2, r3
 800238e:	460b      	mov	r3, r1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <LeftMotor+0x23c>)
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	3b30      	subs	r3, #48	; 0x30
 800239c:	b29b      	uxth	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	0089      	lsls	r1, r1, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <LeftMotor+0x23c>)
 80023ae:	791b      	ldrb	r3, [r3, #4]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b30      	subs	r3, #48	; 0x30
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        if(Buffer[0] == 'U' && Buffer[1] == 'S')
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <LeftMotor+0x23c>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b55      	cmp	r3, #85	; 0x55
 80023c4:	f040 8094 	bne.w	80024f0 <LeftMotor+0x258>
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <LeftMotor+0x23c>)
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b53      	cmp	r3, #83	; 0x53
 80023ce:	f040 808f 	bne.w	80024f0 <LeftMotor+0x258>
        {
        	osDelay(300);
 80023d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023d6:	f007 ffd5 	bl	800a384 <osDelay>
        	taskENTER_CRITICAL();
 80023da:	f00a f9e3 	bl	800c7a4 <vPortEnterCritical>
        	idx = Buffer[2] - '0';
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <LeftMotor+0x23c>)
 80023e0:	789b      	ldrb	r3, [r3, #2]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b30      	subs	r3, #48	; 0x30
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        	value = Distance - ((Buffer[3] - '0') * 10 + Buffer[4] - '0');
 80023ec:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <LeftMotor+0x244>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <LeftMotor+0x23c>)
 80023f4:	78db      	ldrb	r3, [r3, #3]
 80023f6:	3b30      	subs	r3, #48	; 0x30
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	0089      	lsls	r1, r1, #2
 80023fe:	440b      	add	r3, r1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	b299      	uxth	r1, r3
 8002404:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <LeftMotor+0x23c>)
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	b29b      	uxth	r3, r3
 800240a:	440b      	add	r3, r1
 800240c:	b29b      	uxth	r3, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	3330      	adds	r3, #48	; 0x30
 8002414:	b29b      	uxth	r3, r3
 8002416:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        	savedDistances[idx] = value;
 800241a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800241e:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <LeftMotor+0x248>)
 8002424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	Buffer[0] = 'F';
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <LeftMotor+0x23c>)
 800242a:	2246      	movs	r2, #70	; 0x46
 800242c:	701a      	strb	r2, [r3, #0]
        	Buffer[1] = 'W';
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <LeftMotor+0x23c>)
 8002430:	2257      	movs	r2, #87	; 0x57
 8002432:	705a      	strb	r2, [r3, #1]
        	Buffer[2] = (uint8_t)(value/100)%10 + '0';
 8002434:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002438:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <LeftMotor+0x24c>)
 800243a:	fb82 1203 	smull	r1, r2, r2, r3
 800243e:	1152      	asrs	r2, r2, #5
 8002440:	17db      	asrs	r3, r3, #31
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b21b      	sxth	r3, r3
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <LeftMotor+0x250>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	08d9      	lsrs	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3330      	adds	r3, #48	; 0x30
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <LeftMotor+0x23c>)
 8002462:	709a      	strb	r2, [r3, #2]
        	Buffer[3] = (uint8_t)(value/10)%10 + '0';
 8002464:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <LeftMotor+0x254>)
 800246a:	fb82 1203 	smull	r1, r2, r2, r3
 800246e:	1092      	asrs	r2, r2, #2
 8002470:	17db      	asrs	r3, r3, #31
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b21b      	sxth	r3, r3
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <LeftMotor+0x250>)
 800247a:	fba3 1302 	umull	r1, r3, r3, r2
 800247e:	08d9      	lsrs	r1, r3, #3
 8002480:	460b      	mov	r3, r1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3330      	adds	r3, #48	; 0x30
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <LeftMotor+0x23c>)
 8002492:	70da      	strb	r2, [r3, #3]
        	Buffer[4] = (uint8_t)value%10 + '0';
 8002494:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <LeftMotor+0x250>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	08d9      	lsrs	r1, r3, #3
 80024a2:	460b      	mov	r3, r1
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3330      	adds	r3, #48	; 0x30
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <LeftMotor+0x23c>)
 80024b4:	711a      	strb	r2, [r3, #4]
        	taskEXIT_CRITICAL();
 80024b6:	f00a f9a5 	bl	800c804 <vPortExitCritical>
 80024ba:	e08c      	b.n	80025d6 <LeftMotor+0x33e>
 80024bc:	20000254 	.word	0x20000254
 80024c0:	20000134 	.word	0x20000134
 80024c4:	20000370 	.word	0x20000370
 80024c8:	40568000 	.word	0x40568000
 80024cc:	20000360 	.word	0x20000360
 80024d0:	2000035c 	.word	0x2000035c
 80024d4:	20000354 	.word	0x20000354
 80024d8:	2000029c 	.word	0x2000029c
 80024dc:	20000504 	.word	0x20000504
 80024e0:	20000528 	.word	0x20000528
 80024e4:	51eb851f 	.word	0x51eb851f
 80024e8:	cccccccd 	.word	0xcccccccd
 80024ec:	66666667 	.word	0x66666667

        }
        else if(Buffer[0] == 'R' && Buffer[1] == 'T')
 80024f0:	4b80      	ldr	r3, [pc, #512]	; (80026f4 <LeftMotor+0x45c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b52      	cmp	r3, #82	; 0x52
 80024f6:	d16e      	bne.n	80025d6 <LeftMotor+0x33e>
 80024f8:	4b7e      	ldr	r3, [pc, #504]	; (80026f4 <LeftMotor+0x45c>)
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b54      	cmp	r3, #84	; 0x54
 80024fe:	d16a      	bne.n	80025d6 <LeftMotor+0x33e>
        {
        	taskENTER_CRITICAL();
 8002500:	f00a f950 	bl	800c7a4 <vPortEnterCritical>
        	idx = Buffer[2] - '0';
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <LeftMotor+0x45c>)
 8002506:	789b      	ldrb	r3, [r3, #2]
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b30      	subs	r3, #48	; 0x30
 800250c:	b29b      	uxth	r3, r3
 800250e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        	Buffer[0] = 'F';
 8002512:	4b78      	ldr	r3, [pc, #480]	; (80026f4 <LeftMotor+0x45c>)
 8002514:	2246      	movs	r2, #70	; 0x46
 8002516:	701a      	strb	r2, [r3, #0]
        	Buffer[1] = 'W';
 8002518:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <LeftMotor+0x45c>)
 800251a:	2257      	movs	r2, #87	; 0x57
 800251c:	705a      	strb	r2, [r3, #1]
        	value = savedDistances[idx] + ((Buffer[3] - '0') * 10 + Buffer[4] - '0');
 800251e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002522:	4a75      	ldr	r2, [pc, #468]	; (80026f8 <LeftMotor+0x460>)
 8002524:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002528:	4b72      	ldr	r3, [pc, #456]	; (80026f4 <LeftMotor+0x45c>)
 800252a:	78db      	ldrb	r3, [r3, #3]
 800252c:	3b30      	subs	r3, #48	; 0x30
 800252e:	b29b      	uxth	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	0089      	lsls	r1, r1, #2
 8002534:	440b      	add	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	b299      	uxth	r1, r3
 800253a:	4b6e      	ldr	r3, [pc, #440]	; (80026f4 <LeftMotor+0x45c>)
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	b29b      	uxth	r3, r3
 8002540:	440b      	add	r3, r1
 8002542:	b29b      	uxth	r3, r3
 8002544:	4413      	add	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b30      	subs	r3, #48	; 0x30
 800254a:	b29b      	uxth	r3, r3
 800254c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        	Buffer[2] = (uint8_t)(value/100)%10 + '0';
 8002550:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002554:	4a69      	ldr	r2, [pc, #420]	; (80026fc <LeftMotor+0x464>)
 8002556:	fb82 1203 	smull	r1, r2, r2, r3
 800255a:	1152      	asrs	r2, r2, #5
 800255c:	17db      	asrs	r3, r3, #31
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b21b      	sxth	r3, r3
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <LeftMotor+0x468>)
 8002566:	fba3 1302 	umull	r1, r3, r3, r2
 800256a:	08d9      	lsrs	r1, r3, #3
 800256c:	460b      	mov	r3, r1
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3330      	adds	r3, #48	; 0x30
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <LeftMotor+0x45c>)
 800257e:	709a      	strb	r2, [r3, #2]
			Buffer[3] = (uint8_t)(value/10)%10 + '0';
 8002580:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002584:	4a5f      	ldr	r2, [pc, #380]	; (8002704 <LeftMotor+0x46c>)
 8002586:	fb82 1203 	smull	r1, r2, r2, r3
 800258a:	1092      	asrs	r2, r2, #2
 800258c:	17db      	asrs	r3, r3, #31
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	b21b      	sxth	r3, r3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <LeftMotor+0x468>)
 8002596:	fba3 1302 	umull	r1, r3, r3, r2
 800259a:	08d9      	lsrs	r1, r3, #3
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3330      	adds	r3, #48	; 0x30
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <LeftMotor+0x45c>)
 80025ae:	70da      	strb	r2, [r3, #3]
			Buffer[4] = (uint8_t)value%10 + '0';
 80025b0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b52      	ldr	r3, [pc, #328]	; (8002700 <LeftMotor+0x468>)
 80025b8:	fba3 1302 	umull	r1, r3, r3, r2
 80025bc:	08d9      	lsrs	r1, r3, #3
 80025be:	460b      	mov	r3, r1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3330      	adds	r3, #48	; 0x30
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <LeftMotor+0x45c>)
 80025d0:	711a      	strb	r2, [r3, #4]
			taskEXIT_CRITICAL();
 80025d2:	f00a f917 	bl	800c804 <vPortExitCritical>
        }

        // For counter-clockwise turning
        if((Buffer[0] == 'F' && Buffer[1] == 'L') || (Buffer[0] == 'B' && Buffer[1] == 'R'))
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <LeftMotor+0x45c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b46      	cmp	r3, #70	; 0x46
 80025dc:	d103      	bne.n	80025e6 <LeftMotor+0x34e>
 80025de:	4b45      	ldr	r3, [pc, #276]	; (80026f4 <LeftMotor+0x45c>)
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	2b4c      	cmp	r3, #76	; 0x4c
 80025e4:	d007      	beq.n	80025f6 <LeftMotor+0x35e>
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <LeftMotor+0x45c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b42      	cmp	r3, #66	; 0x42
 80025ec:	d117      	bne.n	800261e <LeftMotor+0x386>
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <LeftMotor+0x45c>)
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	2b52      	cmp	r3, #82	; 0x52
 80025f4:	d113      	bne.n	800261e <LeftMotor+0x386>
        {
            t_heading = t_heading - value;  // Set target heading
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <LeftMotor+0x470>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a41      	ldr	r2, [pc, #260]	; (8002708 <LeftMotor+0x470>)
 8002602:	6013      	str	r3, [r2, #0]
            target_angle = (double)t_heading;
 8002604:	4b40      	ldr	r3, [pc, #256]	; (8002708 <LeftMotor+0x470>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff8b 	bl	8000524 <__aeabi_i2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            target_is_before = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800261c:	e030      	b.n	8002680 <LeftMotor+0x3e8>
        }
        // For clockwise turning
        else if ((Buffer[0] == 'F' && Buffer[1] == 'R') || (Buffer[0] == 'B' && Buffer[1] == 'L'))
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <LeftMotor+0x45c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b46      	cmp	r3, #70	; 0x46
 8002624:	d103      	bne.n	800262e <LeftMotor+0x396>
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <LeftMotor+0x45c>)
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b52      	cmp	r3, #82	; 0x52
 800262c:	d007      	beq.n	800263e <LeftMotor+0x3a6>
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <LeftMotor+0x45c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b42      	cmp	r3, #66	; 0x42
 8002634:	d117      	bne.n	8002666 <LeftMotor+0x3ce>
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <LeftMotor+0x45c>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b4c      	cmp	r3, #76	; 0x4c
 800263c:	d113      	bne.n	8002666 <LeftMotor+0x3ce>
        {
            t_heading = t_heading + value;
 800263e:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <LeftMotor+0x470>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <LeftMotor+0x470>)
 800264a:	6013      	str	r3, [r2, #0]
            target_angle = (double)t_heading;
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <LeftMotor+0x470>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ff67 	bl	8000524 <__aeabi_i2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            target_is_before = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8002664:	e00c      	b.n	8002680 <LeftMotor+0x3e8>
        }
        else if(Buffer[1] == 'W')
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <LeftMotor+0x45c>)
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b57      	cmp	r3, #87	; 0x57
 800266c:	d108      	bne.n	8002680 <LeftMotor+0x3e8>
        {
            target_angle = (double)t_heading;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <LeftMotor+0x470>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff56 	bl	8000524 <__aeabi_i2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        // Set servo values
        if(Buffer[1] == 'L')
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <LeftMotor+0x45c>)
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	2b4c      	cmp	r3, #76	; 0x4c
 8002686:	d118      	bne.n	80026ba <LeftMotor+0x422>
        {
            htim1.Instance ->CCR4 = 91;
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <LeftMotor+0x474>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	225b      	movs	r2, #91	; 0x5b
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
            if(prevTurn == 2)
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <LeftMotor+0x478>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d104      	bne.n	80026a2 <LeftMotor+0x40a>
            {
            	osDelay(500);
 8002698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800269c:	f007 fe72 	bl	800a384 <osDelay>
 80026a0:	e007      	b.n	80026b2 <LeftMotor+0x41a>
            }
            else if(prevTurn == 1)
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <LeftMotor+0x478>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d103      	bne.n	80026b2 <LeftMotor+0x41a>
            {
            	osDelay(270);
 80026aa:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80026ae:	f007 fe69 	bl	800a384 <osDelay>
            }
            prevTurn = 0;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <LeftMotor+0x478>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e03f      	b.n	800273a <LeftMotor+0x4a2>
        }
        else if(Buffer[1] == 'R')
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <LeftMotor+0x45c>)
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b52      	cmp	r3, #82	; 0x52
 80026c0:	d128      	bne.n	8002714 <LeftMotor+0x47c>
        {
            htim1.Instance ->CCR4 = 240;
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <LeftMotor+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	22f0      	movs	r2, #240	; 0xf0
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
            if(prevTurn == 0)
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <LeftMotor+0x478>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <LeftMotor+0x444>
			{
				osDelay(500);
 80026d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d6:	f007 fe55 	bl	800a384 <osDelay>
 80026da:	e007      	b.n	80026ec <LeftMotor+0x454>
			}
			else if(prevTurn == 1)
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <LeftMotor+0x478>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d103      	bne.n	80026ec <LeftMotor+0x454>
			{
				osDelay(270);
 80026e4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80026e8:	f007 fe4c 	bl	800a384 <osDelay>
			}
            prevTurn = 2;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <LeftMotor+0x478>)
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e022      	b.n	800273a <LeftMotor+0x4a2>
 80026f4:	20000354 	.word	0x20000354
 80026f8:	20000528 	.word	0x20000528
 80026fc:	51eb851f 	.word	0x51eb851f
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	66666667 	.word	0x66666667
 8002708:	2000035c 	.word	0x2000035c
 800270c:	20000134 	.word	0x20000134
 8002710:	20000030 	.word	0x20000030
        }
        else
        {
            htim1.Instance ->CCR4 = 148.4;
 8002714:	4ba0      	ldr	r3, [pc, #640]	; (8002998 <LeftMotor+0x700>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2294      	movs	r2, #148	; 0x94
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
            if(prevTurn == 2 || prevTurn == 0)
 800271c:	4b9f      	ldr	r3, [pc, #636]	; (800299c <LeftMotor+0x704>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d003      	beq.n	800272c <LeftMotor+0x494>
 8002724:	4b9d      	ldr	r3, [pc, #628]	; (800299c <LeftMotor+0x704>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <LeftMotor+0x49c>
			{
				osDelay(270);
 800272c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002730:	f007 fe28 	bl	800a384 <osDelay>
			}
            prevTurn = 1;
 8002734:	4b99      	ldr	r3, [pc, #612]	; (800299c <LeftMotor+0x704>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
        }
        // If currently running turning instruction
        if(Buffer[1] != 'W')
 800273a:	4b99      	ldr	r3, [pc, #612]	; (80029a0 <LeftMotor+0x708>)
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b57      	cmp	r3, #87	; 0x57
 8002740:	f000 83ec 	beq.w	8002f1c <LeftMotor+0xc84>
        {
            PID_out = 0;
 8002744:	4997      	ldr	r1, [pc, #604]	; (80029a4 <LeftMotor+0x70c>)
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
            // Set PID Controller (constants are Kp,Ki,Kd)
            PID(&Turning_PID, &current_angle, &PID_out, &target_angle, 0.021, 0.1, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	2200      	movs	r2, #0
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	ed9f 2b88 	vldr	d2, [pc, #544]	; 8002980 <LeftMotor+0x6e8>
 8002762:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8002988 <LeftMotor+0x6f0>
 8002766:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 8002990 <LeftMotor+0x6f8>
 800276a:	4a8e      	ldr	r2, [pc, #568]	; (80029a4 <LeftMotor+0x70c>)
 800276c:	498e      	ldr	r1, [pc, #568]	; (80029a8 <LeftMotor+0x710>)
 800276e:	488f      	ldr	r0, [pc, #572]	; (80029ac <LeftMotor+0x714>)
 8002770:	f001 fc52 	bl	8004018 <PID>

            PID_SetMode(&Turning_PID, _PID_MODE_AUTOMATIC);
 8002774:	2101      	movs	r1, #1
 8002776:	488d      	ldr	r0, [pc, #564]	; (80029ac <LeftMotor+0x714>)
 8002778:	f001 fd84 	bl	8004284 <PID_SetMode>
            PID_SetSampleTime(&Turning_PID, 10);
 800277c:	210a      	movs	r1, #10
 800277e:	488b      	ldr	r0, [pc, #556]	; (80029ac <LeftMotor+0x714>)
 8002780:	f001 fef4 	bl	800456c <PID_SetSampleTime>
            PID_SetOutputLimits(&Turning_PID, -1.0f + min_pwm_turn, 1.0f - min_pwm_turn);
 8002784:	4b8a      	ldr	r3, [pc, #552]	; (80029b0 <LeftMotor+0x718>)
 8002786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <LeftMotor+0x71c>)
 8002790:	f7fd fd7a 	bl	8000288 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	ec43 2b18 	vmov	d8, r2, r3
 800279c:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <LeftMotor+0x718>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	4983      	ldr	r1, [pc, #524]	; (80029b4 <LeftMotor+0x71c>)
 80027a8:	f7fd fd6e 	bl	8000288 <__aeabi_dsub>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	ec43 2b17 	vmov	d7, r2, r3
 80027b4:	eeb0 1a47 	vmov.f32	s2, s14
 80027b8:	eef0 1a67 	vmov.f32	s3, s15
 80027bc:	eeb0 0a48 	vmov.f32	s0, s16
 80027c0:	eef0 0a68 	vmov.f32	s1, s17
 80027c4:	4879      	ldr	r0, [pc, #484]	; (80029ac <LeftMotor+0x714>)
 80027c6:	f001 fd7b 	bl	80042c0 <PID_SetOutputLimits>
            //    sprintf(sbuf, "%d", (int)(-1.0f*(double)target_is_before)*(target_angle - current_angle));
            //    HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, sizeof(sbuf), HAL_MAX_DELAY);
            //    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

            // Loop until robot's heading passes target heading
            while(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) > 0)
 80027ca:	e366      	b.n	8002e9a <LeftMotor+0xc02>
            {
                // Blinking LED for checking program crashes
                HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80027cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d0:	4879      	ldr	r0, [pc, #484]	; (80029b8 <LeftMotor+0x720>)
 80027d2:	f003 f992 	bl	8005afa <HAL_GPIO_TogglePin>

                // Compute next pwm val
                PID_Compute(&Turning_PID);
 80027d6:	4875      	ldr	r0, [pc, #468]	; (80029ac <LeftMotor+0x714>)
 80027d8:	f001 fc6a 	bl	80040b0 <PID_Compute>

                taskENTER_CRITICAL();
 80027dc:	f009 ffe2 	bl	800c7a4 <vPortEnterCritical>
                // If steering left
                if(Buffer[1] == 'L')
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <LeftMotor+0x708>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b4c      	cmp	r3, #76	; 0x4c
 80027e6:	f040 81b2 	bne.w	8002b4e <LeftMotor+0x8b6>
                {
                    // Forward
                    if(PID_out < 0)
 80027ea:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <LeftMotor+0x70c>)
 80027ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	f7fe f970 	bl	8000adc <__aeabi_dcmplt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80e8 	beq.w	80029d4 <LeftMotor+0x73c>
                    {
                        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	2104      	movs	r1, #4
 8002808:	486c      	ldr	r0, [pc, #432]	; (80029bc <LeftMotor+0x724>)
 800280a:	f003 f95d 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800280e:	2201      	movs	r2, #1
 8002810:	2108      	movs	r1, #8
 8002812:	486a      	ldr	r0, [pc, #424]	; (80029bc <LeftMotor+0x724>)
 8002814:	f003 f958 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	2120      	movs	r1, #32
 800281c:	4867      	ldr	r0, [pc, #412]	; (80029bc <LeftMotor+0x724>)
 800281e:	f003 f953 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002822:	2201      	movs	r2, #1
 8002824:	2110      	movs	r1, #16
 8002826:	4865      	ldr	r0, [pc, #404]	; (80029bc <LeftMotor+0x724>)
 8002828:	f003 f94e 	bl	8005ac8 <HAL_GPIO_WritePin>
//                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 10)
//						{
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * min_pwm_turn * 0.6);
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * min_pwm_turn * 0.6);
//						}
                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 30)
 800282c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe67 	bl	8000504 <__aeabi_ui2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	4960      	ldr	r1, [pc, #384]	; (80029c0 <LeftMotor+0x728>)
 8002840:	f7fd fd22 	bl	8000288 <__aeabi_dsub>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	f7fd fd1c 	bl	800028c <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4690      	mov	r8, r2
 800285a:	4699      	mov	r9, r3
 800285c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002860:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <LeftMotor+0x710>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd fd0f 	bl	8000288 <__aeabi_dsub>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4640      	mov	r0, r8
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd fec1 	bl	80005f8 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <LeftMotor+0x72c>)
 8002884:	f7fe f92a 	bl	8000adc <__aeabi_dcmplt>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d031      	beq.n	80028f2 <LeftMotor+0x65a>
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * min_pwm_turn);
 800288e:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <LeftMotor+0x730>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe36 	bl	8000504 <__aeabi_ui2d>
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <LeftMotor+0x734>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd feab 	bl	80005f8 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <LeftMotor+0x718>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd fea2 	bl	80005f8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4945      	ldr	r1, [pc, #276]	; (80029d0 <LeftMotor+0x738>)
 80028ba:	680e      	ldr	r6, [r1, #0]
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f95c 	bl	8000b7c <__aeabi_d2uiz>
 80028c4:	4603      	mov	r3, r0
 80028c6:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * min_pwm_turn);
 80028c8:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <LeftMotor+0x730>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe19 	bl	8000504 <__aeabi_ui2d>
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <LeftMotor+0x718>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd fe8e 	bl	80005f8 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	493b      	ldr	r1, [pc, #236]	; (80029d0 <LeftMotor+0x738>)
 80028e2:	680e      	ldr	r6, [r1, #0]
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f948 	bl	8000b7c <__aeabi_d2uiz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	63b3      	str	r3, [r6, #56]	; 0x38
 80028f0:	e2ce      	b.n	8002e90 <LeftMotor+0xbf8>
                        }
                        else
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * (-PID_out + min_pwm_turn));
 80028f2:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <LeftMotor+0x730>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fe04 	bl	8000504 <__aeabi_ui2d>
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <LeftMotor+0x734>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fe79 	bl	80005f8 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4690      	mov	r8, r2
 800290c:	4699      	mov	r9, r3
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <LeftMotor+0x718>)
 8002910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <LeftMotor+0x70c>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fcb5 	bl	8000288 <__aeabi_dsub>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4640      	mov	r0, r8
 8002924:	4649      	mov	r1, r9
 8002926:	f7fd fe67 	bl	80005f8 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4928      	ldr	r1, [pc, #160]	; (80029d0 <LeftMotor+0x738>)
 8002930:	680e      	ldr	r6, [r1, #0]
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f921 	bl	8000b7c <__aeabi_d2uiz>
 800293a:	4603      	mov	r3, r0
 800293c:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * (-PID_out + min_pwm_turn));
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <LeftMotor+0x730>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fdde 	bl	8000504 <__aeabi_ui2d>
 8002948:	4680      	mov	r8, r0
 800294a:	4689      	mov	r9, r1
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <LeftMotor+0x718>)
 800294e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <LeftMotor+0x70c>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fc96 	bl	8000288 <__aeabi_dsub>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4640      	mov	r0, r8
 8002962:	4649      	mov	r1, r9
 8002964:	f7fd fe48 	bl	80005f8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4918      	ldr	r1, [pc, #96]	; (80029d0 <LeftMotor+0x738>)
 800296e:	680e      	ldr	r6, [r1, #0]
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f902 	bl	8000b7c <__aeabi_d2uiz>
 8002978:	4603      	mov	r3, r0
 800297a:	63b3      	str	r3, [r6, #56]	; 0x38
 800297c:	e288      	b.n	8002e90 <LeftMotor+0xbf8>
 800297e:	bf00      	nop
	...
 8002988:	9999999a 	.word	0x9999999a
 800298c:	3fb99999 	.word	0x3fb99999
 8002990:	24dd2f1b 	.word	0x24dd2f1b
 8002994:	3f958106 	.word	0x3f958106
 8002998:	20000134 	.word	0x20000134
 800299c:	20000030 	.word	0x20000030
 80029a0:	20000354 	.word	0x20000354
 80029a4:	20000520 	.word	0x20000520
 80029a8:	20000360 	.word	0x20000360
 80029ac:	200003a8 	.word	0x200003a8
 80029b0:	20000020 	.word	0x20000020
 80029b4:	3ff00000 	.word	0x3ff00000
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40020000 	.word	0x40020000
 80029c0:	3fe00000 	.word	0x3fe00000
 80029c4:	403e0000 	.word	0x403e0000
 80029c8:	20000012 	.word	0x20000012
 80029cc:	20000008 	.word	0x20000008
 80029d0:	20000254 	.word	0x20000254
                        }
                    }
                    // Backwards
                    else
                    {
                        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2108      	movs	r1, #8
 80029d8:	48a1      	ldr	r0, [pc, #644]	; (8002c60 <LeftMotor+0x9c8>)
 80029da:	f003 f875 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	2104      	movs	r1, #4
 80029e2:	489f      	ldr	r0, [pc, #636]	; (8002c60 <LeftMotor+0x9c8>)
 80029e4:	f003 f870 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2110      	movs	r1, #16
 80029ec:	489c      	ldr	r0, [pc, #624]	; (8002c60 <LeftMotor+0x9c8>)
 80029ee:	f003 f86b 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80029f2:	2201      	movs	r2, #1
 80029f4:	2120      	movs	r1, #32
 80029f6:	489a      	ldr	r0, [pc, #616]	; (8002c60 <LeftMotor+0x9c8>)
 80029f8:	f003 f866 	bl	8005ac8 <HAL_GPIO_WritePin>
//                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 10)
//						{
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * min_pwm_turn * 0.6);
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * min_pwm_turn * 0.6);
//						}
                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 30)
 80029fc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd7f 	bl	8000504 <__aeabi_ui2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	4995      	ldr	r1, [pc, #596]	; (8002c64 <LeftMotor+0x9cc>)
 8002a10:	f7fd fc3a 	bl	8000288 <__aeabi_dsub>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	f7fd fc34 	bl	800028c <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4690      	mov	r8, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a30:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <LeftMotor+0x9d0>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fc27 	bl	8000288 <__aeabi_dsub>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	f7fd fdd9 	bl	80005f8 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <LeftMotor+0x9d4>)
 8002a54:	f7fe f842 	bl	8000adc <__aeabi_dcmplt>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d031      	beq.n	8002ac2 <LeftMotor+0x82a>
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * min_pwm_turn);
 8002a5e:	4b84      	ldr	r3, [pc, #528]	; (8002c70 <LeftMotor+0x9d8>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd4e 	bl	8000504 <__aeabi_ui2d>
 8002a68:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <LeftMotor+0x9dc>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f7fd fdc3 	bl	80005f8 <__aeabi_dmul>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <LeftMotor+0x9e0>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fdba 	bl	80005f8 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	497c      	ldr	r1, [pc, #496]	; (8002c7c <LeftMotor+0x9e4>)
 8002a8a:	680e      	ldr	r6, [r1, #0]
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f874 	bl	8000b7c <__aeabi_d2uiz>
 8002a94:	4603      	mov	r3, r0
 8002a96:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * min_pwm_turn);
 8002a98:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <LeftMotor+0x9d8>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd31 	bl	8000504 <__aeabi_ui2d>
 8002aa2:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <LeftMotor+0x9e0>)
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fda6 	bl	80005f8 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4972      	ldr	r1, [pc, #456]	; (8002c7c <LeftMotor+0x9e4>)
 8002ab2:	680e      	ldr	r6, [r1, #0]
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f860 	bl	8000b7c <__aeabi_d2uiz>
 8002abc:	4603      	mov	r3, r0
 8002abe:	63b3      	str	r3, [r6, #56]	; 0x38
 8002ac0:	e1e6      	b.n	8002e90 <LeftMotor+0xbf8>
                        }
                        else
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * left_ratio * (PID_out + min_pwm_turn));
 8002ac2:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <LeftMotor+0x9d8>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd1c 	bl	8000504 <__aeabi_ui2d>
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <LeftMotor+0x9dc>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fd91 	bl	80005f8 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4690      	mov	r8, r2
 8002adc:	4699      	mov	r9, r3
 8002ade:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <LeftMotor+0x9e8>)
 8002ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <LeftMotor+0x9e0>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fbcf 	bl	800028c <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4640      	mov	r0, r8
 8002af4:	4649      	mov	r1, r9
 8002af6:	f7fd fd7f 	bl	80005f8 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	495f      	ldr	r1, [pc, #380]	; (8002c7c <LeftMotor+0x9e4>)
 8002b00:	680e      	ldr	r6, [r1, #0]
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fe f839 	bl	8000b7c <__aeabi_d2uiz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * (PID_out + min_pwm_turn));
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <LeftMotor+0x9d8>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fcf6 	bl	8000504 <__aeabi_ui2d>
 8002b18:	4680      	mov	r8, r0
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <LeftMotor+0x9e8>)
 8002b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b22:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <LeftMotor+0x9e0>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fbb0 	bl	800028c <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4640      	mov	r0, r8
 8002b32:	4649      	mov	r1, r9
 8002b34:	f7fd fd60 	bl	80005f8 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	494f      	ldr	r1, [pc, #316]	; (8002c7c <LeftMotor+0x9e4>)
 8002b3e:	680e      	ldr	r6, [r1, #0]
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fe f81a 	bl	8000b7c <__aeabi_d2uiz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	63b3      	str	r3, [r6, #56]	; 0x38
 8002b4c:	e1a0      	b.n	8002e90 <LeftMotor+0xbf8>
                        }
                    }
                }
                // If steering right
                else if(Buffer[1] == 'R')
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <LeftMotor+0x9ec>)
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b52      	cmp	r3, #82	; 0x52
 8002b54:	f040 819c 	bne.w	8002e90 <LeftMotor+0xbf8>
                {
                    // Backwards
                    if(PID_out < 0)
 8002b58:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <LeftMotor+0x9e8>)
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f7fd ffb9 	bl	8000adc <__aeabi_dcmplt>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80d3 	beq.w	8002d18 <LeftMotor+0xa80>
                    {
                        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2108      	movs	r1, #8
 8002b76:	483a      	ldr	r0, [pc, #232]	; (8002c60 <LeftMotor+0x9c8>)
 8002b78:	f002 ffa6 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	2104      	movs	r1, #4
 8002b80:	4837      	ldr	r0, [pc, #220]	; (8002c60 <LeftMotor+0x9c8>)
 8002b82:	f002 ffa1 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2110      	movs	r1, #16
 8002b8a:	4835      	ldr	r0, [pc, #212]	; (8002c60 <LeftMotor+0x9c8>)
 8002b8c:	f002 ff9c 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2120      	movs	r1, #32
 8002b94:	4832      	ldr	r0, [pc, #200]	; (8002c60 <LeftMotor+0x9c8>)
 8002b96:	f002 ff97 	bl	8005ac8 <HAL_GPIO_WritePin>
//                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 10)
//						{
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * min_pwm_turn * 0.6);
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * min_pwm_turn * 0.6);
//						}
                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 30)
 8002b9a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fcb0 	bl	8000504 <__aeabi_ui2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	492d      	ldr	r1, [pc, #180]	; (8002c64 <LeftMotor+0x9cc>)
 8002bae:	f7fd fb6b 	bl	8000288 <__aeabi_dsub>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	f7fd fb65 	bl	800028c <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <LeftMotor+0x9d0>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fb58 	bl	8000288 <__aeabi_dsub>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4649      	mov	r1, r9
 8002be0:	f7fd fd0a 	bl	80005f8 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <LeftMotor+0x9d4>)
 8002bf2:	f7fd ff73 	bl	8000adc <__aeabi_dcmplt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d047      	beq.n	8002c8c <LeftMotor+0x9f4>
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * min_pwm_turn);
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <LeftMotor+0x9d8>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fc7f 	bl	8000504 <__aeabi_ui2d>
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <LeftMotor+0x9e0>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd fcf4 	bl	80005f8 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4919      	ldr	r1, [pc, #100]	; (8002c7c <LeftMotor+0x9e4>)
 8002c16:	680e      	ldr	r6, [r1, #0]
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffae 	bl	8000b7c <__aeabi_d2uiz>
 8002c20:	4603      	mov	r3, r0
 8002c22:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * min_pwm_turn);
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <LeftMotor+0x9d8>)
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc6b 	bl	8000504 <__aeabi_ui2d>
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <LeftMotor+0x9f0>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fce0 	bl	80005f8 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <LeftMotor+0x9e0>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fcd7 	bl	80005f8 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	490b      	ldr	r1, [pc, #44]	; (8002c7c <LeftMotor+0x9e4>)
 8002c50:	680e      	ldr	r6, [r1, #0]
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ff91 	bl	8000b7c <__aeabi_d2uiz>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	63b3      	str	r3, [r6, #56]	; 0x38
 8002c5e:	e117      	b.n	8002e90 <LeftMotor+0xbf8>
 8002c60:	40020000 	.word	0x40020000
 8002c64:	3fe00000 	.word	0x3fe00000
 8002c68:	20000360 	.word	0x20000360
 8002c6c:	403e0000 	.word	0x403e0000
 8002c70:	20000012 	.word	0x20000012
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000020 	.word	0x20000020
 8002c7c:	20000254 	.word	0x20000254
 8002c80:	20000520 	.word	0x20000520
 8002c84:	20000354 	.word	0x20000354
 8002c88:	20000000 	.word	0x20000000
                        }
                        else
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * (-PID_out + min_pwm_turn));
 8002c8c:	4bc0      	ldr	r3, [pc, #768]	; (8002f90 <LeftMotor+0xcf8>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc37 	bl	8000504 <__aeabi_ui2d>
 8002c96:	4680      	mov	r8, r0
 8002c98:	4689      	mov	r9, r1
 8002c9a:	4bbe      	ldr	r3, [pc, #760]	; (8002f94 <LeftMotor+0xcfc>)
 8002c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ca0:	4bbd      	ldr	r3, [pc, #756]	; (8002f98 <LeftMotor+0xd00>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd faef 	bl	8000288 <__aeabi_dsub>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4640      	mov	r0, r8
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	f7fd fca1 	bl	80005f8 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	49b8      	ldr	r1, [pc, #736]	; (8002f9c <LeftMotor+0xd04>)
 8002cbc:	680e      	ldr	r6, [r1, #0]
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff5b 	bl	8000b7c <__aeabi_d2uiz>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * (-PID_out + min_pwm_turn));
 8002cca:	4bb1      	ldr	r3, [pc, #708]	; (8002f90 <LeftMotor+0xcf8>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc18 	bl	8000504 <__aeabi_ui2d>
 8002cd4:	4bb2      	ldr	r3, [pc, #712]	; (8002fa0 <LeftMotor+0xd08>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd fc8d 	bl	80005f8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	4bab      	ldr	r3, [pc, #684]	; (8002f94 <LeftMotor+0xcfc>)
 8002ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cec:	4baa      	ldr	r3, [pc, #680]	; (8002f98 <LeftMotor+0xd00>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fac9 	bl	8000288 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	f7fd fc7b 	bl	80005f8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	49a5      	ldr	r1, [pc, #660]	; (8002f9c <LeftMotor+0xd04>)
 8002d08:	680e      	ldr	r6, [r1, #0]
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff35 	bl	8000b7c <__aeabi_d2uiz>
 8002d12:	4603      	mov	r3, r0
 8002d14:	63b3      	str	r3, [r6, #56]	; 0x38
 8002d16:	e0bb      	b.n	8002e90 <LeftMotor+0xbf8>
                        }
                    }
                    // Forwards
                    else
                    {
                        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	48a1      	ldr	r0, [pc, #644]	; (8002fa4 <LeftMotor+0xd0c>)
 8002d1e:	f002 fed3 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002d22:	2201      	movs	r2, #1
 8002d24:	2108      	movs	r1, #8
 8002d26:	489f      	ldr	r0, [pc, #636]	; (8002fa4 <LeftMotor+0xd0c>)
 8002d28:	f002 fece 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2120      	movs	r1, #32
 8002d30:	489c      	ldr	r0, [pc, #624]	; (8002fa4 <LeftMotor+0xd0c>)
 8002d32:	f002 fec9 	bl	8005ac8 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002d36:	2201      	movs	r2, #1
 8002d38:	2110      	movs	r1, #16
 8002d3a:	489a      	ldr	r0, [pc, #616]	; (8002fa4 <LeftMotor+0xd0c>)
 8002d3c:	f002 fec4 	bl	8005ac8 <HAL_GPIO_WritePin>
//                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 10)
//						{
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * min_pwm_turn * 0.6);
//							__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * min_pwm_turn * 0.6);
//						}
                        if(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) < 30)
 8002d40:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fbdd 	bl	8000504 <__aeabi_ui2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	4995      	ldr	r1, [pc, #596]	; (8002fa8 <LeftMotor+0xd10>)
 8002d54:	f7fd fa98 	bl	8000288 <__aeabi_dsub>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	f7fd fa92 	bl	800028c <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4690      	mov	r8, r2
 8002d6e:	4699      	mov	r9, r3
 8002d70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d74:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <LeftMotor+0xd14>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fa85 	bl	8000288 <__aeabi_dsub>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4640      	mov	r0, r8
 8002d84:	4649      	mov	r1, r9
 8002d86:	f7fd fc37 	bl	80005f8 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	4b86      	ldr	r3, [pc, #536]	; (8002fb0 <LeftMotor+0xd18>)
 8002d98:	f7fd fea0 	bl	8000adc <__aeabi_dcmplt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d031      	beq.n	8002e06 <LeftMotor+0xb6e>
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * min_pwm_turn);
 8002da2:	4b7b      	ldr	r3, [pc, #492]	; (8002f90 <LeftMotor+0xcf8>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbac 	bl	8000504 <__aeabi_ui2d>
 8002dac:	4b79      	ldr	r3, [pc, #484]	; (8002f94 <LeftMotor+0xcfc>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fc21 	bl	80005f8 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4978      	ldr	r1, [pc, #480]	; (8002f9c <LeftMotor+0xd04>)
 8002dbc:	680e      	ldr	r6, [r1, #0]
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fedb 	bl	8000b7c <__aeabi_d2uiz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * min_pwm_turn);
 8002dca:	4b71      	ldr	r3, [pc, #452]	; (8002f90 <LeftMotor+0xcf8>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fb98 	bl	8000504 <__aeabi_ui2d>
 8002dd4:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <LeftMotor+0xd08>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc0d 	bl	80005f8 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4b6b      	ldr	r3, [pc, #428]	; (8002f94 <LeftMotor+0xcfc>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd fc04 	bl	80005f8 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4969      	ldr	r1, [pc, #420]	; (8002f9c <LeftMotor+0xd04>)
 8002df6:	680e      	ldr	r6, [r1, #0]
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd febe 	bl	8000b7c <__aeabi_d2uiz>
 8002e00:	4603      	mov	r3, r0
 8002e02:	63b3      	str	r3, [r6, #56]	; 0x38
 8002e04:	e044      	b.n	8002e90 <LeftMotor+0xbf8>
                        }
                        else
                        {
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)pwmVal_Turn * (PID_out + min_pwm_turn));
 8002e06:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <LeftMotor+0xcf8>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fb7a 	bl	8000504 <__aeabi_ui2d>
 8002e10:	4680      	mov	r8, r0
 8002e12:	4689      	mov	r9, r1
 8002e14:	4b60      	ldr	r3, [pc, #384]	; (8002f98 <LeftMotor+0xd00>)
 8002e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e1a:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <LeftMotor+0xcfc>)
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f7fd fa34 	bl	800028c <__adddf3>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4640      	mov	r0, r8
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	f7fd fbe4 	bl	80005f8 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4959      	ldr	r1, [pc, #356]	; (8002f9c <LeftMotor+0xd04>)
 8002e36:	680e      	ldr	r6, [r1, #0]
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fe9e 	bl	8000b7c <__aeabi_d2uiz>
 8002e40:	4603      	mov	r3, r0
 8002e42:	6373      	str	r3, [r6, #52]	; 0x34
                            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)pwmVal_Turn * right_ratio * (PID_out + min_pwm_turn));
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <LeftMotor+0xcf8>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb5b 	bl	8000504 <__aeabi_ui2d>
 8002e4e:	4b54      	ldr	r3, [pc, #336]	; (8002fa0 <LeftMotor+0xd08>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fbd0 	bl	80005f8 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4690      	mov	r8, r2
 8002e5e:	4699      	mov	r9, r3
 8002e60:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <LeftMotor+0xd00>)
 8002e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <LeftMotor+0xcfc>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fa0e 	bl	800028c <__adddf3>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4640      	mov	r0, r8
 8002e76:	4649      	mov	r1, r9
 8002e78:	f7fd fbbe 	bl	80005f8 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4946      	ldr	r1, [pc, #280]	; (8002f9c <LeftMotor+0xd04>)
 8002e82:	680e      	ldr	r6, [r1, #0]
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fd fe78 	bl	8000b7c <__aeabi_d2uiz>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	63b3      	str	r3, [r6, #56]	; 0x38
                        }
                    }
                }
                taskEXIT_CRITICAL();
 8002e90:	f009 fcb8 	bl	800c804 <vPortExitCritical>

                // Loops every 10ms
                osDelayUntil(pdMS_TO_TICKS(10));
 8002e94:	200a      	movs	r0, #10
 8002e96:	f007 fa90 	bl	800a3ba <osDelayUntil>
            while(2 * (0.5f - (double)target_is_before) * (target_angle - current_angle) > 0)
 8002e9a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb30 	bl	8000504 <__aeabi_ui2d>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	493e      	ldr	r1, [pc, #248]	; (8002fa8 <LeftMotor+0xd10>)
 8002eae:	f7fd f9eb 	bl	8000288 <__aeabi_dsub>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	f7fd f9e5 	bl	800028c <__adddf3>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4690      	mov	r8, r2
 8002ec8:	4699      	mov	r9, r3
 8002eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <LeftMotor+0xd14>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd f9d8 	bl	8000288 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4640      	mov	r0, r8
 8002ede:	4649      	mov	r1, r9
 8002ee0:	f7fd fb8a 	bl	80005f8 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	f7fd fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f ac66 	bne.w	80027cc <LeftMotor+0x534>
            }
            // Set both motor's speed to 0
            taskENTER_CRITICAL();
 8002f00:	f009 fc50 	bl	800c7a4 <vPortEnterCritical>
            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <LeftMotor+0xd04>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <LeftMotor+0xd04>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
            taskEXIT_CRITICAL();
 8002f14:	f009 fc76 	bl	800c804 <vPortExitCritical>
 8002f18:	f000 bc56 	b.w	80037c8 <LeftMotor+0x1530>
        }
        // If currently running straight line instruction
        else
        {
            // Reset traveled distance to 0
            travel_dist = 0;
 8002f1c:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <LeftMotor+0xd1c>)
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9c1 2300 	strd	r2, r3, [r1]
            encoder_position = 0;
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <LeftMotor+0xd20>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
            if(Buffer[0] == 'F')
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <LeftMotor+0xd24>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b46      	cmp	r3, #70	; 0x46
 8002f36:	d143      	bne.n	8002fc0 <LeftMotor+0xd28>
            {
                HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <LeftMotor+0xd0c>)
 8002f3e:	f002 fdc3 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002f42:	2201      	movs	r2, #1
 8002f44:	2108      	movs	r1, #8
 8002f46:	4817      	ldr	r0, [pc, #92]	; (8002fa4 <LeftMotor+0xd0c>)
 8002f48:	f002 fdbe 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2120      	movs	r1, #32
 8002f50:	4814      	ldr	r0, [pc, #80]	; (8002fa4 <LeftMotor+0xd0c>)
 8002f52:	f002 fdb9 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002f56:	2201      	movs	r2, #1
 8002f58:	2110      	movs	r1, #16
 8002f5a:	4812      	ldr	r0, [pc, #72]	; (8002fa4 <LeftMotor+0xd0c>)
 8002f5c:	f002 fdb4 	bl	8005ac8 <HAL_GPIO_WritePin>
                target_is_before = 1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                //        target_dist = (double)value * 100.0/102.5;
                target_dist = (double)value * 1.01;
 8002f66:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fada 	bl	8000524 <__aeabi_i2d>
 8002f70:	a305      	add	r3, pc, #20	; (adr r3, 8002f88 <LeftMotor+0xcf0>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd fb3f 	bl	80005f8 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002f82:	e04d      	b.n	8003020 <LeftMotor+0xd88>
 8002f84:	f3af 8000 	nop.w
 8002f88:	c28f5c29 	.word	0xc28f5c29
 8002f8c:	3ff028f5 	.word	0x3ff028f5
 8002f90:	20000012 	.word	0x20000012
 8002f94:	20000020 	.word	0x20000020
 8002f98:	20000520 	.word	0x20000520
 8002f9c:	20000254 	.word	0x20000254
 8002fa0:	20000000 	.word	0x20000000
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	3fe00000 	.word	0x3fe00000
 8002fac:	20000360 	.word	0x20000360
 8002fb0:	403e0000 	.word	0x403e0000
 8002fb4:	20000378 	.word	0x20000378
 8002fb8:	20000380 	.word	0x20000380
 8002fbc:	20000354 	.word	0x20000354
                //        }
                //        else{
                //          target_dist = (double)value * 100.0/105.0;
                //        }
            }
            else if(Buffer[0] == 'B')
 8002fc0:	4b95      	ldr	r3, [pc, #596]	; (8003218 <LeftMotor+0xf80>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b42      	cmp	r3, #66	; 0x42
 8002fc6:	d12b      	bne.n	8003020 <LeftMotor+0xd88>
            {
                HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2108      	movs	r1, #8
 8002fcc:	4893      	ldr	r0, [pc, #588]	; (800321c <LeftMotor+0xf84>)
 8002fce:	f002 fd7b 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4891      	ldr	r0, [pc, #580]	; (800321c <LeftMotor+0xf84>)
 8002fd8:	f002 fd76 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2110      	movs	r1, #16
 8002fe0:	488e      	ldr	r0, [pc, #568]	; (800321c <LeftMotor+0xf84>)
 8002fe2:	f002 fd71 	bl	8005ac8 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2120      	movs	r1, #32
 8002fea:	488c      	ldr	r0, [pc, #560]	; (800321c <LeftMotor+0xf84>)
 8002fec:	f002 fd6c 	bl	8005ac8 <HAL_GPIO_WritePin>
                target_is_before = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                //        target_dist = -(double)value * 100.0/102.5;
                target_dist = -(double)value * 1.01;
 8002ff6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa92 	bl	8000524 <__aeabi_i2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4614      	mov	r4, r2
 8003006:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800300a:	a375      	add	r3, pc, #468	; (adr r3, 80031e0 <LeftMotor+0xf48>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	4620      	mov	r0, r4
 8003012:	4629      	mov	r1, r5
 8003014:	f7fd faf0 	bl	80005f8 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	e9c7 2306 	strd	r2, r3, [r7, #24]
                //        }
                //        else{
                //          target_dist = -(double)value * 100.0/105.0;
                //        }
            }
            PID_out = 0;
 8003020:	497f      	ldr	r1, [pc, #508]	; (8003220 <LeftMotor+0xf88>)
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9c1 2300 	strd	r2, r3, [r1]
            PID_dist = 0;
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9c7 2308 	strd	r2, r3, [r7, #32]
            // Set straight distance PID controller (constants are Kp,Ki,Kd)
            PID(&Straight_PID, &travel_dist, &PID_dist, &target_dist, 0.011, 0.02, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 800303a:	f107 0318 	add.w	r3, r7, #24
 800303e:	f107 0220 	add.w	r2, r7, #32
 8003042:	2100      	movs	r1, #0
 8003044:	9101      	str	r1, [sp, #4]
 8003046:	2101      	movs	r1, #1
 8003048:	9100      	str	r1, [sp, #0]
 800304a:	ed9f 2b67 	vldr	d2, [pc, #412]	; 80031e8 <LeftMotor+0xf50>
 800304e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 80031f0 <LeftMotor+0xf58>
 8003052:	ed9f 0b69 	vldr	d0, [pc, #420]	; 80031f8 <LeftMotor+0xf60>
 8003056:	4973      	ldr	r1, [pc, #460]	; (8003224 <LeftMotor+0xf8c>)
 8003058:	4873      	ldr	r0, [pc, #460]	; (8003228 <LeftMotor+0xf90>)
 800305a:	f000 ffdd 	bl	8004018 <PID>

            PID_SetMode(&Straight_PID, _PID_MODE_AUTOMATIC);
 800305e:	2101      	movs	r1, #1
 8003060:	4871      	ldr	r0, [pc, #452]	; (8003228 <LeftMotor+0xf90>)
 8003062:	f001 f90f 	bl	8004284 <PID_SetMode>
            PID_SetSampleTime(&Straight_PID, 10);
 8003066:	210a      	movs	r1, #10
 8003068:	486f      	ldr	r0, [pc, #444]	; (8003228 <LeftMotor+0xf90>)
 800306a:	f001 fa7f 	bl	800456c <PID_SetSampleTime>
            PID_SetOutputLimits(&Straight_PID, -1.0f + min_pwm_ratio, 1.0f - min_pwm_ratio);
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <LeftMotor+0xf94>)
 8003070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <LeftMotor+0xf98>)
 800307a:	f7fd f905 	bl	8000288 <__aeabi_dsub>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	ec43 2b18 	vmov	d8, r2, r3
 8003086:	4b69      	ldr	r3, [pc, #420]	; (800322c <LeftMotor+0xf94>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	4967      	ldr	r1, [pc, #412]	; (8003230 <LeftMotor+0xf98>)
 8003092:	f7fd f8f9 	bl	8000288 <__aeabi_dsub>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ec43 2b17 	vmov	d7, r2, r3
 800309e:	eeb0 1a47 	vmov.f32	s2, s14
 80030a2:	eef0 1a67 	vmov.f32	s3, s15
 80030a6:	eeb0 0a48 	vmov.f32	s0, s16
 80030aa:	eef0 0a68 	vmov.f32	s1, s17
 80030ae:	485e      	ldr	r0, [pc, #376]	; (8003228 <LeftMotor+0xf90>)
 80030b0:	f001 f906 	bl	80042c0 <PID_SetOutputLimits>

            // Set straight line error correction PID controller (constants are Kp,Ki,Kd)
            PID(&StraightErr_PID, &current_angle, &PID_out, &target_angle, 0.05, 0.02, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80030b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b8:	2200      	movs	r2, #0
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	ed9f 2b49 	vldr	d2, [pc, #292]	; 80031e8 <LeftMotor+0xf50>
 80030c4:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 80031f0 <LeftMotor+0xf58>
 80030c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003200 <LeftMotor+0xf68>
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <LeftMotor+0xf88>)
 80030ce:	4959      	ldr	r1, [pc, #356]	; (8003234 <LeftMotor+0xf9c>)
 80030d0:	4859      	ldr	r0, [pc, #356]	; (8003238 <LeftMotor+0xfa0>)
 80030d2:	f000 ffa1 	bl	8004018 <PID>

            PID_SetMode(&StraightErr_PID, _PID_MODE_AUTOMATIC);
 80030d6:	2101      	movs	r1, #1
 80030d8:	4857      	ldr	r0, [pc, #348]	; (8003238 <LeftMotor+0xfa0>)
 80030da:	f001 f8d3 	bl	8004284 <PID_SetMode>
            PID_SetSampleTime(&StraightErr_PID, 10);
 80030de:	210a      	movs	r1, #10
 80030e0:	4855      	ldr	r0, [pc, #340]	; (8003238 <LeftMotor+0xfa0>)
 80030e2:	f001 fa43 	bl	800456c <PID_SetSampleTime>
            PID_SetOutputLimits(&StraightErr_PID, -max_pwm_dif, max_pwm_dif);
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <LeftMotor+0xfa4>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	4692      	mov	sl, r2
 80030ee:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80030f2:	4b52      	ldr	r3, [pc, #328]	; (800323c <LeftMotor+0xfa4>)
 80030f4:	ed93 7b00 	vldr	d7, [r3]
 80030f8:	eeb0 1a47 	vmov.f32	s2, s14
 80030fc:	eef0 1a67 	vmov.f32	s3, s15
 8003100:	ec4b ab10 	vmov	d0, sl, fp
 8003104:	484c      	ldr	r0, [pc, #304]	; (8003238 <LeftMotor+0xfa0>)
 8003106:	f001 f8db 	bl	80042c0 <PID_SetOutputLimits>

            // Start motor speed to 0
            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (double)0);
 800310a:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <LeftMotor+0xfa8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (double)0);
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <LeftMotor+0xfa8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	639a      	str	r2, [r3, #56]	; 0x38

            // Loop until traveled distance exceeds target distance (target_is_before is to account for backward movements)
            while((2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) > 0))
 800311a:	e324      	b.n	8003766 <LeftMotor+0x14ce>
                //        sprintf(sbuf, "%7d", (int)target_pulse);
                //        HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
                //        HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

                // Comput PID values
                PID_Compute(&Straight_PID);
 800311c:	4842      	ldr	r0, [pc, #264]	; (8003228 <LeftMotor+0xf90>)
 800311e:	f000 ffc7 	bl	80040b0 <PID_Compute>
                PID_Compute(&StraightErr_PID);
 8003122:	4845      	ldr	r0, [pc, #276]	; (8003238 <LeftMotor+0xfa0>)
 8003124:	f000 ffc4 	bl	80040b0 <PID_Compute>
                if(Buffer[0] == 'F')
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <LeftMotor+0xf80>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b46      	cmp	r3, #70	; 0x46
 800312e:	f040 808d 	bne.w	800324c <LeftMotor+0xfb4>
                {
                    // Change pwm ratio for both motors to correct if heading deviates from straight line
                    htim1.Instance ->CCR4 = 148.4 + (target_angle - current_angle) * 2.2;
 8003132:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <LeftMotor+0xf9c>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f8a4 	bl	8000288 <__aeabi_dsub>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	a32f      	add	r3, pc, #188	; (adr r3, 8003208 <LeftMotor+0xf70>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd fa53 	bl	80005f8 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	a32d      	add	r3, pc, #180	; (adr r3, 8003210 <LeftMotor+0xf78>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f7fd f894 	bl	800028c <__adddf3>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4936      	ldr	r1, [pc, #216]	; (8003244 <LeftMotor+0xfac>)
 800316a:	680e      	ldr	r6, [r1, #0]
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f7fd fd04 	bl	8000b7c <__aeabi_d2uiz>
 8003174:	4603      	mov	r3, r0
 8003176:	6433      	str	r3, [r6, #64]	; 0x40
                    left_pwm = (double)pwmVal * (1 + PID_out);
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <LeftMotor+0xfb0>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9c1 	bl	8000504 <__aeabi_ui2d>
 8003182:	4680      	mov	r8, r0
 8003184:	4689      	mov	r9, r1
 8003186:	4b26      	ldr	r3, [pc, #152]	; (8003220 <LeftMotor+0xf88>)
 8003188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <LeftMotor+0xf98>)
 8003192:	f7fd f87b 	bl	800028c <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4640      	mov	r0, r8
 800319c:	4649      	mov	r1, r9
 800319e:	f7fd fa2b 	bl	80005f8 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
                    right_pwm = (double)pwmVal * (1 - PID_out);
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <LeftMotor+0xfb0>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f9a8 	bl	8000504 <__aeabi_ui2d>
 80031b4:	4680      	mov	r8, r0
 80031b6:	4689      	mov	r9, r1
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <LeftMotor+0xf88>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	491b      	ldr	r1, [pc, #108]	; (8003230 <LeftMotor+0xf98>)
 80031c4:	f7fd f860 	bl	8000288 <__aeabi_dsub>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4640      	mov	r0, r8
 80031ce:	4649      	mov	r1, r9
 80031d0:	f7fd fa12 	bl	80005f8 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80031dc:	e08f      	b.n	80032fe <LeftMotor+0x1066>
 80031de:	bf00      	nop
 80031e0:	c28f5c29 	.word	0xc28f5c29
 80031e4:	3ff028f5 	.word	0x3ff028f5
	...
 80031f0:	47ae147b 	.word	0x47ae147b
 80031f4:	3f947ae1 	.word	0x3f947ae1
 80031f8:	020c49ba 	.word	0x020c49ba
 80031fc:	3f86872b 	.word	0x3f86872b
 8003200:	9999999a 	.word	0x9999999a
 8003204:	3fa99999 	.word	0x3fa99999
 8003208:	9999999a 	.word	0x9999999a
 800320c:	40019999 	.word	0x40019999
 8003210:	cccccccd 	.word	0xcccccccd
 8003214:	40628ccc 	.word	0x40628ccc
 8003218:	20000354 	.word	0x20000354
 800321c:	40020000 	.word	0x40020000
 8003220:	20000520 	.word	0x20000520
 8003224:	20000378 	.word	0x20000378
 8003228:	20000418 	.word	0x20000418
 800322c:	20000018 	.word	0x20000018
 8003230:	3ff00000 	.word	0x3ff00000
 8003234:	20000360 	.word	0x20000360
 8003238:	20000488 	.word	0x20000488
 800323c:	20000028 	.word	0x20000028
 8003240:	20000254 	.word	0x20000254
 8003244:	20000134 	.word	0x20000134
 8003248:	20000010 	.word	0x20000010
                    //          __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1+PID_out));
                    //          __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1-PID_out));
                }
                else if(Buffer[0] == 'B')
 800324c:	4bb8      	ldr	r3, [pc, #736]	; (8003530 <LeftMotor+0x1298>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b42      	cmp	r3, #66	; 0x42
 8003252:	d154      	bne.n	80032fe <LeftMotor+0x1066>
                {
                    // Change pwm ratio for both motors to correct if heading deviates from straight line
                    htim1.Instance ->CCR4 = 148.4 + (current_angle - target_angle) * 2.2;
 8003254:	4bb7      	ldr	r3, [pc, #732]	; (8003534 <LeftMotor+0x129c>)
 8003256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800325a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325e:	f7fd f813 	bl	8000288 <__aeabi_dsub>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	a3ab      	add	r3, pc, #684	; (adr r3, 8003518 <LeftMotor+0x1280>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f7fd f9c2 	bl	80005f8 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003520 <LeftMotor+0x1288>)
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f7fd f803 	bl	800028c <__adddf3>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	49ab      	ldr	r1, [pc, #684]	; (8003538 <LeftMotor+0x12a0>)
 800328c:	680e      	ldr	r6, [r1, #0]
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7fd fc73 	bl	8000b7c <__aeabi_d2uiz>
 8003296:	4603      	mov	r3, r0
 8003298:	6433      	str	r3, [r6, #64]	; 0x40
                    left_pwm = (double)pwmVal * (1 - PID_out);
 800329a:	4ba8      	ldr	r3, [pc, #672]	; (800353c <LeftMotor+0x12a4>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f930 	bl	8000504 <__aeabi_ui2d>
 80032a4:	4680      	mov	r8, r0
 80032a6:	4689      	mov	r9, r1
 80032a8:	4ba5      	ldr	r3, [pc, #660]	; (8003540 <LeftMotor+0x12a8>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	49a4      	ldr	r1, [pc, #656]	; (8003544 <LeftMotor+0x12ac>)
 80032b4:	f7fc ffe8 	bl	8000288 <__aeabi_dsub>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4640      	mov	r0, r8
 80032be:	4649      	mov	r1, r9
 80032c0:	f7fd f99a 	bl	80005f8 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
                    right_pwm = (double)pwmVal * (1 + PID_out);
 80032cc:	4b9b      	ldr	r3, [pc, #620]	; (800353c <LeftMotor+0x12a4>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f917 	bl	8000504 <__aeabi_ui2d>
 80032d6:	4680      	mov	r8, r0
 80032d8:	4689      	mov	r9, r1
 80032da:	4b99      	ldr	r3, [pc, #612]	; (8003540 <LeftMotor+0x12a8>)
 80032dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	4b97      	ldr	r3, [pc, #604]	; (8003544 <LeftMotor+0x12ac>)
 80032e6:	f7fc ffd1 	bl	800028c <__adddf3>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f7fd f981 	bl	80005f8 <__aeabi_dmul>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
                    //          __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1-PID_out));
                    //          __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1+PID_out));
                }

                taskENTER_CRITICAL();
 80032fe:	f009 fa51 	bl	800c7a4 <vPortEnterCritical>
                if(PID_dist < 0)
 8003302:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f7fd fbe5 	bl	8000adc <__aeabi_dcmplt>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8125 	beq.w	8003564 <LeftMotor+0x12cc>
                {
                    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800331a:	2200      	movs	r2, #0
 800331c:	2108      	movs	r1, #8
 800331e:	488a      	ldr	r0, [pc, #552]	; (8003548 <LeftMotor+0x12b0>)
 8003320:	f002 fbd2 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003324:	2201      	movs	r2, #1
 8003326:	2104      	movs	r1, #4
 8003328:	4887      	ldr	r0, [pc, #540]	; (8003548 <LeftMotor+0x12b0>)
 800332a:	f002 fbcd 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2110      	movs	r1, #16
 8003332:	4885      	ldr	r0, [pc, #532]	; (8003548 <LeftMotor+0x12b0>)
 8003334:	f002 fbc8 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8003338:	2201      	movs	r2, #1
 800333a:	2120      	movs	r1, #32
 800333c:	4882      	ldr	r0, [pc, #520]	; (8003548 <LeftMotor+0x12b0>)
 800333e:	f002 fbc3 	bl	8005ac8 <HAL_GPIO_WritePin>

                    if(2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) < 10)
 8003342:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8dc 	bl	8000504 <__aeabi_ui2d>
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <LeftMotor+0x12b4>)
 8003352:	f7fc ff99 	bl	8000288 <__aeabi_dsub>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	f7fc ff93 	bl	800028c <__adddf3>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4690      	mov	r8, r2
 800336c:	4699      	mov	r9, r3
 800336e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <LeftMotor+0x12b8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fc ff86 	bl	8000288 <__aeabi_dsub>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4640      	mov	r0, r8
 8003382:	4649      	mov	r1, r9
 8003384:	f7fd f938 	bl	80005f8 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <LeftMotor+0x12bc>)
 8003396:	f7fd fba1 	bl	8000adc <__aeabi_dcmplt>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d034      	beq.n	800340a <LeftMotor+0x1172>
					{
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * min_pwm_ratio * 0.6);
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <LeftMotor+0x12c0>)
 80033a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80033aa:	f7fd f925 	bl	80005f8 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	a35c      	add	r3, pc, #368	; (adr r3, 8003528 <LeftMotor+0x1290>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd f91c 	bl	80005f8 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4965      	ldr	r1, [pc, #404]	; (800355c <LeftMotor+0x12c4>)
 80033c6:	680e      	ldr	r6, [r1, #0]
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7fd fbd6 	bl	8000b7c <__aeabi_d2uiz>
 80033d0:	4603      	mov	r3, r0
 80033d2:	6373      	str	r3, [r6, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * min_pwm_ratio * 0.6);
 80033d4:	4b60      	ldr	r3, [pc, #384]	; (8003558 <LeftMotor+0x12c0>)
 80033d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80033de:	f7fd f90b 	bl	80005f8 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	a34f      	add	r3, pc, #316	; (adr r3, 8003528 <LeftMotor+0x1290>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f7fd f902 	bl	80005f8 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4958      	ldr	r1, [pc, #352]	; (800355c <LeftMotor+0x12c4>)
 80033fa:	680e      	ldr	r6, [r1, #0]
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fbbc 	bl	8000b7c <__aeabi_d2uiz>
 8003404:	4603      	mov	r3, r0
 8003406:	63b3      	str	r3, [r6, #56]	; 0x38
 8003408:	e1a8      	b.n	800375c <LeftMotor+0x14c4>
					}
                    else if(2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) < 23)
 800340a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f878 	bl	8000504 <__aeabi_ui2d>
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <LeftMotor+0x12b4>)
 800341a:	f7fc ff35 	bl	8000288 <__aeabi_dsub>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	f7fc ff2f 	bl	800028c <__adddf3>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <LeftMotor+0x12b8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fc ff22 	bl	8000288 <__aeabi_dsub>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4640      	mov	r0, r8
 800344a:	4649      	mov	r1, r9
 800344c:	f7fd f8d4 	bl	80005f8 <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <LeftMotor+0x12c8>)
 800345e:	f7fd fb3d 	bl	8000adc <__aeabi_dcmplt>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d022      	beq.n	80034ae <LeftMotor+0x1216>
                    {
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * min_pwm_ratio);
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <LeftMotor+0x12c0>)
 800346a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003472:	f7fd f8c1 	bl	80005f8 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4938      	ldr	r1, [pc, #224]	; (800355c <LeftMotor+0x12c4>)
 800347c:	680e      	ldr	r6, [r1, #0]
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f7fd fb7b 	bl	8000b7c <__aeabi_d2uiz>
 8003486:	4603      	mov	r3, r0
 8003488:	6373      	str	r3, [r6, #52]	; 0x34
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * min_pwm_ratio);
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <LeftMotor+0x12c0>)
 800348c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003494:	f7fd f8b0 	bl	80005f8 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	492f      	ldr	r1, [pc, #188]	; (800355c <LeftMotor+0x12c4>)
 800349e:	680e      	ldr	r6, [r1, #0]
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb6a 	bl	8000b7c <__aeabi_d2uiz>
 80034a8:	4603      	mov	r3, r0
 80034aa:	63b3      	str	r3, [r6, #56]	; 0x38
 80034ac:	e156      	b.n	800375c <LeftMotor+0x14c4>
                    }
                    else
                    {
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * (min_pwm_ratio - PID_dist));
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <LeftMotor+0x12c0>)
 80034b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034b8:	f7fc fee6 	bl	8000288 <__aeabi_dsub>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80034c8:	f7fd f896 	bl	80005f8 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4922      	ldr	r1, [pc, #136]	; (800355c <LeftMotor+0x12c4>)
 80034d2:	680e      	ldr	r6, [r1, #0]
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd fb50 	bl	8000b7c <__aeabi_d2uiz>
 80034dc:	4603      	mov	r3, r0
 80034de:	6373      	str	r3, [r6, #52]	; 0x34
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * (min_pwm_ratio - PID_dist));
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <LeftMotor+0x12c0>)
 80034e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ea:	f7fc fecd 	bl	8000288 <__aeabi_dsub>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80034fa:	f7fd f87d 	bl	80005f8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4916      	ldr	r1, [pc, #88]	; (800355c <LeftMotor+0x12c4>)
 8003504:	680e      	ldr	r6, [r1, #0]
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fb37 	bl	8000b7c <__aeabi_d2uiz>
 800350e:	4603      	mov	r3, r0
 8003510:	63b3      	str	r3, [r6, #56]	; 0x38
 8003512:	e123      	b.n	800375c <LeftMotor+0x14c4>
 8003514:	f3af 8000 	nop.w
 8003518:	9999999a 	.word	0x9999999a
 800351c:	40019999 	.word	0x40019999
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	40628ccc 	.word	0x40628ccc
 8003528:	33333333 	.word	0x33333333
 800352c:	3fe33333 	.word	0x3fe33333
 8003530:	20000354 	.word	0x20000354
 8003534:	20000360 	.word	0x20000360
 8003538:	20000134 	.word	0x20000134
 800353c:	20000010 	.word	0x20000010
 8003540:	20000520 	.word	0x20000520
 8003544:	3ff00000 	.word	0x3ff00000
 8003548:	40020000 	.word	0x40020000
 800354c:	3fe00000 	.word	0x3fe00000
 8003550:	20000378 	.word	0x20000378
 8003554:	40240000 	.word	0x40240000
 8003558:	20000018 	.word	0x20000018
 800355c:	20000254 	.word	0x20000254
 8003560:	40370000 	.word	0x40370000
                    }

                }
                else
                {
                    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003564:	2200      	movs	r2, #0
 8003566:	2104      	movs	r1, #4
 8003568:	48a9      	ldr	r0, [pc, #676]	; (8003810 <LeftMotor+0x1578>)
 800356a:	f002 faad 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800356e:	2201      	movs	r2, #1
 8003570:	2108      	movs	r1, #8
 8003572:	48a7      	ldr	r0, [pc, #668]	; (8003810 <LeftMotor+0x1578>)
 8003574:	f002 faa8 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8003578:	2200      	movs	r2, #0
 800357a:	2120      	movs	r1, #32
 800357c:	48a4      	ldr	r0, [pc, #656]	; (8003810 <LeftMotor+0x1578>)
 800357e:	f002 faa3 	bl	8005ac8 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8003582:	2201      	movs	r2, #1
 8003584:	2110      	movs	r1, #16
 8003586:	48a2      	ldr	r0, [pc, #648]	; (8003810 <LeftMotor+0x1578>)
 8003588:	f002 fa9e 	bl	8005ac8 <HAL_GPIO_WritePin>

                    if(2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) < 10)
 800358c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffb7 	bl	8000504 <__aeabi_ui2d>
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4b9e      	ldr	r3, [pc, #632]	; (8003814 <LeftMotor+0x157c>)
 800359c:	f7fc fe74 	bl	8000288 <__aeabi_dsub>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	f7fc fe6e 	bl	800028c <__adddf3>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4690      	mov	r8, r2
 80035b6:	4699      	mov	r9, r3
 80035b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035bc:	4b96      	ldr	r3, [pc, #600]	; (8003818 <LeftMotor+0x1580>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc fe61 	bl	8000288 <__aeabi_dsub>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4640      	mov	r0, r8
 80035cc:	4649      	mov	r1, r9
 80035ce:	f7fd f813 	bl	80005f8 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	4b8f      	ldr	r3, [pc, #572]	; (800381c <LeftMotor+0x1584>)
 80035e0:	f7fd fa7c 	bl	8000adc <__aeabi_dcmplt>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d034      	beq.n	8003654 <LeftMotor+0x13bc>
					{
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * min_pwm_ratio * 0.6);
 80035ea:	4b8d      	ldr	r3, [pc, #564]	; (8003820 <LeftMotor+0x1588>)
 80035ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80035f4:	f7fd f800 	bl	80005f8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	a381      	add	r3, pc, #516	; (adr r3, 8003808 <LeftMotor+0x1570>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fff7 	bl	80005f8 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4985      	ldr	r1, [pc, #532]	; (8003824 <LeftMotor+0x158c>)
 8003610:	680e      	ldr	r6, [r1, #0]
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fab1 	bl	8000b7c <__aeabi_d2uiz>
 800361a:	4603      	mov	r3, r0
 800361c:	6373      	str	r3, [r6, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * min_pwm_ratio * 0.6);
 800361e:	4b80      	ldr	r3, [pc, #512]	; (8003820 <LeftMotor+0x1588>)
 8003620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003624:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003628:	f7fc ffe6 	bl	80005f8 <__aeabi_dmul>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	a374      	add	r3, pc, #464	; (adr r3, 8003808 <LeftMotor+0x1570>)
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f7fc ffdd 	bl	80005f8 <__aeabi_dmul>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4978      	ldr	r1, [pc, #480]	; (8003824 <LeftMotor+0x158c>)
 8003644:	680e      	ldr	r6, [r1, #0]
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd fa97 	bl	8000b7c <__aeabi_d2uiz>
 800364e:	4603      	mov	r3, r0
 8003650:	63b3      	str	r3, [r6, #56]	; 0x38
 8003652:	e083      	b.n	800375c <LeftMotor+0x14c4>
					}
                    else if(2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) < 23)
 8003654:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff53 	bl	8000504 <__aeabi_ui2d>
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <LeftMotor+0x157c>)
 8003664:	f7fc fe10 	bl	8000288 <__aeabi_dsub>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	f7fc fe0a 	bl	800028c <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4690      	mov	r8, r2
 800367e:	4699      	mov	r9, r3
 8003680:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <LeftMotor+0x1580>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fc fdfd 	bl	8000288 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc ffaf 	bl	80005f8 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	4b60      	ldr	r3, [pc, #384]	; (8003828 <LeftMotor+0x1590>)
 80036a8:	f7fd fa18 	bl	8000adc <__aeabi_dcmplt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d022      	beq.n	80036f8 <LeftMotor+0x1460>
                    {
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * min_pwm_ratio);
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <LeftMotor+0x1588>)
 80036b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80036bc:	f7fc ff9c 	bl	80005f8 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4957      	ldr	r1, [pc, #348]	; (8003824 <LeftMotor+0x158c>)
 80036c6:	680e      	ldr	r6, [r1, #0]
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7fd fa56 	bl	8000b7c <__aeabi_d2uiz>
 80036d0:	4603      	mov	r3, r0
 80036d2:	6373      	str	r3, [r6, #52]	; 0x34
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * min_pwm_ratio);
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <LeftMotor+0x1588>)
 80036d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80036de:	f7fc ff8b 	bl	80005f8 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	494f      	ldr	r1, [pc, #316]	; (8003824 <LeftMotor+0x158c>)
 80036e8:	680e      	ldr	r6, [r1, #0]
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	f7fd fa45 	bl	8000b7c <__aeabi_d2uiz>
 80036f2:	4603      	mov	r3, r0
 80036f4:	63b3      	str	r3, [r6, #56]	; 0x38
 80036f6:	e031      	b.n	800375c <LeftMotor+0x14c4>
                    }
                    else
                    {
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left_pwm * (min_pwm_ratio + PID_dist));
 80036f8:	4b49      	ldr	r3, [pc, #292]	; (8003820 <LeftMotor+0x1588>)
 80036fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	f7fc fdc3 	bl	800028c <__adddf3>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003712:	f7fc ff71 	bl	80005f8 <__aeabi_dmul>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4942      	ldr	r1, [pc, #264]	; (8003824 <LeftMotor+0x158c>)
 800371c:	680e      	ldr	r6, [r1, #0]
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f7fd fa2b 	bl	8000b7c <__aeabi_d2uiz>
 8003726:	4603      	mov	r3, r0
 8003728:	6373      	str	r3, [r6, #52]	; 0x34
                        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right_pwm * (min_pwm_ratio + PID_dist));
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <LeftMotor+0x1588>)
 800372c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003730:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003734:	f7fc fdaa 	bl	800028c <__adddf3>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003744:	f7fc ff58 	bl	80005f8 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4935      	ldr	r1, [pc, #212]	; (8003824 <LeftMotor+0x158c>)
 800374e:	680e      	ldr	r6, [r1, #0]
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd fa12 	bl	8000b7c <__aeabi_d2uiz>
 8003758:	4603      	mov	r3, r0
 800375a:	63b3      	str	r3, [r6, #56]	; 0x38
                    }
                }
                taskEXIT_CRITICAL();
 800375c:	f009 f852 	bl	800c804 <vPortExitCritical>
                osDelayUntil(pdMS_TO_TICKS(10));
 8003760:	200a      	movs	r0, #10
 8003762:	f006 fe2a 	bl	800a3ba <osDelayUntil>
            while((2 * ((double)target_is_before - 0.5f) * (target_dist - travel_dist) > 0))
 8003766:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc feca 	bl	8000504 <__aeabi_ui2d>
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <LeftMotor+0x157c>)
 8003776:	f7fc fd87 	bl	8000288 <__aeabi_dsub>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	f7fc fd81 	bl	800028c <__adddf3>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4690      	mov	r8, r2
 8003790:	4699      	mov	r9, r3
 8003792:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <LeftMotor+0x1580>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc fd74 	bl	8000288 <__aeabi_dsub>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4640      	mov	r0, r8
 80037a6:	4649      	mov	r1, r9
 80037a8:	f7fc ff26 	bl	80005f8 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f7fd f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f47f acaa 	bne.w	800311c <LeftMotor+0xe84>
        ////        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_S*0.5);
        ////        __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*0.5);
        ////        HAL_Delay(1);
        ////      }
        //    }
        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);   // Sets both wheel to 0 speed
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <LeftMotor+0x158c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <LeftMotor+0x158c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
        Buffer[0] = 'd';
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <LeftMotor+0x1594>)
 80037da:	2264      	movs	r2, #100	; 0x64
 80037dc:	701a      	strb	r2, [r3, #0]
        Buffer[1] = 'd';
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <LeftMotor+0x1594>)
 80037e0:	2264      	movs	r2, #100	; 0x64
 80037e2:	705a      	strb	r2, [r3, #1]
        Buffer[2] = 'd';
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <LeftMotor+0x1594>)
 80037e6:	2264      	movs	r2, #100	; 0x64
 80037e8:	709a      	strb	r2, [r3, #2]
        Buffer[3] = 'd';
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <LeftMotor+0x1594>)
 80037ec:	2264      	movs	r2, #100	; 0x64
 80037ee:	70da      	strb	r2, [r3, #3]
        Buffer[4] = 'd';    // Sets start of instruction buffer to invalid command so the stm doesn't repeat itself
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <LeftMotor+0x1594>)
 80037f2:	2264      	movs	r2, #100	; 0x64
 80037f4:	711a      	strb	r2, [r3, #4]
        HAL_UART_Transmit(&huart3, "R", sizeof("R"), HAL_MAX_DELAY);  // Sends ready signal to RPi
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	2202      	movs	r2, #2
 80037fc:	490c      	ldr	r1, [pc, #48]	; (8003830 <LeftMotor+0x1598>)
 80037fe:	480d      	ldr	r0, [pc, #52]	; (8003834 <LeftMotor+0x159c>)
 8003800:	f005 faf5 	bl	8008dee <HAL_UART_Transmit>
    for(;;)
 8003804:	f7fe bd9f 	b.w	8002346 <LeftMotor+0xae>
 8003808:	33333333 	.word	0x33333333
 800380c:	3fe33333 	.word	0x3fe33333
 8003810:	40020000 	.word	0x40020000
 8003814:	3fe00000 	.word	0x3fe00000
 8003818:	20000378 	.word	0x20000378
 800381c:	40240000 	.word	0x40240000
 8003820:	20000018 	.word	0x20000018
 8003824:	20000254 	.word	0x20000254
 8003828:	40370000 	.word	0x40370000
 800382c:	20000354 	.word	0x20000354
 8003830:	0800d830 	.word	0x0800d830
 8003834:	2000029c 	.word	0x2000029c

08003838 <GyroFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroFunc */
void GyroFunc(void *argument)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN GyroFunc */
    uint8_t *status = IMU_Initialise(&imu, &hi2c1, &huart3);  // Initialize gyro
 8003840:	4a9d      	ldr	r2, [pc, #628]	; (8003ab8 <GyroFunc+0x280>)
 8003842:	499e      	ldr	r1, [pc, #632]	; (8003abc <GyroFunc+0x284>)
 8003844:	489e      	ldr	r0, [pc, #632]	; (8003ac0 <GyroFunc+0x288>)
 8003846:	f7fd fb87 	bl	8000f58 <IMU_Initialise>
 800384a:	62b8      	str	r0, [r7, #40]	; 0x28
    uint8_t dispBuff[20];

    // Calibrate gyroscope
    taskENTER_CRITICAL();
 800384c:	f008 ffaa 	bl	800c7a4 <vPortEnterCritical>
    sprintf(dispBuff, "Calibr Gyro.."); // Prints current heading angle (x1000)
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	499b      	ldr	r1, [pc, #620]	; (8003ac4 <GyroFunc+0x28c>)
 8003856:	4618      	mov	r0, r3
 8003858:	f009 fab0 	bl	800cdbc <siprintf>
    OLED_ShowString(10, 30, dispBuff);
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	461a      	mov	r2, r3
 8003862:	211e      	movs	r1, #30
 8003864:	200a      	movs	r0, #10
 8003866:	f000 fadf 	bl	8003e28 <OLED_ShowString>
    //  OLED_Refresh_Gram();
    osDelay(2000);
 800386a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800386e:	f006 fd89 	bl	800a384 <osDelay>
    Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21)); // Sample gyro data every 21ms for 1024 samples and use as offset
 8003872:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8003aa8 <GyroFunc+0x270>
 8003876:	4892      	ldr	r0, [pc, #584]	; (8003ac0 <GyroFunc+0x288>)
 8003878:	f7fd fee0 	bl	800163c <Gyro_calibrateHeading>
    osDelay(2000);
 800387c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003880:	f006 fd80 	bl	800a384 <osDelay>
    taskEXIT_CRITICAL();
 8003884:	f008 ffbe 	bl	800c804 <vPortExitCritical>
    is_calibrated = 1;  // Set finish calibration flag to start running other task
 8003888:	4b8f      	ldr	r3, [pc, #572]	; (8003ac8 <GyroFunc+0x290>)
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
    char sbuf[10];

    int32_t encoder_prev = -1, encoder_cur = -1, dif = 0;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800389e:	213c      	movs	r1, #60	; 0x3c
 80038a0:	488a      	ldr	r0, [pc, #552]	; (8003acc <GyroFunc+0x294>)
 80038a2:	f004 f913 	bl	8007acc <HAL_TIM_Encoder_Start>

    /* Infinite loop */
    for(;;)
    {
        // Read gyro value
        taskENTER_CRITICAL();
 80038a6:	f008 ff7d 	bl	800c7a4 <vPortEnterCritical>
        IMU_GyroReadHeading(&imu);
 80038aa:	4885      	ldr	r0, [pc, #532]	; (8003ac0 <GyroFunc+0x288>)
 80038ac:	f7fd fd70 	bl	8001390 <IMU_GyroReadHeading>
        taskEXIT_CRITICAL();
 80038b0:	f008 ffa8 	bl	800c804 <vPortExitCritical>

        // Update heading values
        current_gyro = current_gyro + imu.gyro[2];    // Manual gyro offset
 80038b4:	4b82      	ldr	r3, [pc, #520]	; (8003ac0 <GyroFunc+0x288>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe45 	bl	8000548 <__aeabi_f2d>
 80038be:	4b84      	ldr	r3, [pc, #528]	; (8003ad0 <GyroFunc+0x298>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f7fc fce2 	bl	800028c <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4980      	ldr	r1, [pc, #512]	; (8003ad0 <GyroFunc+0x298>)
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
        current_angle = current_gyro * 1.0f;    // Increase if robot turns too much
 80038d2:	4b7f      	ldr	r3, [pc, #508]	; (8003ad0 <GyroFunc+0x298>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	497e      	ldr	r1, [pc, #504]	; (8003ad4 <GyroFunc+0x29c>)
 80038da:	e9c1 2300 	strd	r2, r3, [r1]

        // Check if it's the first time running
        if(encoder_prev == -1 || encoder_cur == -1)
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d003      	beq.n	80038ee <GyroFunc+0xb6>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d106      	bne.n	80038fc <GyroFunc+0xc4>
        {
            encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 80038ee:	4b77      	ldr	r3, [pc, #476]	; (8003acc <GyroFunc+0x294>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
            encoder_prev = encoder_cur;
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
 80038fa:	e033      	b.n	8003964 <GyroFunc+0x12c>
        }
        else
        {
            encoder_prev = encoder_cur;
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
            encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 8003900:	4b72      	ldr	r3, [pc, #456]	; (8003acc <GyroFunc+0x294>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
            // Deal with the encoder value wrapping around at 65535
            if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8003908:	4b70      	ldr	r3, [pc, #448]	; (8003acc <GyroFunc+0x294>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d110      	bne.n	8003938 <GyroFunc+0x100>
            {
                if(encoder_cur <= encoder_prev)
 8003916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	429a      	cmp	r2, r3
 800391c:	dc04      	bgt.n	8003928 <GyroFunc+0xf0>
                {
                    dif = encoder_prev - encoder_cur;
 800391e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003926:	e017      	b.n	8003958 <GyroFunc+0x120>
                }
                else
                {
                    dif = encoder_prev + (65535 - encoder_cur);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800392e:	33ff      	adds	r3, #255	; 0xff
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	4413      	add	r3, r2
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	e00f      	b.n	8003958 <GyroFunc+0x120>
                }
            }
            else
            {
                if(encoder_cur >= encoder_prev)
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	429a      	cmp	r2, r3
 800393e:	db04      	blt.n	800394a <GyroFunc+0x112>
                {
                    dif = encoder_prev - encoder_cur;
 8003940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003948:	e006      	b.n	8003958 <GyroFunc+0x120>
                }
                else
                {
                    dif = encoder_prev - (65535 + encoder_cur);
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003950:	33ff      	adds	r3, #255	; 0xff
 8003952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }
            encoder_position = encoder_position + dif;
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <GyroFunc+0x2a0>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	4413      	add	r3, r2
 8003960:	4a5d      	ldr	r2, [pc, #372]	; (8003ad8 <GyroFunc+0x2a0>)
 8003962:	6013      	str	r3, [r2, #0]
        }
        //    travel_dist = (double)encoder_position * 0.01310615989;   // Edit constant to calibrate straight line distance
        travel_dist = (double)encoder_position * 0.01308996939;
 8003964:	4b5c      	ldr	r3, [pc, #368]	; (8003ad8 <GyroFunc+0x2a0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fddb 	bl	8000524 <__aeabi_i2d>
 800396e:	a350      	add	r3, pc, #320	; (adr r3, 8003ab0 <GyroFunc+0x278>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f7fc fe40 	bl	80005f8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4957      	ldr	r1, [pc, #348]	; (8003adc <GyroFunc+0x2a4>)
 800397e:	e9c1 2300 	strd	r2, r3, [r1]
        sprintf(dispBuff, "%5d        ", (int)current_angle * 1000);  // Prints current heading angle (x1000)
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <GyroFunc+0x29c>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	f7fd f8ce 	bl	8000b2c <__aeabi_d2iz>
 8003990:	4603      	mov	r3, r0
 8003992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003996:	fb03 f202 	mul.w	r2, r3, r2
 800399a:	f107 0314 	add.w	r3, r7, #20
 800399e:	4950      	ldr	r1, [pc, #320]	; (8003ae0 <GyroFunc+0x2a8>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f009 fa0b 	bl	800cdbc <siprintf>
        OLED_ShowString(10, 30, dispBuff);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	461a      	mov	r2, r3
 80039ac:	211e      	movs	r1, #30
 80039ae:	200a      	movs	r0, #10
 80039b0:	f000 fa3a 	bl	8003e28 <OLED_ShowString>

        if(!HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin))
 80039b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039b8:	484a      	ldr	r0, [pc, #296]	; (8003ae4 <GyroFunc+0x2ac>)
 80039ba:	f002 f86d 	bl	8005a98 <HAL_GPIO_ReadPin>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d140      	bne.n	8003a46 <GyroFunc+0x20e>
        {
            encoder_position = 0;
 80039c4:	4b44      	ldr	r3, [pc, #272]	; (8003ad8 <GyroFunc+0x2a0>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
            travel_dist = 0;
 80039ca:	4944      	ldr	r1, [pc, #272]	; (8003adc <GyroFunc+0x2a4>)
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9c1 2300 	strd	r2, r3, [r1]
            encoder_prev = -1;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
            encoder_cur = -1;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
            dif = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            current_gyro = 0;
 80039e8:	4939      	ldr	r1, [pc, #228]	; (8003ad0 <GyroFunc+0x298>)
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9c1 2300 	strd	r2, r3, [r1]
            current_angle = 0;
 80039f6:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <GyroFunc+0x29c>)
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9c1 2300 	strd	r2, r3, [r1]
            t_heading = 0;
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <GyroFunc+0x2b0>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
            taskENTER_CRITICAL();
 8003a0a:	f008 fecb 	bl	800c7a4 <vPortEnterCritical>
            sprintf(dispBuff, "Calibr Gyro.."); // Prints current heading angle (x1000)
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	492c      	ldr	r1, [pc, #176]	; (8003ac4 <GyroFunc+0x28c>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f009 f9d1 	bl	800cdbc <siprintf>
            OLED_ShowString(10, 30, dispBuff);
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	461a      	mov	r2, r3
 8003a20:	211e      	movs	r1, #30
 8003a22:	200a      	movs	r0, #10
 8003a24:	f000 fa00 	bl	8003e28 <OLED_ShowString>
            osDelay(2000);
 8003a28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a2c:	f006 fcaa 	bl	800a384 <osDelay>
            Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21)); // Sample gyro data every 21ms for 1024 samples and use as offset
 8003a30:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8003aa8 <GyroFunc+0x270>
 8003a34:	4822      	ldr	r0, [pc, #136]	; (8003ac0 <GyroFunc+0x288>)
 8003a36:	f7fd fe01 	bl	800163c <Gyro_calibrateHeading>
            osDelay(2000);
 8003a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a3e:	f006 fca1 	bl	800a384 <osDelay>
            taskEXIT_CRITICAL();
 8003a42:	f008 fedf 	bl	800c804 <vPortExitCritical>
        //      sprintf(sbuf, "%7d ", (int)(encoder_position));
        //      HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
        //      sprintf(sbuf, "%7d ", (int)(encoder_cur));
        //      HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);

            sprintf(sbuf, "%7d ", (int)(current_angle*100));
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <GyroFunc+0x29c>)
 8003a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <GyroFunc+0x2b4>)
 8003a52:	f7fc fdd1 	bl	80005f8 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f865 	bl	8000b2c <__aeabi_d2iz>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	4921      	ldr	r1, [pc, #132]	; (8003af0 <GyroFunc+0x2b8>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f009 f9a6 	bl	800cdbc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
 8003a70:	f107 0108 	add.w	r1, r7, #8
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	2208      	movs	r2, #8
 8003a7a:	480f      	ldr	r0, [pc, #60]	; (8003ab8 <GyroFunc+0x280>)
 8003a7c:	f005 f9b7 	bl	8008dee <HAL_UART_Transmit>
        //    sprintf(sbuf, "%7d ", (int)((imu.gyro[2])*1000));
        //    HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
        ////    sprintf(sbuf, "%9ul", (DWT->CYCCNT));
        ////    HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 9, HAL_MAX_DELAY);
            sprintf(sbuf, "\r\n");
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	491b      	ldr	r1, [pc, #108]	; (8003af4 <GyroFunc+0x2bc>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f009 f998 	bl	800cdbc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 2, HAL_MAX_DELAY);
 8003a8c:	f107 0108 	add.w	r1, r7, #8
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	2202      	movs	r2, #2
 8003a96:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <GyroFunc+0x280>)
 8003a98:	f005 f9a9 	bl	8008dee <HAL_UART_Transmit>

        osDelayUntil(pdMS_TO_TICKS(10));
 8003a9c:	200a      	movs	r0, #10
 8003a9e:	f006 fc8c 	bl	800a3ba <osDelayUntil>
        taskENTER_CRITICAL();
 8003aa2:	e700      	b.n	80038a6 <GyroFunc+0x6e>
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	40350000 	.word	0x40350000
 8003ab0:	f37c4b99 	.word	0xf37c4b99
 8003ab4:	3f8acee9 	.word	0x3f8acee9
 8003ab8:	2000029c 	.word	0x2000029c
 8003abc:	200000e0 	.word	0x200000e0
 8003ac0:	20000384 	.word	0x20000384
 8003ac4:	0800d834 	.word	0x0800d834
 8003ac8:	20000370 	.word	0x20000370
 8003acc:	2000017c 	.word	0x2000017c
 8003ad0:	20000368 	.word	0x20000368
 8003ad4:	20000360 	.word	0x20000360
 8003ad8:	20000380 	.word	0x20000380
 8003adc:	20000378 	.word	0x20000378
 8003ae0:	0800d844 	.word	0x0800d844
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	2000035c 	.word	0x2000035c
 8003aec:	40590000 	.word	0x40590000
 8003af0:	0800d850 	.word	0x0800d850
 8003af4:	0800d858 	.word	0x0800d858

08003af8 <sonic_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sonic_sensor */
void sonic_sensor(void *argument)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN sonic_sensor */
    uint8_t ultra_sonic_display[20];
    /* Infinite loop */
    for(;;)
    {
        HCSR04_Read();
 8003b00:	f7fd ff14 	bl	800192c <HCSR04_Read>
        sprintf(ultra_sonic_display, "Distance:%5d\0", Distance);
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <sonic_sensor+0x34>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	4908      	ldr	r1, [pc, #32]	; (8003b30 <sonic_sensor+0x38>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f009 f954 	bl	800cdbc <siprintf>
        OLED_ShowString(10, 40, ultra_sonic_display);
 8003b14:	f107 030c 	add.w	r3, r7, #12
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2128      	movs	r1, #40	; 0x28
 8003b1c:	200a      	movs	r0, #10
 8003b1e:	f000 f983 	bl	8003e28 <OLED_ShowString>
        osDelayUntil(100);
 8003b22:	2064      	movs	r0, #100	; 0x64
 8003b24:	f006 fc49 	bl	800a3ba <osDelayUntil>
        HCSR04_Read();
 8003b28:	e7ea      	b.n	8003b00 <sonic_sensor+0x8>
 8003b2a:	bf00      	nop
 8003b2c:	20000504 	.word	0x20000504
 8003b30:	0800d85c 	.word	0x0800d85c

08003b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b38:	b672      	cpsid	i
}
 8003b3a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8003b3c:	e7fe      	b.n	8003b3c <Error_Handler+0x8>
	...

08003b40 <OLED_WR_Byte>:
Output  : none

**************************************************************************/

void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	460a      	mov	r2, r1
 8003b4a:	71fb      	strb	r3, [r7, #7]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    if(DataCmd == 1) 		// Data write
 8003b50:	79bb      	ldrb	r3, [r7, #6]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <OLED_WR_Byte+0x24>
        OLED_RS_Set();		// Set the D/C# line
 8003b56:	2201      	movs	r2, #1
 8003b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b5c:	481c      	ldr	r0, [pc, #112]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003b5e:	f001 ffb3 	bl	8005ac8 <HAL_GPIO_WritePin>
 8003b62:	e005      	b.n	8003b70 <OLED_WR_Byte+0x30>
    else  					// Command write
        OLED_RS_Clr();        // Clear the D/C# line
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b6a:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003b6c:	f001 ffac 	bl	8005ac8 <HAL_GPIO_WritePin>

    for(i = 0; i < 8; i++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	e01e      	b.n	8003bb4 <OLED_WR_Byte+0x74>
    {
        OLED_SCLK_Clr();
 8003b76:	2200      	movs	r2, #0
 8003b78:	2120      	movs	r1, #32
 8003b7a:	4815      	ldr	r0, [pc, #84]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003b7c:	f001 ffa4 	bl	8005ac8 <HAL_GPIO_WritePin>
        if(dat & 0x80)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da05      	bge.n	8003b94 <OLED_WR_Byte+0x54>
            OLED_SDIN_Set();
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	4810      	ldr	r0, [pc, #64]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003b8e:	f001 ff9b 	bl	8005ac8 <HAL_GPIO_WritePin>
 8003b92:	e004      	b.n	8003b9e <OLED_WR_Byte+0x5e>
        else
            OLED_SDIN_Clr();
 8003b94:	2200      	movs	r2, #0
 8003b96:	2140      	movs	r1, #64	; 0x40
 8003b98:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003b9a:	f001 ff95 	bl	8005ac8 <HAL_GPIO_WritePin>
        OLED_SCLK_Set();
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003ba4:	f001 ff90 	bl	8005ac8 <HAL_GPIO_WritePin>
        dat <<= 1;
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < 8; i++)
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b07      	cmp	r3, #7
 8003bb8:	d9dd      	bls.n	8003b76 <OLED_WR_Byte+0x36>
    }

    OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bc0:	4803      	ldr	r0, [pc, #12]	; (8003bd0 <OLED_WR_Byte+0x90>)
 8003bc2:	f001 ff81 	bl	8005ac8 <HAL_GPIO_WritePin>
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for(i = 0; i < 8; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	e026      	b.n	8003c2e <OLED_Refresh_Gram+0x5a>
    {
        OLED_WR_Byte (0xb0 + i, OLED_CMD);
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	3b50      	subs	r3, #80	; 0x50
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ffa9 	bl	8003b40 <OLED_WR_Byte>
        OLED_WR_Byte (0x00, OLED_CMD);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff ffa5 	bl	8003b40 <OLED_WR_Byte>
        OLED_WR_Byte (0x10, OLED_CMD);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2010      	movs	r0, #16
 8003bfa:	f7ff ffa1 	bl	8003b40 <OLED_WR_Byte>
        for(n = 0; n < 128; n++)OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	71bb      	strb	r3, [r7, #6]
 8003c02:	e00d      	b.n	8003c20 <OLED_Refresh_Gram+0x4c>
 8003c04:	79ba      	ldrb	r2, [r7, #6]
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	490d      	ldr	r1, [pc, #52]	; (8003c40 <OLED_Refresh_Gram+0x6c>)
 8003c0a:	00d2      	lsls	r2, r2, #3
 8003c0c:	440a      	add	r2, r1
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff93 	bl	8003b40 <OLED_WR_Byte>
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	71bb      	strb	r3, [r7, #6]
 8003c20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	daed      	bge.n	8003c04 <OLED_Refresh_Gram+0x30>
    for(i = 0; i < 8; i++)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	d9d5      	bls.n	8003be0 <OLED_Refresh_Gram+0xc>
    }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000053c 	.word	0x2000053c

08003c44 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
    uint8_t i, n;
    for(i = 0; i < 8; i++)for(n = 0; n < 128; n++)OLED_GRAM[n][i] = 0X00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	71fb      	strb	r3, [r7, #7]
 8003c4e:	e014      	b.n	8003c7a <OLED_Clear+0x36>
 8003c50:	2300      	movs	r3, #0
 8003c52:	71bb      	strb	r3, [r7, #6]
 8003c54:	e00a      	b.n	8003c6c <OLED_Clear+0x28>
 8003c56:	79ba      	ldrb	r2, [r7, #6]
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	490c      	ldr	r1, [pc, #48]	; (8003c8c <OLED_Clear+0x48>)
 8003c5c:	00d2      	lsls	r2, r2, #3
 8003c5e:	440a      	add	r2, r1
 8003c60:	4413      	add	r3, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	79bb      	ldrb	r3, [r7, #6]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	71bb      	strb	r3, [r7, #6]
 8003c6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	daf0      	bge.n	8003c56 <OLED_Clear+0x12>
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	3301      	adds	r3, #1
 8003c78:	71fb      	strb	r3, [r7, #7]
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2b07      	cmp	r3, #7
 8003c7e:	d9e7      	bls.n	8003c50 <OLED_Clear+0xc>
    OLED_Refresh_Gram();//Refresh
 8003c80:	f7ff ffa8 	bl	8003bd4 <OLED_Refresh_Gram>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	2000053c 	.word	0x2000053c

08003c90 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	71bb      	strb	r3, [r7, #6]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	717b      	strb	r3, [r7, #5]
    uint8_t pos, bx, temp = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]
    if(x > 127 || y > 63)return; //Out of reach
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db41      	blt.n	8003d32 <OLED_DrawPoint+0xa2>
 8003cae:	79bb      	ldrb	r3, [r7, #6]
 8003cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8003cb2:	d83e      	bhi.n	8003d32 <OLED_DrawPoint+0xa2>
    pos = 7 - y / 8;
 8003cb4:	79bb      	ldrb	r3, [r7, #6]
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f1c3 0307 	rsb	r3, r3, #7
 8003cbe:	73bb      	strb	r3, [r7, #14]
    bx = y % 8;
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	737b      	strb	r3, [r7, #13]
    temp = 1 << (7 - bx);
 8003cc8:	7b7b      	ldrb	r3, [r7, #13]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2201      	movs	r2, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	73fb      	strb	r3, [r7, #15]
    if(t)OLED_GRAM[x][pos] |= temp;
 8003cd6:	797b      	ldrb	r3, [r7, #5]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d012      	beq.n	8003d02 <OLED_DrawPoint+0x72>
 8003cdc:	79fa      	ldrb	r2, [r7, #7]
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	4917      	ldr	r1, [pc, #92]	; (8003d40 <OLED_DrawPoint+0xb0>)
 8003ce2:	00d2      	lsls	r2, r2, #3
 8003ce4:	440a      	add	r2, r1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	7818      	ldrb	r0, [r3, #0]
 8003cea:	79fa      	ldrb	r2, [r7, #7]
 8003cec:	7bbb      	ldrb	r3, [r7, #14]
 8003cee:	7bf9      	ldrb	r1, [r7, #15]
 8003cf0:	4301      	orrs	r1, r0
 8003cf2:	b2c8      	uxtb	r0, r1
 8003cf4:	4912      	ldr	r1, [pc, #72]	; (8003d40 <OLED_DrawPoint+0xb0>)
 8003cf6:	00d2      	lsls	r2, r2, #3
 8003cf8:	440a      	add	r2, r1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e018      	b.n	8003d34 <OLED_DrawPoint+0xa4>
    else OLED_GRAM[x][pos] &= ~temp;
 8003d02:	79fa      	ldrb	r2, [r7, #7]
 8003d04:	7bbb      	ldrb	r3, [r7, #14]
 8003d06:	490e      	ldr	r1, [pc, #56]	; (8003d40 <OLED_DrawPoint+0xb0>)
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	440a      	add	r2, r1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b259      	sxtb	r1, r3
 8003d1e:	79fa      	ldrb	r2, [r7, #7]
 8003d20:	7bbb      	ldrb	r3, [r7, #14]
 8003d22:	b2c8      	uxtb	r0, r1
 8003d24:	4906      	ldr	r1, [pc, #24]	; (8003d40 <OLED_DrawPoint+0xb0>)
 8003d26:	00d2      	lsls	r2, r2, #3
 8003d28:	440a      	add	r2, r1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e000      	b.n	8003d34 <OLED_DrawPoint+0xa4>
    if(x > 127 || y > 63)return; //Out of reach
 8003d32:	bf00      	nop
}
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000053c 	.word	0x2000053c

08003d44 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	4623      	mov	r3, r4
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	4603      	mov	r3, r0
 8003d58:	71bb      	strb	r3, [r7, #6]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	717b      	strb	r3, [r7, #5]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	713b      	strb	r3, [r7, #4]
    uint8_t temp, t, t1;
    uint8_t y0 = y;
 8003d62:	79bb      	ldrb	r3, [r7, #6]
 8003d64:	733b      	strb	r3, [r7, #12]
    chr = chr - ' ';
 8003d66:	797b      	ldrb	r3, [r7, #5]
 8003d68:	3b20      	subs	r3, #32
 8003d6a:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73bb      	strb	r3, [r7, #14]
 8003d70:	e04d      	b.n	8003e0e <OLED_ShowChar+0xca>
    {
        if(size == 12)temp = oled_asc2_1206[chr][t]; //1206 Size
 8003d72:	793b      	ldrb	r3, [r7, #4]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d10b      	bne.n	8003d90 <OLED_ShowChar+0x4c>
 8003d78:	797a      	ldrb	r2, [r7, #5]
 8003d7a:	7bb9      	ldrb	r1, [r7, #14]
 8003d7c:	4828      	ldr	r0, [pc, #160]	; (8003e20 <OLED_ShowChar+0xdc>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4403      	add	r3, r0
 8003d88:	440b      	add	r3, r1
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e007      	b.n	8003da0 <OLED_ShowChar+0x5c>
        else temp = oled_asc2_1608[chr][t];		 //1608 Size
 8003d90:	797a      	ldrb	r2, [r7, #5]
 8003d92:	7bbb      	ldrb	r3, [r7, #14]
 8003d94:	4923      	ldr	r1, [pc, #140]	; (8003e24 <OLED_ShowChar+0xe0>)
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	440a      	add	r2, r1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	73fb      	strb	r3, [r7, #15]
        for(t1 = 0; t1 < 8; t1++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	737b      	strb	r3, [r7, #13]
 8003da4:	e02d      	b.n	8003e02 <OLED_ShowChar+0xbe>
        {
            if(temp & 0x80)OLED_DrawPoint(x, y, mode);
 8003da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da07      	bge.n	8003dbe <OLED_ShowChar+0x7a>
 8003dae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003db2:	79b9      	ldrb	r1, [r7, #6]
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff6a 	bl	8003c90 <OLED_DrawPoint>
 8003dbc:	e00c      	b.n	8003dd8 <OLED_ShowChar+0x94>
            else OLED_DrawPoint(x, y, !mode);
 8003dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	79b9      	ldrb	r1, [r7, #6]
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff5c 	bl	8003c90 <OLED_DrawPoint>
            temp <<= 1;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
            y++;
 8003dde:	79bb      	ldrb	r3, [r7, #6]
 8003de0:	3301      	adds	r3, #1
 8003de2:	71bb      	strb	r3, [r7, #6]
            if((y - y0) == size)
 8003de4:	79ba      	ldrb	r2, [r7, #6]
 8003de6:	7b3b      	ldrb	r3, [r7, #12]
 8003de8:	1ad2      	subs	r2, r2, r3
 8003dea:	793b      	ldrb	r3, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d105      	bne.n	8003dfc <OLED_ShowChar+0xb8>
            {
                y = y0;
 8003df0:	7b3b      	ldrb	r3, [r7, #12]
 8003df2:	71bb      	strb	r3, [r7, #6]
                x++;
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	3301      	adds	r3, #1
 8003df8:	71fb      	strb	r3, [r7, #7]
                break;
 8003dfa:	e005      	b.n	8003e08 <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++)
 8003dfc:	7b7b      	ldrb	r3, [r7, #13]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	737b      	strb	r3, [r7, #13]
 8003e02:	7b7b      	ldrb	r3, [r7, #13]
 8003e04:	2b07      	cmp	r3, #7
 8003e06:	d9ce      	bls.n	8003da6 <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++)
 8003e08:	7bbb      	ldrb	r3, [r7, #14]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	73bb      	strb	r3, [r7, #14]
 8003e0e:	7bba      	ldrb	r2, [r7, #14]
 8003e10:	793b      	ldrb	r3, [r7, #4]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d3ad      	bcc.n	8003d72 <OLED_ShowChar+0x2e>
            }
        }
    }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	0800d938 	.word	0x0800d938
 8003e24:	0800ddac 	.word	0x0800ddac

08003e28 <OLED_ShowString>:
}
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	4603      	mov	r3, r0
 8003e30:	603a      	str	r2, [r7, #0]
 8003e32:	71fb      	strb	r3, [r7, #7]
 8003e34:	460b      	mov	r3, r1
 8003e36:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p != '\0')
 8003e38:	e01f      	b.n	8003e7a <OLED_ShowString+0x52>
    {
        if(x > MAX_CHAR_POSX)
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e3e:	d904      	bls.n	8003e4a <OLED_ShowString+0x22>
        {
            x = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	71fb      	strb	r3, [r7, #7]
            y += 16;
 8003e44:	79bb      	ldrb	r3, [r7, #6]
 8003e46:	3310      	adds	r3, #16
 8003e48:	71bb      	strb	r3, [r7, #6]
        }
        if(y > MAX_CHAR_POSY)
 8003e4a:	79bb      	ldrb	r3, [r7, #6]
 8003e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8003e4e:	d905      	bls.n	8003e5c <OLED_ShowString+0x34>
        {
            y = x = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	71bb      	strb	r3, [r7, #6]
            OLED_Clear();
 8003e58:	f7ff fef4 	bl	8003c44 <OLED_Clear>
        }
        OLED_ShowChar(x, y, *p, 12, 1);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	79b9      	ldrb	r1, [r7, #6]
 8003e62:	79f8      	ldrb	r0, [r7, #7]
 8003e64:	2301      	movs	r3, #1
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	230c      	movs	r3, #12
 8003e6a:	f7ff ff6b 	bl	8003d44 <OLED_ShowChar>
        x += 8;
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	3308      	adds	r3, #8
 8003e72:	71fb      	strb	r3, [r7, #7]
        p++;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	603b      	str	r3, [r7, #0]
    while(*p != '\0')
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1db      	bne.n	8003e3a <OLED_ShowString+0x12>
    }
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <OLED_Init>:

void OLED_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
    HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003e90:	f002 fe0e 	bl	8006ab0 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <OLED_Init+0x110>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a40      	ldr	r2, [pc, #256]	; (8003f9c <OLED_Init+0x110>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <OLED_Init+0x110>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a3d      	ldr	r2, [pc, #244]	; (8003f9c <OLED_Init+0x110>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
    //LSE oscillator switch off to let PC13 PC14 PC15 be IO


    HAL_PWR_DisableBkUpAccess();
 8003eac:	f002 fe14 	bl	8006ad8 <HAL_PWR_DisableBkUpAccess>

    OLED_RST_Clr();
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	483a      	ldr	r0, [pc, #232]	; (8003fa0 <OLED_Init+0x114>)
 8003eb6:	f001 fe07 	bl	8005ac8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003eba:	2064      	movs	r0, #100	; 0x64
 8003ebc:	f000 ff18 	bl	8004cf0 <HAL_Delay>
    OLED_RST_Set();
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	4836      	ldr	r0, [pc, #216]	; (8003fa0 <OLED_Init+0x114>)
 8003ec6:	f001 fdff 	bl	8005ac8 <HAL_GPIO_WritePin>

    OLED_WR_Byte(0xAE, OLED_CMD); //Off Display
 8003eca:	2100      	movs	r1, #0
 8003ecc:	20ae      	movs	r0, #174	; 0xae
 8003ece:	f7ff fe37 	bl	8003b40 <OLED_WR_Byte>

    OLED_WR_Byte(0xD5, OLED_CMD); //Set Oscillator Division
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	20d5      	movs	r0, #213	; 0xd5
 8003ed6:	f7ff fe33 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(80, OLED_CMD);   //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003eda:	2100      	movs	r1, #0
 8003edc:	2050      	movs	r0, #80	; 0x50
 8003ede:	f7ff fe2f 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xA8, OLED_CMD); //multiplex ratio
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	20a8      	movs	r0, #168	; 0xa8
 8003ee6:	f7ff fe2b 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0X3F, OLED_CMD); //duty = 0X3F(1/64)
 8003eea:	2100      	movs	r1, #0
 8003eec:	203f      	movs	r0, #63	; 0x3f
 8003eee:	f7ff fe27 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xD3, OLED_CMD); //set display offset
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	20d3      	movs	r0, #211	; 0xd3
 8003ef6:	f7ff fe23 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0X00, OLED_CMD); //0
 8003efa:	2100      	movs	r1, #0
 8003efc:	2000      	movs	r0, #0
 8003efe:	f7ff fe1f 	bl	8003b40 <OLED_WR_Byte>

    OLED_WR_Byte(0x40, OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003f02:	2100      	movs	r1, #0
 8003f04:	2040      	movs	r0, #64	; 0x40
 8003f06:	f7ff fe1b 	bl	8003b40 <OLED_WR_Byte>

    OLED_WR_Byte(0x8D, OLED_CMD); //Set charge pump
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	208d      	movs	r0, #141	; 0x8d
 8003f0e:	f7ff fe17 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0x14, OLED_CMD); //Enable Charge Pump
 8003f12:	2100      	movs	r1, #0
 8003f14:	2014      	movs	r0, #20
 8003f16:	f7ff fe13 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0x20, OLED_CMD); //Set Memory Addressing Mode
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2020      	movs	r0, #32
 8003f1e:	f7ff fe0f 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0x02, OLED_CMD); //Page Addressing Mode (RESET)
 8003f22:	2100      	movs	r1, #0
 8003f24:	2002      	movs	r0, #2
 8003f26:	f7ff fe0b 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xA1, OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	20a1      	movs	r0, #161	; 0xa1
 8003f2e:	f7ff fe07 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xC0, OLED_CMD); //Set COM Output Scan Direction
 8003f32:	2100      	movs	r1, #0
 8003f34:	20c0      	movs	r0, #192	; 0xc0
 8003f36:	f7ff fe03 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xDA, OLED_CMD); //Set COM Pins
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	20da      	movs	r0, #218	; 0xda
 8003f3e:	f7ff fdff 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 8003f42:	2100      	movs	r1, #0
 8003f44:	2012      	movs	r0, #18
 8003f46:	f7ff fdfb 	bl	8003b40 <OLED_WR_Byte>

    OLED_WR_Byte(0x81, OLED_CMD); //Contrast Control
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2081      	movs	r0, #129	; 0x81
 8003f4e:	f7ff fdf7 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xEF, OLED_CMD); //1~256; Default: 0X7F
 8003f52:	2100      	movs	r1, #0
 8003f54:	20ef      	movs	r0, #239	; 0xef
 8003f56:	f7ff fdf3 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xD9, OLED_CMD); //Set Pre-charge Period
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	20d9      	movs	r0, #217	; 0xd9
 8003f5e:	f7ff fdef 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003f62:	2100      	movs	r1, #0
 8003f64:	20f1      	movs	r0, #241	; 0xf1
 8003f66:	f7ff fdeb 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xDB, OLED_CMD); //Set VCOMH
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	20db      	movs	r0, #219	; 0xdb
 8003f6e:	f7ff fde7 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003f72:	2100      	movs	r1, #0
 8003f74:	2030      	movs	r0, #48	; 0x30
 8003f76:	f7ff fde3 	bl	8003b40 <OLED_WR_Byte>

    OLED_WR_Byte(0xA4, OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	20a4      	movs	r0, #164	; 0xa4
 8003f7e:	f7ff fddf 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xA6, OLED_CMD); //Set normal display
 8003f82:	2100      	movs	r1, #0
 8003f84:	20a6      	movs	r0, #166	; 0xa6
 8003f86:	f7ff fddb 	bl	8003b40 <OLED_WR_Byte>
    OLED_WR_Byte(0xAF, OLED_CMD); //DISPLAY ON
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	20af      	movs	r0, #175	; 0xaf
 8003f8e:	f7ff fdd7 	bl	8003b40 <OLED_WR_Byte>
    OLED_Clear();
 8003f92:	f7ff fe57 	bl	8003c44 <OLED_Clear>
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40021000 	.word	0x40021000

08003fa4 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    /* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
    uPID->OutputSum = *uPID->MyOutput;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    uPID->LastInput = *uPID->MyInput;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    if (uPID->OutputSum > uPID->OutMax)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003fd4:	f7fc fda0 	bl	8000b18 <__aeabi_dcmpgt>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <PID_Init+0x48>
    {
        uPID->OutputSum = uPID->OutMax;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    {
        uPID->OutputSum = uPID->OutMin;
    }
    else { }

}
 8003fea:	e011      	b.n	8004010 <PID_Init+0x6c>
    else if (uPID->OutputSum < uPID->OutMin)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003ff8:	f7fc fd70 	bl	8000adc <__aeabi_dcmplt>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d100      	bne.n	8004004 <PID_Init+0x60>
}
 8004002:	e005      	b.n	8004010 <PID_Init+0x6c>
        uPID->OutputSum = uPID->OutMin;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6278      	str	r0, [r7, #36]	; 0x24
 8004020:	6239      	str	r1, [r7, #32]
 8004022:	61fa      	str	r2, [r7, #28]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	ed87 0b04 	vstr	d0, [r7, #16]
 800402a:	ed87 1b02 	vstr	d1, [r7, #8]
 800402e:	ed87 2b00 	vstr	d2, [r7]
    /* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
    uPID->MyOutput   = Output;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
    uPID->MyInput    = Input;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    uPID->MySetpoint = Setpoint;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	649a      	str	r2, [r3, #72]	; 0x48
    uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	2200      	movs	r2, #0
 8004048:	705a      	strb	r2, [r3, #1]

    PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800404a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80040a0 <PID+0x88>
 800404e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80040a8 <PID+0x90>
 8004052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004054:	f000 f934 	bl	80042c0 <PID_SetOutputLimits>

    uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	2264      	movs	r2, #100	; 0x64
 800405c:	609a      	str	r2, [r3, #8]

    PID_SetControllerDirection(uPID, ControllerDirection);
 800405e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004062:	4619      	mov	r1, r3
 8004064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004066:	f000 fa41 	bl	80044ec <PID_SetControllerDirection>
    PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800406a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800406e:	4619      	mov	r1, r3
 8004070:	ed97 2b00 	vldr	d2, [r7]
 8004074:	ed97 1b02 	vldr	d1, [r7, #8]
 8004078:	ed97 0b04 	vldr	d0, [r7, #16]
 800407c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800407e:	f000 f98d 	bl	800439c <PID_SetTunings2>

    uPID->LastTime = GetTime() - uPID->SampleTime;
 8004082:	f000 fe29 	bl	8004cd8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	605a      	str	r2, [r3, #4]

}
 8004092:	bf00      	nop
 8004094:	3728      	adds	r7, #40	; 0x28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w
 80040a0:	00000000 	.word	0x00000000
 80040a4:	406fe000 	.word	0x406fe000
	...

080040b0 <PID_Compute>:
    PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    double error;
    double dInput;
    double output;

    /* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
    if (!uPID->InAuto)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <PID_Compute+0x14>
    {
        return _FALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e0db      	b.n	800427c <PID_Compute+0x1cc>
    }

    /* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
    now        = GetTime();
 80040c4:	f000 fe08 	bl	8004cd8 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24
    timeChange = (now - uPID->LastTime);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	623b      	str	r3, [r7, #32]

    if (timeChange >= uPID->SampleTime)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	429a      	cmp	r2, r3
 80040dc:	f0c0 80cd 	bcc.w	800427a <PID_Compute+0x1ca>
    {
        /* ..... Compute all the working error variables ..... */
        input   = *uPID->MyInput;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        error   = *uPID->MySetpoint - input;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	f7fc f8c6 	bl	8000288 <__aeabi_dsub>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dInput  = (input - uPID->LastInput);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800410a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800410e:	f7fc f8bb 	bl	8000288 <__aeabi_dsub>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	e9c7 2302 	strd	r2, r3, [r7, #8]

        uPID->OutputSum     += (uPID->Ki * error);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004126:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800412a:	f7fc fa65 	bl	80005f8 <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc f8a9 	bl	800028c <__adddf3>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

        /* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
        if (!uPID->POnE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d114      	bne.n	8004176 <PID_Compute+0xc6>
        {
            uPID->OutputSum -= uPID->Kp * dInput;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800415c:	f7fc fa4c 	bl	80005f8 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc f88e 	bl	8000288 <__aeabi_dsub>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        }

        if (uPID->OutputSum > uPID->OutMax)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004182:	f7fc fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <PID_Compute+0xea>
        {
            uPID->OutputSum = uPID->OutMax;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004198:	e010      	b.n	80041bc <PID_Compute+0x10c>
        }
        else if (uPID->OutputSum < uPID->OutMin)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80041a6:	f7fc fc99 	bl	8000adc <__aeabi_dcmplt>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <PID_Compute+0x10c>
        {
            uPID->OutputSum = uPID->OutMin;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        }
        else { }

        /* ..... Add Proportional on Error, if P_ON_E is specified ..... */
        if (uPID->POnE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <PID_Compute+0x12c>
        {
            output = uPID->Kp * error;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80041ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041ce:	f7fc fa13 	bl	80005f8 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80041da:	e005      	b.n	80041e8 <PID_Compute+0x138>
        }
        else
        {
            output = 0;
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* ..... Compute Rest of PID Output ..... */
        output += uPID->OutputSum - uPID->Kd * dInput;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80041f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f8:	f7fc f9fe 	bl	80005f8 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4620      	mov	r0, r4
 8004202:	4629      	mov	r1, r5
 8004204:	f7fc f840 	bl	8000288 <__aeabi_dsub>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004210:	f7fc f83c 	bl	800028c <__adddf3>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (output > uPID->OutMax)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004226:	f7fc fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <PID_Compute+0x18c>
        {
            output = uPID->OutMax;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004236:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800423a:	e00e      	b.n	800425a <PID_Compute+0x1aa>
        }
        else if (output < uPID->OutMin)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004242:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004246:	f7fc fc49 	bl	8000adc <__aeabi_dcmplt>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <PID_Compute+0x1aa>
        {
            output = uPID->OutMin;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004256:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }
        else { }

        *uPID->MyOutput = output;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800425e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004262:	e9c1 2300 	strd	r2, r3, [r1]

        /* ..... Remember some variables for next time ..... */
        uPID->LastInput = input;
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        uPID->LastTime = now;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	605a      	str	r2, [r3, #4]

        return _TRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <PID_Compute+0x1cc>

    }
    else
    {
        return _FALSE;
 800427a:	2300      	movs	r3, #0
    }

}
 800427c:	4618      	mov	r0, r3
 800427e:	3730      	adds	r7, #48	; 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bdb0      	pop	{r4, r5, r7, pc}

08004284 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]

    uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b01      	cmp	r3, #1
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	73fb      	strb	r3, [r7, #15]

    /* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
    if (newAuto && !uPID->InAuto)
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <PID_SetMode+0x2e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <PID_SetMode+0x2e>
    {
        PID_Init(uPID);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fe79 	bl	8003fa4 <PID_Init>
    }

    uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	705a      	strb	r2, [r3, #1]

}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <PID_SetOutputLimits>:
    return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6178      	str	r0, [r7, #20]
 80042c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80042cc:	ed87 1b00 	vstr	d1, [r7]
    /* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
    if (Min >= Max)
 80042d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042d8:	f7fc fc14 	bl	8000b04 <__aeabi_dcmpge>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d158      	bne.n	8004394 <PID_SetOutputLimits+0xd4>
    {
        return;
    }

    uPID->OutMin = Min;
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    uPID->OutMax = Max;
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

    /* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
    if (uPID->InAuto)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04b      	beq.n	8004396 <PID_SetOutputLimits+0xd6>
    {

        /* ..... Check out value ..... */
        if (*uPID->MyOutput > uPID->OutMax)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800430c:	f7fc fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <PID_SetOutputLimits+0x66>
        {
            *uPID->MyOutput = uPID->OutMax;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004320:	e9c1 2300 	strd	r2, r3, [r1]
 8004324:	e012      	b.n	800434c <PID_SetOutputLimits+0x8c>
        }
        else if (*uPID->MyOutput < uPID->OutMin)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004334:	f7fc fbd2 	bl	8000adc <__aeabi_dcmplt>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d006      	beq.n	800434c <PID_SetOutputLimits+0x8c>
        {
            *uPID->MyOutput = uPID->OutMin;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004348:	e9c1 2300 	strd	r2, r3, [r1]
        }
        else { }

        /* ..... Check out value ..... */
        if (uPID->OutputSum > uPID->OutMax)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004358:	f7fc fbde 	bl	8000b18 <__aeabi_dcmpgt>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <PID_SetOutputLimits+0xb0>
        {
            uPID->OutputSum = uPID->OutMax;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004368:	6979      	ldr	r1, [r7, #20]
 800436a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800436e:	e012      	b.n	8004396 <PID_SetOutputLimits+0xd6>
        }
        else if (uPID->OutputSum < uPID->OutMin)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800437c:	f7fc fbae 	bl	8000adc <__aeabi_dcmplt>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <PID_SetOutputLimits+0xd6>
        {
            uPID->OutputSum = uPID->OutMin;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004392:	e000      	b.n	8004396 <PID_SetOutputLimits+0xd6>
        return;
 8004394:	bf00      	nop
        }
        else { }

    }

}
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
    PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	61f8      	str	r0, [r7, #28]
 80043a4:	ed87 0b04 	vstr	d0, [r7, #16]
 80043a8:	ed87 1b02 	vstr	d1, [r7, #8]
 80043ac:	ed87 2b00 	vstr	d2, [r7]
 80043b0:	460b      	mov	r3, r1
 80043b2:	76fb      	strb	r3, [r7, #27]

    double SampleTimeInSec;

    /* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
    if (Kp < 0 || Ki < 0 || Kd < 0)
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043c0:	f7fc fb8c 	bl	8000adc <__aeabi_dcmplt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8089 	bne.w	80044de <PID_SetTunings2+0x142>
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043d8:	f7fc fb80 	bl	8000adc <__aeabi_dcmplt>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d17d      	bne.n	80044de <PID_SetTunings2+0x142>
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043ee:	f7fc fb75 	bl	8000adc <__aeabi_dcmplt>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d172      	bne.n	80044de <PID_SetTunings2+0x142>
    {
        return;
    }

    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    uPID->POn    = POn;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	7efa      	ldrb	r2, [r7, #27]
 80043fc:	709a      	strb	r2, [r3, #2]
    uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80043fe:	7efb      	ldrb	r3, [r7, #27]
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	701a      	strb	r2, [r3, #0]

    uPID->DispKp = Kp;
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004416:	e9c1 2304 	strd	r2, r3, [r1, #16]
    uPID->DispKi = Ki;
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004420:	e9c1 2306 	strd	r2, r3, [r1, #24]
    uPID->DispKd = Kd;
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    /* ~~~~~~~~~ Calculate time ~~~~~~~~ */
    SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f866 	bl	8000504 <__aeabi_ui2d>
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <PID_SetTunings2+0x14c>)
 800443e:	f7fc fa05 	bl	800084c <__aeabi_ddiv>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	e9c7 2308 	strd	r2, r3, [r7, #32]

    uPID->Kp = Kp;
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004450:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    uPID->Ki = Ki * SampleTimeInSec;
 8004454:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800445c:	f7fc f8cc 	bl	80005f8 <__aeabi_dmul>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	69f9      	ldr	r1, [r7, #28]
 8004466:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    uPID->Kd = Kd / SampleTimeInSec;
 800446a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800446e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004472:	f7fc f9eb 	bl	800084c <__aeabi_ddiv>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	69f9      	ldr	r1, [r7, #28]
 800447c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* ~~~~~~~~ Check direction ~~~~~~~~ */
    if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d12b      	bne.n	80044e0 <PID_SetTunings2+0x144>
    {

        uPID->Kp = (0 - uPID->Kp);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800448e:	f04f 0000 	mov.w	r0, #0
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f7fb fef7 	bl	8000288 <__aeabi_dsub>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        uPID->Ki = (0 - uPID->Ki);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80044aa:	f04f 0000 	mov.w	r0, #0
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	f7fb fee9 	bl	8000288 <__aeabi_dsub>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	69f9      	ldr	r1, [r7, #28]
 80044bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        uPID->Kd = (0 - uPID->Kd);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f7fb fedb 	bl	8000288 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	69f9      	ldr	r1, [r7, #28]
 80044d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80044dc:	e000      	b.n	80044e0 <PID_SetTunings2+0x144>
        return;
 80044de:	bf00      	nop

    }

}
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	408f4000 	.word	0x408f4000

080044ec <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
    /* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
    if ((uPID->InAuto) && (Direction != uPID->ControllerDirection))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02e      	beq.n	800455e <PID_SetControllerDirection+0x72>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	429a      	cmp	r2, r3
 8004508:	d029      	beq.n	800455e <PID_SetControllerDirection+0x72>
    {

        uPID->Kp = (0 - uPID->Kp);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004510:	f04f 0000 	mov.w	r0, #0
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	f7fb feb6 	bl	8000288 <__aeabi_dsub>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        uPID->Ki = (0 - uPID->Ki);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f7fb fea8 	bl	8000288 <__aeabi_dsub>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        uPID->Kd = (0 - uPID->Kd);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	f7fb fe9a 	bl	8000288 <__aeabi_dsub>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    }

    uPID->ControllerDirection = Direction;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	70da      	strb	r2, [r3, #3]

}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <PID_SetSampleTime>:
    return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 800456c:	b5b0      	push	{r4, r5, r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

    double ratio;

    /* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
    if (NewSampleTime > 0)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dd2e      	ble.n	80045da <PID_SetSampleTime+0x6e>
    {

        ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800457c:	6838      	ldr	r0, [r7, #0]
 800457e:	f7fb ffd1 	bl	8000524 <__aeabi_i2d>
 8004582:	4604      	mov	r4, r0
 8004584:	460d      	mov	r5, r1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ffba 	bl	8000504 <__aeabi_ui2d>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	f7fc f958 	bl	800084c <__aeabi_ddiv>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

        uPID->Ki *= ratio;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80045aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ae:	f7fc f823 	bl	80005f8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        uPID->Kd /= ratio;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80045c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c6:	f7fc f941 	bl	800084c <__aeabi_ddiv>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        uPID->SampleTime = (uint32_t)NewSampleTime;
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]

    }

}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080045e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_MspInit+0x54>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <HAL_MspInit+0x54>)
 80045f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f8:	6453      	str	r3, [r2, #68]	; 0x44
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <HAL_MspInit+0x54>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_MspInit+0x54>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <HAL_MspInit+0x54>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_MspInit+0x54>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	210f      	movs	r1, #15
 8004626:	f06f 0001 	mvn.w	r0, #1
 800462a:	f000 fc60 	bl	8004eee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800

0800463c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <HAL_I2C_MspInit+0x84>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d12c      	bne.n	80046b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800467a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800467e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004680:	2312      	movs	r3, #18
 8004682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004688:	2303      	movs	r3, #3
 800468a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800468c:	2304      	movs	r3, #4
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004690:	f107 0314 	add.w	r3, r7, #20
 8004694:	4619      	mov	r1, r3
 8004696:	480c      	ldr	r0, [pc, #48]	; (80046c8 <HAL_I2C_MspInit+0x8c>)
 8004698:	f001 f862 	bl	8005760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 80046a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046aa:	6413      	str	r3, [r2, #64]	; 0x40
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_I2C_MspInit+0x88>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40005400 	.word	0x40005400
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40020400 	.word	0x40020400

080046cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 031c 	add.w	r3, r7, #28
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_TIM_Base_MspInit+0xe8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d12d      	bne.n	800474a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6453      	str	r3, [r2, #68]	; 0x44
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004714:	f043 0310 	orr.w	r3, r3, #16
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8004726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800472a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004734:	2300      	movs	r3, #0
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004738:	2301      	movs	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 800473c:	f107 031c 	add.w	r3, r7, #28
 8004740:	4619      	mov	r1, r3
 8004742:	481e      	ldr	r0, [pc, #120]	; (80047bc <HAL_TIM_Base_MspInit+0xf0>)
 8004744:	f001 f80c 	bl	8005760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004748:	e030      	b.n	80047ac <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_TIM_Base_MspInit+0xf4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d12b      	bne.n	80047ac <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	6453      	str	r3, [r2, #68]	; 0x44
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6313      	str	r3, [r2, #48]	; 0x30
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HAL_TIM_Base_MspInit+0xec>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800478c:	23c0      	movs	r3, #192	; 0xc0
 800478e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004790:	2302      	movs	r3, #2
 8004792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800479c:	2303      	movs	r3, #3
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a0:	f107 031c 	add.w	r3, r7, #28
 80047a4:	4619      	mov	r1, r3
 80047a6:	4807      	ldr	r0, [pc, #28]	; (80047c4 <HAL_TIM_Base_MspInit+0xf8>)
 80047a8:	f000 ffda 	bl	8005760 <HAL_GPIO_Init>
}
 80047ac:	bf00      	nop
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40020800 	.word	0x40020800

080047c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	f107 031c 	add.w	r3, r7, #28
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d14b      	bne.n	8004882 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a3e      	ldr	r2, [pc, #248]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a37      	ldr	r2, [pc, #220]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b35      	ldr	r3, [pc, #212]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	6313      	str	r3, [r2, #48]	; 0x30
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004844:	2302      	movs	r3, #2
 8004846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484c:	2300      	movs	r3, #0
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004850:	2301      	movs	r3, #1
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	f107 031c 	add.w	r3, r7, #28
 8004858:	4619      	mov	r1, r3
 800485a:	4825      	ldr	r0, [pc, #148]	; (80048f0 <HAL_TIM_Encoder_MspInit+0x128>)
 800485c:	f000 ff80 	bl	8005760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004860:	2308      	movs	r3, #8
 8004862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2302      	movs	r3, #2
 8004866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2300      	movs	r3, #0
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004870:	2301      	movs	r3, #1
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004874:	f107 031c 	add.w	r3, r7, #28
 8004878:	4619      	mov	r1, r3
 800487a:	481e      	ldr	r0, [pc, #120]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800487c:	f000 ff70 	bl	8005760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004880:	e030      	b.n	80048e4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_TIM_Encoder_MspInit+0x130>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d12b      	bne.n	80048e4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4b16      	ldr	r3, [pc, #88]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 8004896:	f043 0302 	orr.w	r3, r3, #2
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
 800489c:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6313      	str	r3, [r2, #48]	; 0x30
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_TIM_Encoder_MspInit+0x124>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048c4:	23c0      	movs	r3, #192	; 0xc0
 80048c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048d4:	2302      	movs	r3, #2
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	4619      	mov	r1, r3
 80048de:	4804      	ldr	r0, [pc, #16]	; (80048f0 <HAL_TIM_Encoder_MspInit+0x128>)
 80048e0:	f000 ff3e 	bl	8005760 <HAL_GPIO_Init>
}
 80048e4:	bf00      	nop
 80048e6:	3730      	adds	r7, #48	; 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40000400 	.word	0x40000400

080048fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_TIM_IC_MspInit+0x94>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d134      	bne.n	8004988 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 8004928:	f043 0304 	orr.w	r3, r3, #4
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 8004944:	f043 0308 	orr.w	r3, r3, #8
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_TIM_IC_MspInit+0x98>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800495a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495c:	2302      	movs	r3, #2
 800495e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004964:	2300      	movs	r3, #0
 8004966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004968:	2302      	movs	r3, #2
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	4619      	mov	r1, r3
 8004972:	4809      	ldr	r0, [pc, #36]	; (8004998 <HAL_TIM_IC_MspInit+0x9c>)
 8004974:	f000 fef4 	bl	8005760 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004978:	2200      	movs	r2, #0
 800497a:	2105      	movs	r1, #5
 800497c:	201e      	movs	r0, #30
 800497e:	f000 fab6 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004982:	201e      	movs	r0, #30
 8004984:	f000 facf 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40000800 	.word	0x40000800
 8004994:	40023800 	.word	0x40023800
 8004998:	40020c00 	.word	0x40020c00

0800499c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a35      	ldr	r2, [pc, #212]	; (8004a90 <HAL_UART_MspInit+0xf4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d163      	bne.n	8004a86 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049cc:	6413      	str	r3, [r2, #64]	; 0x40
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_UART_MspInit+0xf8>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fc:	2302      	movs	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a04:	2303      	movs	r3, #3
 8004a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a08:	2307      	movs	r3, #7
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	4619      	mov	r1, r3
 8004a12:	4821      	ldr	r0, [pc, #132]	; (8004a98 <HAL_UART_MspInit+0xfc>)
 8004a14:	f000 fea4 	bl	8005760 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004a18:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_UART_MspInit+0x104>)
 8004a1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a24:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a38:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004a5a:	4810      	ldr	r0, [pc, #64]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a5c:	f000 fa7e 	bl	8004f5c <HAL_DMA_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004a66:	f7ff f865 	bl	8003b34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_UART_MspInit+0x100>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2105      	movs	r1, #5
 8004a7a:	2027      	movs	r0, #39	; 0x27
 8004a7c:	f000 fa37 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a80:	2027      	movs	r0, #39	; 0x27
 8004a82:	f000 fa50 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40020800 	.word	0x40020800
 8004a9c:	200002e0 	.word	0x200002e0
 8004aa0:	40026028 	.word	0x40026028

08004aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004aa8:	e7fe      	b.n	8004aa8 <NMI_Handler+0x4>

08004aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aae:	e7fe      	b.n	8004aae <HardFault_Handler+0x4>

08004ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ab4:	e7fe      	b.n	8004ab4 <MemManage_Handler+0x4>

08004ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aba:	e7fe      	b.n	8004aba <BusFault_Handler+0x4>

08004abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ac0:	e7fe      	b.n	8004ac0 <UsageFault_Handler+0x4>

08004ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ad4:	f000 f8ec 	bl	8004cb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004ad8:	f007 f90c 	bl	800bcf4 <xTaskGetSchedulerState>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004ae2:	f007 fef1 	bl	800c8c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <DMA1_Stream1_IRQHandler+0x10>)
 8004af2:	f000 fbcb 	bl	800528c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200002e0 	.word	0x200002e0

08004b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <TIM4_IRQHandler+0x10>)
 8004b06:	f003 f86f 	bl	8007be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2000020c 	.word	0x2000020c

08004b14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <USART3_IRQHandler+0x10>)
 8004b1a:	f004 fa2b 	bl	8008f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	2000029c 	.word	0x2000029c

08004b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <_sbrk+0x5c>)
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <_sbrk+0x60>)
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <_sbrk+0x64>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <_sbrk+0x64>)
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <_sbrk+0x68>)
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <_sbrk+0x64>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d207      	bcs.n	8004b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b58:	f008 f958 	bl	800ce0c <__errno>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	220c      	movs	r2, #12
 8004b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	e009      	b.n	8004b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <_sbrk+0x64>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <_sbrk+0x64>)
 8004b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20020000 	.word	0x20020000
 8004b88:	00000400 	.word	0x00000400
 8004b8c:	2000093c 	.word	0x2000093c
 8004b90:	200053e0 	.word	0x200053e0

08004b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <SystemInit+0x20>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <SystemInit+0x20>)
 8004ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bbc:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bbe:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bc0:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bc4:	e002      	b.n	8004bcc <LoopCopyDataInit>

08004bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bca:	3304      	adds	r3, #4

08004bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bd0:	d3f9      	bcc.n	8004bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bd2:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bd4:	4c0b      	ldr	r4, [pc, #44]	; (8004c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bd8:	e001      	b.n	8004bde <LoopFillZerobss>

08004bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bdc:	3204      	adds	r2, #4

08004bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004be0:	d3fb      	bcc.n	8004bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004be2:	f7ff ffd7 	bl	8004b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004be6:	f008 f917 	bl	800ce18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bea:	f7fc febd 	bl	8001968 <main>
  bx  lr    
 8004bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bf8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004bfc:	0800e400 	.word	0x0800e400
  ldr r2, =_sbss
 8004c00:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004c04:	200053dc 	.word	0x200053dc

08004c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c08:	e7fe      	b.n	8004c08 <ADC_IRQHandler>
	...

08004c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <HAL_Init+0x40>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <HAL_Init+0x40>)
 8004c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_Init+0x40>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <HAL_Init+0x40>)
 8004c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <HAL_Init+0x40>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <HAL_Init+0x40>)
 8004c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c34:	2003      	movs	r0, #3
 8004c36:	f000 f94f 	bl	8004ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c3a:	200f      	movs	r0, #15
 8004c3c:	f000 f808 	bl	8004c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c40:	f7ff fcd0 	bl	80045e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00

08004c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_InitTick+0x54>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_InitTick+0x58>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f967 	bl	8004f42 <HAL_SYSTICK_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00e      	b.n	8004c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d80a      	bhi.n	8004c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c84:	2200      	movs	r2, #0
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f000 f92f 	bl	8004eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c90:	4a06      	ldr	r2, [pc, #24]	; (8004cac <HAL_InitTick+0x5c>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000034 	.word	0x20000034
 8004ca8:	2000003c 	.word	0x2000003c
 8004cac:	20000038 	.word	0x20000038

08004cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_IncTick+0x20>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_IncTick+0x24>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_IncTick+0x24>)
 8004cc2:	6013      	str	r3, [r2, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000003c 	.word	0x2000003c
 8004cd4:	20000940 	.word	0x20000940

08004cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return uwTick;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_GetTick+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000940 	.word	0x20000940

08004cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cf8:	f7ff ffee 	bl	8004cd8 <HAL_GetTick>
 8004cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d005      	beq.n	8004d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <HAL_Delay+0x44>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d16:	bf00      	nop
 8004d18:	f7ff ffde 	bl	8004cd8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d8f7      	bhi.n	8004d18 <HAL_Delay+0x28>
  {
  }
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	2000003c 	.word	0x2000003c

08004d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <__NVIC_SetPriorityGrouping+0x44>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d54:	4013      	ands	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6a:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <__NVIC_SetPriorityGrouping+0x44>)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	60d3      	str	r3, [r2, #12]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <__NVIC_GetPriorityGrouping+0x18>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 0307 	and.w	r3, r3, #7
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	db0b      	blt.n	8004dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	f003 021f 	and.w	r2, r3, #31
 8004db4:	4907      	ldr	r1, [pc, #28]	; (8004dd4 <__NVIC_EnableIRQ+0x38>)
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000e100 	.word	0xe000e100

08004dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db0a      	blt.n	8004e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	490c      	ldr	r1, [pc, #48]	; (8004e24 <__NVIC_SetPriority+0x4c>)
 8004df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df6:	0112      	lsls	r2, r2, #4
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e00:	e00a      	b.n	8004e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4908      	ldr	r1, [pc, #32]	; (8004e28 <__NVIC_SetPriority+0x50>)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	3b04      	subs	r3, #4
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	440b      	add	r3, r1
 8004e16:	761a      	strb	r2, [r3, #24]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf28      	it	cs
 8004e4a:	2304      	movcs	r3, #4
 8004e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d902      	bls.n	8004e5c <NVIC_EncodePriority+0x30>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3b03      	subs	r3, #3
 8004e5a:	e000      	b.n	8004e5e <NVIC_EncodePriority+0x32>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	401a      	ands	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e74:	f04f 31ff 	mov.w	r1, #4294967295
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	43d9      	mvns	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e84:	4313      	orrs	r3, r2
         );
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3724      	adds	r7, #36	; 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ea4:	d301      	bcc.n	8004eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e00f      	b.n	8004eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <SysTick_Config+0x40>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb2:	210f      	movs	r1, #15
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	f7ff ff8e 	bl	8004dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <SysTick_Config+0x40>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <SysTick_Config+0x40>)
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000e010 	.word	0xe000e010

08004ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff29 	bl	8004d38 <__NVIC_SetPriorityGrouping>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f00:	f7ff ff3e 	bl	8004d80 <__NVIC_GetPriorityGrouping>
 8004f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff8e 	bl	8004e2c <NVIC_EncodePriority>
 8004f10:	4602      	mov	r2, r0
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff5d 	bl	8004dd8 <__NVIC_SetPriority>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff31 	bl	8004d9c <__NVIC_EnableIRQ>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffa2 	bl	8004e94 <SysTick_Config>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f68:	f7ff feb6 	bl	8004cd8 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e099      	b.n	80050ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f98:	e00f      	b.n	8004fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f9a:	f7ff fe9d 	bl	8004cd8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d908      	bls.n	8004fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e078      	b.n	80050ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e8      	bne.n	8004f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <HAL_DMA_Init+0x158>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b04      	cmp	r3, #4
 8005012:	d107      	bne.n	8005024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	4313      	orrs	r3, r2
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	2b04      	cmp	r3, #4
 800504c:	d117      	bne.n	800507e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb01 	bl	8005668 <DMA_CheckFifoParam>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	; 0x40
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800507a:	2301      	movs	r3, #1
 800507c:	e016      	b.n	80050ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fab8 	bl	80055fc <DMA_CalcBaseAndBitshift>
 800508c:	4603      	mov	r3, r0
 800508e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	223f      	movs	r2, #63	; 0x3f
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	f010803f 	.word	0xf010803f

080050b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_DMA_Start_IT+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e040      	b.n	8005160 <HAL_DMA_Start_IT+0xa8>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12f      	bne.n	8005152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa4a 	bl	80055a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	223f      	movs	r2, #63	; 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0216 	orr.w	r2, r2, #22
 8005126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0208 	orr.w	r2, r2, #8
 800513e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e005      	b.n	800515e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800515e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005176:	f7ff fdaf 	bl	8004cd8 <HAL_GetTick>
 800517a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d008      	beq.n	800519a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e052      	b.n	8005240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0216 	bic.w	r2, r2, #22
 80051a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_DMA_Abort+0x62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0208 	bic.w	r2, r2, #8
 80051d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ea:	e013      	b.n	8005214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ec:	f7ff fd74 	bl	8004cd8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d90c      	bls.n	8005214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e015      	b.n	8005240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e4      	bne.n	80051ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	223f      	movs	r2, #63	; 0x3f
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d004      	beq.n	8005266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e00c      	b.n	8005280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2205      	movs	r2, #5
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005298:	4b8e      	ldr	r3, [pc, #568]	; (80054d4 <HAL_DMA_IRQHandler+0x248>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a8e      	ldr	r2, [pc, #568]	; (80054d8 <HAL_DMA_IRQHandler+0x24c>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	2208      	movs	r2, #8
 80052b8:	409a      	lsls	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01a      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2208      	movs	r2, #8
 80052e6:	409a      	lsls	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	2201      	movs	r2, #1
 80052fe:	409a      	lsls	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	2201      	movs	r2, #1
 800531c:	409a      	lsls	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0202 	orr.w	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	2204      	movs	r2, #4
 8005334:	409a      	lsls	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2204      	movs	r2, #4
 8005352:	409a      	lsls	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	2210      	movs	r2, #16
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d043      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03c      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	2210      	movs	r2, #16
 8005388:	409a      	lsls	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d018      	beq.n	80053ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d024      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
 80053ba:	e01f      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
 80053cc:	e016      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0208 	bic.w	r2, r2, #8
 80053ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	2220      	movs	r2, #32
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 808f 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8087 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	2220      	movs	r2, #32
 8005424:	409a      	lsls	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d136      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0216 	bic.w	r2, r2, #22
 8005444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <HAL_DMA_IRQHandler+0x1da>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0208 	bic.w	r2, r2, #8
 8005474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	223f      	movs	r2, #63	; 0x3f
 800547c:	409a      	lsls	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d07e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
        }
        return;
 80054a2:	e079      	b.n	8005598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01d      	beq.n	80054ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d031      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	e02c      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
 80054d2:	bf00      	nop
 80054d4:	20000034 	.word	0x20000034
 80054d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
 80054ec:	e01e      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0210 	bic.w	r2, r2, #16
 800550a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d032      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2205      	movs	r2, #5
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3301      	adds	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	d307      	bcc.n	8005574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f2      	bne.n	8005558 <HAL_DMA_IRQHandler+0x2cc>
 8005572:	e000      	b.n	8005576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	e000      	b.n	800559a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005598:	bf00      	nop
    }
  }
}
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d108      	bne.n	80055e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055de:	e007      	b.n	80055f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	3b10      	subs	r3, #16
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <DMA_CalcBaseAndBitshift+0x64>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005616:	4a13      	ldr	r2, [pc, #76]	; (8005664 <DMA_CalcBaseAndBitshift+0x68>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d909      	bls.n	800563e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	1d1a      	adds	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	659a      	str	r2, [r3, #88]	; 0x58
 800563c:	e007      	b.n	800564e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	aaaaaaab 	.word	0xaaaaaaab
 8005664:	0800e3b4 	.word	0x0800e3b4

08005668 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11f      	bne.n	80056c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d856      	bhi.n	8005736 <DMA_CheckFifoParam+0xce>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <DMA_CheckFifoParam+0x28>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056b3 	.word	0x080056b3
 8005698:	080056a1 	.word	0x080056a1
 800569c:	08005737 	.word	0x08005737
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d046      	beq.n	800573a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b0:	e043      	b.n	800573a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056ba:	d140      	bne.n	800573e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e03d      	b.n	800573e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	d121      	bne.n	8005710 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d837      	bhi.n	8005742 <DMA_CheckFifoParam+0xda>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <DMA_CheckFifoParam+0x70>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056ef 	.word	0x080056ef
 80056e0:	080056e9 	.word	0x080056e9
 80056e4:	08005701 	.word	0x08005701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e030      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d025      	beq.n	8005746 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fe:	e022      	b.n	8005746 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005708:	d11f      	bne.n	800574a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800570e:	e01c      	b.n	800574a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d903      	bls.n	800571e <DMA_CheckFifoParam+0xb6>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d003      	beq.n	8005724 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800571c:	e018      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e015      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      break;
 8005734:	e00b      	b.n	800574e <DMA_CheckFifoParam+0xe6>
      break;
 8005736:	bf00      	nop
 8005738:	e00a      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800573a:	bf00      	nop
 800573c:	e008      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800573e:	bf00      	nop
 8005740:	e006      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 8005742:	bf00      	nop
 8005744:	e004      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;   
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <DMA_CheckFifoParam+0xe8>
      break;
 800574e:	bf00      	nop
    }
  } 
  
  return status; 
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005760:	b480      	push	{r7}
 8005762:	b089      	sub	sp, #36	; 0x24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	e16b      	b.n	8005a54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800577c:	2201      	movs	r2, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	f040 815a 	bne.w	8005a4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d005      	beq.n	80057b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d130      	bne.n	8005814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	2203      	movs	r2, #3
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 0201 	and.w	r2, r3, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d017      	beq.n	8005850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d123      	bne.n	80058a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	08da      	lsrs	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3208      	adds	r2, #8
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	220f      	movs	r2, #15
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	08da      	lsrs	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3208      	adds	r2, #8
 800589e:	69b9      	ldr	r1, [r7, #24]
 80058a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	2203      	movs	r2, #3
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0203 	and.w	r2, r3, #3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80b4 	beq.w	8005a4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	4b60      	ldr	r3, [pc, #384]	; (8005a6c <HAL_GPIO_Init+0x30c>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	4a5f      	ldr	r2, [pc, #380]	; (8005a6c <HAL_GPIO_Init+0x30c>)
 80058f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f4:	6453      	str	r3, [r2, #68]	; 0x44
 80058f6:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <HAL_GPIO_Init+0x30c>)
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005902:	4a5b      	ldr	r2, [pc, #364]	; (8005a70 <HAL_GPIO_Init+0x310>)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	3302      	adds	r3, #2
 800590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	220f      	movs	r2, #15
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a52      	ldr	r2, [pc, #328]	; (8005a74 <HAL_GPIO_Init+0x314>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02b      	beq.n	8005986 <HAL_GPIO_Init+0x226>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a51      	ldr	r2, [pc, #324]	; (8005a78 <HAL_GPIO_Init+0x318>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d025      	beq.n	8005982 <HAL_GPIO_Init+0x222>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a50      	ldr	r2, [pc, #320]	; (8005a7c <HAL_GPIO_Init+0x31c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01f      	beq.n	800597e <HAL_GPIO_Init+0x21e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4f      	ldr	r2, [pc, #316]	; (8005a80 <HAL_GPIO_Init+0x320>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d019      	beq.n	800597a <HAL_GPIO_Init+0x21a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4e      	ldr	r2, [pc, #312]	; (8005a84 <HAL_GPIO_Init+0x324>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_GPIO_Init+0x216>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4d      	ldr	r2, [pc, #308]	; (8005a88 <HAL_GPIO_Init+0x328>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00d      	beq.n	8005972 <HAL_GPIO_Init+0x212>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4c      	ldr	r2, [pc, #304]	; (8005a8c <HAL_GPIO_Init+0x32c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <HAL_GPIO_Init+0x20e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a4b      	ldr	r2, [pc, #300]	; (8005a90 <HAL_GPIO_Init+0x330>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_GPIO_Init+0x20a>
 8005966:	2307      	movs	r3, #7
 8005968:	e00e      	b.n	8005988 <HAL_GPIO_Init+0x228>
 800596a:	2308      	movs	r3, #8
 800596c:	e00c      	b.n	8005988 <HAL_GPIO_Init+0x228>
 800596e:	2306      	movs	r3, #6
 8005970:	e00a      	b.n	8005988 <HAL_GPIO_Init+0x228>
 8005972:	2305      	movs	r3, #5
 8005974:	e008      	b.n	8005988 <HAL_GPIO_Init+0x228>
 8005976:	2304      	movs	r3, #4
 8005978:	e006      	b.n	8005988 <HAL_GPIO_Init+0x228>
 800597a:	2303      	movs	r3, #3
 800597c:	e004      	b.n	8005988 <HAL_GPIO_Init+0x228>
 800597e:	2302      	movs	r3, #2
 8005980:	e002      	b.n	8005988 <HAL_GPIO_Init+0x228>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_GPIO_Init+0x228>
 8005986:	2300      	movs	r3, #0
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	f002 0203 	and.w	r2, r2, #3
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	4093      	lsls	r3, r2
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005998:	4935      	ldr	r1, [pc, #212]	; (8005a70 <HAL_GPIO_Init+0x310>)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	089b      	lsrs	r3, r3, #2
 800599e:	3302      	adds	r3, #2
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059a6:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <HAL_GPIO_Init+0x334>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059ca:	4a32      	ldr	r2, [pc, #200]	; (8005a94 <HAL_GPIO_Init+0x334>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059d0:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <HAL_GPIO_Init+0x334>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <HAL_GPIO_Init+0x334>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059fa:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <HAL_GPIO_Init+0x334>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <HAL_GPIO_Init+0x334>)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_GPIO_Init+0x334>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a48:	4a12      	ldr	r2, [pc, #72]	; (8005a94 <HAL_GPIO_Init+0x334>)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	f67f ae90 	bls.w	800577c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	3724      	adds	r7, #36	; 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40020000 	.word	0x40020000
 8005a78:	40020400 	.word	0x40020400
 8005a7c:	40020800 	.word	0x40020800
 8005a80:	40020c00 	.word	0x40020c00
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40021400 	.word	0x40021400
 8005a8c:	40021800 	.word	0x40021800
 8005a90:	40021c00 	.word	0x40021c00
 8005a94:	40013c00 	.word	0x40013c00

08005a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	e001      	b.n	8005aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ad8:	787b      	ldrb	r3, [r7, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ade:	887a      	ldrh	r2, [r7, #2]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ae4:	e003      	b.n	8005aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	041a      	lsls	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	619a      	str	r2, [r3, #24]
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b0c:	887a      	ldrh	r2, [r7, #2]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4013      	ands	r3, r2
 8005b12:	041a      	lsls	r2, r3, #16
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	43d9      	mvns	r1, r3
 8005b18:	887b      	ldrh	r3, [r7, #2]
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	619a      	str	r2, [r3, #24]
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e12b      	b.n	8005d9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fe fd70 	bl	800463c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	; 0x24
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b94:	f001 fbe4 	bl	8007360 <HAL_RCC_GetPCLK1Freq>
 8005b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4a81      	ldr	r2, [pc, #516]	; (8005da4 <HAL_I2C_Init+0x274>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d807      	bhi.n	8005bb4 <HAL_I2C_Init+0x84>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a80      	ldr	r2, [pc, #512]	; (8005da8 <HAL_I2C_Init+0x278>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bf94      	ite	ls
 8005bac:	2301      	movls	r3, #1
 8005bae:	2300      	movhi	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e006      	b.n	8005bc2 <HAL_I2C_Init+0x92>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a7d      	ldr	r2, [pc, #500]	; (8005dac <HAL_I2C_Init+0x27c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bf94      	ite	ls
 8005bbc:	2301      	movls	r3, #1
 8005bbe:	2300      	movhi	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e0e7      	b.n	8005d9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a78      	ldr	r2, [pc, #480]	; (8005db0 <HAL_I2C_Init+0x280>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	0c9b      	lsrs	r3, r3, #18
 8005bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a6a      	ldr	r2, [pc, #424]	; (8005da4 <HAL_I2C_Init+0x274>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d802      	bhi.n	8005c04 <HAL_I2C_Init+0xd4>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3301      	adds	r3, #1
 8005c02:	e009      	b.n	8005c18 <HAL_I2C_Init+0xe8>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	4a69      	ldr	r2, [pc, #420]	; (8005db4 <HAL_I2C_Init+0x284>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	099b      	lsrs	r3, r3, #6
 8005c16:	3301      	adds	r3, #1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	495c      	ldr	r1, [pc, #368]	; (8005da4 <HAL_I2C_Init+0x274>)
 8005c34:	428b      	cmp	r3, r1
 8005c36:	d819      	bhi.n	8005c6c <HAL_I2C_Init+0x13c>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1e59      	subs	r1, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c4c:	400b      	ands	r3, r1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_I2C_Init+0x138>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1e59      	subs	r1, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c60:	3301      	adds	r3, #1
 8005c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c66:	e051      	b.n	8005d0c <HAL_I2C_Init+0x1dc>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	e04f      	b.n	8005d0c <HAL_I2C_Init+0x1dc>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d111      	bne.n	8005c98 <HAL_I2C_Init+0x168>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e58      	subs	r0, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	440b      	add	r3, r1
 8005c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c86:	3301      	adds	r3, #1
 8005c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e012      	b.n	8005cbe <HAL_I2C_Init+0x18e>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1e58      	subs	r0, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	0099      	lsls	r1, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	2300      	movne	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_I2C_Init+0x196>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e022      	b.n	8005d0c <HAL_I2C_Init+0x1dc>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10e      	bne.n	8005cec <HAL_I2C_Init+0x1bc>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1e58      	subs	r0, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	440b      	add	r3, r1
 8005cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	e00f      	b.n	8005d0c <HAL_I2C_Init+0x1dc>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	0099      	lsls	r1, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	6809      	ldr	r1, [r1, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6911      	ldr	r1, [r2, #16]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68d2      	ldr	r2, [r2, #12]
 8005d46:	4311      	orrs	r1, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	000186a0 	.word	0x000186a0
 8005da8:	001e847f 	.word	0x001e847f
 8005dac:	003d08ff 	.word	0x003d08ff
 8005db0:	431bde83 	.word	0x431bde83
 8005db4:	10624dd3 	.word	0x10624dd3

08005db8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	817b      	strh	r3, [r7, #10]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	813b      	strh	r3, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dd2:	f7fe ff81 	bl	8004cd8 <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	f040 80d9 	bne.w	8005f98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2319      	movs	r3, #25
 8005dec:	2201      	movs	r2, #1
 8005dee:	496d      	ldr	r1, [pc, #436]	; (8005fa4 <HAL_I2C_Mem_Write+0x1ec>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fc7f 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0cc      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_I2C_Mem_Write+0x56>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e0c5      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d007      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2221      	movs	r2, #33	; 0x21
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a4d      	ldr	r2, [pc, #308]	; (8005fa8 <HAL_I2C_Mem_Write+0x1f0>)
 8005e74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e76:	88f8      	ldrh	r0, [r7, #6]
 8005e78:	893a      	ldrh	r2, [r7, #8]
 8005e7a:	8979      	ldrh	r1, [r7, #10]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	4603      	mov	r3, r0
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fab6 	bl	80063f8 <I2C_RequestMemoryWrite>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d052      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e081      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fd00 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d107      	bne.n	8005ebe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e06b      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d11b      	bne.n	8005f38 <HAL_I2C_Mem_Write+0x180>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1aa      	bne.n	8005e96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fcec 	bl	8006922 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d107      	bne.n	8005f68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e016      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	00100002 	.word	0x00100002
 8005fa8:	ffff0000 	.word	0xffff0000

08005fac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fc6:	f7fe fe87 	bl	8004cd8 <HAL_GetTick>
 8005fca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	f040 8208 	bne.w	80063ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2319      	movs	r3, #25
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	497b      	ldr	r1, [pc, #492]	; (80061d0 <HAL_I2C_Mem_Read+0x224>)
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fb85 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e1fb      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Mem_Read+0x56>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e1f4      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d007      	beq.n	8006028 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2222      	movs	r2, #34	; 0x22
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2240      	movs	r2, #64	; 0x40
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_I2C_Mem_Read+0x228>)
 8006068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800606a:	88f8      	ldrh	r0, [r7, #6]
 800606c:	893a      	ldrh	r2, [r7, #8]
 800606e:	8979      	ldrh	r1, [r7, #10]
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4603      	mov	r3, r0
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fa52 	bl	8006524 <I2C_RequestMemoryRead>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e1b0      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d113      	bne.n	80060ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e184      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d11b      	bne.n	80060fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e164      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d11b      	bne.n	800613a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	e144      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006150:	e138      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	2b03      	cmp	r3, #3
 8006158:	f200 80f1 	bhi.w	800633e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	2b01      	cmp	r3, #1
 8006162:	d123      	bne.n	80061ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fc1b 	bl	80069a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e139      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061aa:	e10b      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d14e      	bne.n	8006252 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	2200      	movs	r2, #0
 80061bc:	4906      	ldr	r1, [pc, #24]	; (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fa98 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e10e      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
 80061ce:	bf00      	nop
 80061d0:	00100002 	.word	0x00100002
 80061d4:	ffff0000 	.word	0xffff0000
 80061d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006250:	e0b8      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	2200      	movs	r2, #0
 800625a:	4966      	ldr	r1, [pc, #408]	; (80063f4 <HAL_I2C_Mem_Read+0x448>)
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fa49 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0bf      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	494f      	ldr	r1, [pc, #316]	; (80063f4 <HAL_I2C_Mem_Read+0x448>)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa1b 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e091      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800633c:	e042      	b.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fb2e 	bl	80069a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e04c      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d118      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f aec2 	bne.w	8006152 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	00010004 	.word	0x00010004

080063f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2200      	movs	r2, #0
 800642a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f960 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006448:	d103      	bne.n	8006452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e05f      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	492d      	ldr	r1, [pc, #180]	; (8006520 <I2C_RequestMemoryWrite+0x128>)
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f998 	bl	80067a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e04c      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fa02 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e02b      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c4:	893b      	ldrh	r3, [r7, #8]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	e021      	b.n	8006514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	6a39      	ldr	r1, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f9dc 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d107      	bne.n	8006506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e005      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800650a:	893b      	ldrh	r3, [r7, #8]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	00010002 	.word	0x00010002

08006524 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	817b      	strh	r3, [r7, #10]
 8006536:	460b      	mov	r3, r1
 8006538:	813b      	strh	r3, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800654c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	2200      	movs	r2, #0
 8006566:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f8c2 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006584:	d103      	bne.n	800658e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0aa      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	4952      	ldr	r1, [pc, #328]	; (80066f0 <I2C_RequestMemoryRead+0x1cc>)
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f8fa 	bl	80067a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e097      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d0:	6a39      	ldr	r1, [r7, #32]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f964 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00d      	beq.n	80065fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d107      	bne.n	80065f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e076      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006600:	893b      	ldrh	r3, [r7, #8]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	611a      	str	r2, [r3, #16]
 800660a:	e021      	b.n	8006650 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f93e 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	2b04      	cmp	r3, #4
 8006630:	d107      	bne.n	8006642 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e050      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006646:	893b      	ldrh	r3, [r7, #8]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6a39      	ldr	r1, [r7, #32]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f923 	bl	80068a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b04      	cmp	r3, #4
 8006666:	d107      	bne.n	8006678 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006676:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e035      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2200      	movs	r2, #0
 8006694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f82b 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d103      	bne.n	80066bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e013      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066c0:	897b      	ldrh	r3, [r7, #10]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	6a3a      	ldr	r2, [r7, #32]
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <I2C_RequestMemoryRead+0x1cc>)
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f863 	bl	80067a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	00010002 	.word	0x00010002

080066f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006704:	e025      	b.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d021      	beq.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fe fae3 	bl	8004cd8 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d116      	bne.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e023      	b.n	800679a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d10d      	bne.n	8006778 <I2C_WaitOnFlagUntilTimeout+0x84>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	43da      	mvns	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4013      	ands	r3, r2
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	bf0c      	ite	eq
 800676e:	2301      	moveq	r3, #1
 8006770:	2300      	movne	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	e00c      	b.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf0c      	ite	eq
 800678a:	2301      	moveq	r3, #1
 800678c:	2300      	movne	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	429a      	cmp	r2, r3
 8006796:	d0b6      	beq.n	8006706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067b0:	e051      	b.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c0:	d123      	bne.n	800680a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f043 0204 	orr.w	r2, r3, #4
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e046      	b.n	8006898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d021      	beq.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fe fa61 	bl	8004cd8 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d116      	bne.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e020      	b.n	8006898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d10c      	bne.n	800687a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	43da      	mvns	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	e00b      	b.n	8006892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	43da      	mvns	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d18d      	bne.n	80067b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ac:	e02d      	b.n	800690a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f8ce 	bl	8006a50 <I2C_IsAcknowledgeFailed>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e02d      	b.n	800691a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d021      	beq.n	800690a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fe fa07 	bl	8004cd8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d116      	bne.n	800690a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e007      	b.n	800691a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d1ca      	bne.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800692e:	e02d      	b.n	800698c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f88d 	bl	8006a50 <I2C_IsAcknowledgeFailed>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e02d      	b.n	800699c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d021      	beq.n	800698c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006948:	f7fe f9c6 	bl	8004cd8 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	d302      	bcc.n	800695e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d116      	bne.n	800698c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f043 0220 	orr.w	r2, r3, #32
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e007      	b.n	800699c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d1ca      	bne.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b0:	e042      	b.n	8006a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d119      	bne.n	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0210 	mvn.w	r2, #16
 80069c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e029      	b.n	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f4:	f7fe f970 	bl	8004cd8 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d302      	bcc.n	8006a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d116      	bne.n	8006a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e007      	b.n	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d1b5      	bne.n	80069b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a66:	d11b      	bne.n	8006aa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	f043 0204 	orr.w	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006ac2:	687b      	ldr	r3, [r7, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	420e0020 	.word	0x420e0020
 8006ad4:	40007000 	.word	0x40007000

08006ad8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <HAL_PWR_DisableBkUpAccess+0x24>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006aea:	687b      	ldr	r3, [r7, #4]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	420e0020 	.word	0x420e0020
 8006afc:	40007000 	.word	0x40007000

08006b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e267      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d075      	beq.n	8006c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b1e:	4b88      	ldr	r3, [pc, #544]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d00c      	beq.n	8006b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b2a:	4b85      	ldr	r3, [pc, #532]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d112      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b36:	4b82      	ldr	r3, [pc, #520]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b42:	d10b      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b44:	4b7e      	ldr	r3, [pc, #504]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05b      	beq.n	8006c08 <HAL_RCC_OscConfig+0x108>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d157      	bne.n	8006c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e242      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d106      	bne.n	8006b74 <HAL_RCC_OscConfig+0x74>
 8006b66:	4b76      	ldr	r3, [pc, #472]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a75      	ldr	r2, [pc, #468]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e01d      	b.n	8006bb0 <HAL_RCC_OscConfig+0xb0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x98>
 8006b7e:	4b70      	ldr	r3, [pc, #448]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a6f      	ldr	r2, [pc, #444]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	4b6d      	ldr	r3, [pc, #436]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a6c      	ldr	r2, [pc, #432]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0xb0>
 8006b98:	4b69      	ldr	r3, [pc, #420]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a68      	ldr	r2, [pc, #416]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4b66      	ldr	r3, [pc, #408]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a65      	ldr	r2, [pc, #404]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fe f88e 	bl	8004cd8 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc0:	f7fe f88a 	bl	8004cd8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	; 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e207      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	4b5b      	ldr	r3, [pc, #364]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0xc0>
 8006bde:	e014      	b.n	8006c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fe f87a 	bl	8004cd8 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fe f876 	bl	8004cd8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e1f3      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	4b51      	ldr	r3, [pc, #324]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0xe8>
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d063      	beq.n	8006cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c16:	4b4a      	ldr	r3, [pc, #296]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c22:	4b47      	ldr	r3, [pc, #284]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d11c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2e:	4b44      	ldr	r3, [pc, #272]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3a:	4b41      	ldr	r3, [pc, #260]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x152>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e1c7      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c52:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4937      	ldr	r1, [pc, #220]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c66:	e03a      	b.n	8006cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d020      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c70:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <HAL_RCC_OscConfig+0x244>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c76:	f7fe f82f 	bl	8004cd8 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7e:	f7fe f82b 	bl	8004cd8 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1a8      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9c:	4b28      	ldr	r3, [pc, #160]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4925      	ldr	r1, [pc, #148]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	600b      	str	r3, [r1, #0]
 8006cb0:	e015      	b.n	8006cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb2:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <HAL_RCC_OscConfig+0x244>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fe f80e 	bl	8004cd8 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cc0:	f7fe f80a 	bl	8004cd8 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e187      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	4b1b      	ldr	r3, [pc, #108]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d036      	beq.n	8006d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d016      	beq.n	8006d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <HAL_RCC_OscConfig+0x248>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fd ffee 	bl	8004cd8 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d00:	f7fd ffea 	bl	8004cd8 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e167      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <HAL_RCC_OscConfig+0x240>)
 8006d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x200>
 8006d1e:	e01b      	b.n	8006d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d20:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <HAL_RCC_OscConfig+0x248>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d26:	f7fd ffd7 	bl	8004cd8 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2c:	e00e      	b.n	8006d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d2e:	f7fd ffd3 	bl	8004cd8 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d907      	bls.n	8006d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e150      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
 8006d40:	40023800 	.word	0x40023800
 8006d44:	42470000 	.word	0x42470000
 8006d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4c:	4b88      	ldr	r3, [pc, #544]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1ea      	bne.n	8006d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8097 	beq.w	8006e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d66:	2300      	movs	r3, #0
 8006d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d6a:	4b81      	ldr	r3, [pc, #516]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10f      	bne.n	8006d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	4b7d      	ldr	r3, [pc, #500]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	4a7c      	ldr	r2, [pc, #496]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	; 0x40
 8006d86:	4b7a      	ldr	r3, [pc, #488]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d96:	4b77      	ldr	r3, [pc, #476]	; (8006f74 <HAL_RCC_OscConfig+0x474>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d118      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006da2:	4b74      	ldr	r3, [pc, #464]	; (8006f74 <HAL_RCC_OscConfig+0x474>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a73      	ldr	r2, [pc, #460]	; (8006f74 <HAL_RCC_OscConfig+0x474>)
 8006da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dae:	f7fd ff93 	bl	8004cd8 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db6:	f7fd ff8f 	bl	8004cd8 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e10c      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc8:	4b6a      	ldr	r3, [pc, #424]	; (8006f74 <HAL_RCC_OscConfig+0x474>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <HAL_RCC_OscConfig+0x2ea>
 8006ddc:	4b64      	ldr	r3, [pc, #400]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	4a63      	ldr	r2, [pc, #396]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	; 0x70
 8006de8:	e01c      	b.n	8006e24 <HAL_RCC_OscConfig+0x324>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d10c      	bne.n	8006e0c <HAL_RCC_OscConfig+0x30c>
 8006df2:	4b5f      	ldr	r3, [pc, #380]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	4a5e      	ldr	r2, [pc, #376]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfe:	4b5c      	ldr	r3, [pc, #368]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	4a5b      	ldr	r2, [pc, #364]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0a:	e00b      	b.n	8006e24 <HAL_RCC_OscConfig+0x324>
 8006e0c:	4b58      	ldr	r3, [pc, #352]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	4a57      	ldr	r2, [pc, #348]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	6713      	str	r3, [r2, #112]	; 0x70
 8006e18:	4b55      	ldr	r3, [pc, #340]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	4a54      	ldr	r2, [pc, #336]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e1e:	f023 0304 	bic.w	r3, r3, #4
 8006e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fd ff54 	bl	8004cd8 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e34:	f7fd ff50 	bl	8004cd8 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e0cb      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4a:	4b49      	ldr	r3, [pc, #292]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0ee      	beq.n	8006e34 <HAL_RCC_OscConfig+0x334>
 8006e56:	e014      	b.n	8006e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e58:	f7fd ff3e 	bl	8004cd8 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e5e:	e00a      	b.n	8006e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e60:	f7fd ff3a 	bl	8004cd8 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e0b5      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e76:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1ee      	bne.n	8006e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d105      	bne.n	8006e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e88:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	4a38      	ldr	r2, [pc, #224]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80a1 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e9e:	4b34      	ldr	r3, [pc, #208]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d05c      	beq.n	8006f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d141      	bne.n	8006f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb2:	4b31      	ldr	r3, [pc, #196]	; (8006f78 <HAL_RCC_OscConfig+0x478>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb8:	f7fd ff0e 	bl	8004cd8 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fd ff0a 	bl	8004cd8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e087      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	491b      	ldr	r1, [pc, #108]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f08:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_RCC_OscConfig+0x478>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0e:	f7fd fee3 	bl	8004cd8 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f16:	f7fd fedf 	bl	8004cd8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e05c      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <HAL_RCC_OscConfig+0x416>
 8006f34:	e054      	b.n	8006fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_RCC_OscConfig+0x478>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3c:	f7fd fecc 	bl	8004cd8 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f44:	f7fd fec8 	bl	8004cd8 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e045      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <HAL_RCC_OscConfig+0x470>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0x444>
 8006f62:	e03d      	b.n	8006fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e038      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
 8006f70:	40023800 	.word	0x40023800
 8006f74:	40007000 	.word	0x40007000
 8006f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <HAL_RCC_OscConfig+0x4ec>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d028      	beq.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d121      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d11a      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d111      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d107      	bne.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d001      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40023800 	.word	0x40023800

08006ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0cc      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007004:	4b68      	ldr	r3, [pc, #416]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d90c      	bls.n	800702c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007012:	4b65      	ldr	r3, [pc, #404]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701a:	4b63      	ldr	r3, [pc, #396]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0b8      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d020      	beq.n	800707a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007044:	4b59      	ldr	r3, [pc, #356]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a58      	ldr	r2, [pc, #352]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800704e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800705c:	4b53      	ldr	r3, [pc, #332]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a52      	ldr	r2, [pc, #328]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007068:	4b50      	ldr	r3, [pc, #320]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	494d      	ldr	r1, [pc, #308]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	4313      	orrs	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d044      	beq.n	8007110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d107      	bne.n	800709e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	4b47      	ldr	r3, [pc, #284]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d119      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e07f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d003      	beq.n	80070ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d107      	bne.n	80070be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ae:	4b3f      	ldr	r3, [pc, #252]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e06f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070be:	4b3b      	ldr	r3, [pc, #236]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e067      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ce:	4b37      	ldr	r3, [pc, #220]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f023 0203 	bic.w	r2, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	4934      	ldr	r1, [pc, #208]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e0:	f7fd fdfa 	bl	8004cd8 <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	e00a      	b.n	80070fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e8:	f7fd fdf6 	bl	8004cd8 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e04f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 020c 	and.w	r2, r3, #12
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	429a      	cmp	r2, r3
 800710e:	d1eb      	bne.n	80070e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007110:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d20c      	bcs.n	8007138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711e:	4b22      	ldr	r3, [pc, #136]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007126:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d001      	beq.n	8007138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e032      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4916      	ldr	r1, [pc, #88]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007152:	4313      	orrs	r3, r2
 8007154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007162:	4b12      	ldr	r3, [pc, #72]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	490e      	ldr	r1, [pc, #56]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007176:	f000 f821 	bl	80071bc <HAL_RCC_GetSysClockFreq>
 800717a:	4602      	mov	r2, r0
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	490a      	ldr	r1, [pc, #40]	; (80071b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007188:	5ccb      	ldrb	r3, [r1, r3]
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fd5a 	bl	8004c50 <HAL_InitTick>

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40023c00 	.word	0x40023c00
 80071ac:	40023800 	.word	0x40023800
 80071b0:	0800e39c 	.word	0x0800e39c
 80071b4:	20000034 	.word	0x20000034
 80071b8:	20000038 	.word	0x20000038

080071bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c0:	b090      	sub	sp, #64	; 0x40
 80071c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071cc:	2300      	movs	r3, #0
 80071ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071d4:	4b59      	ldr	r3, [pc, #356]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 030c 	and.w	r3, r3, #12
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d00d      	beq.n	80071fc <HAL_RCC_GetSysClockFreq+0x40>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	f200 80a1 	bhi.w	8007328 <HAL_RCC_GetSysClockFreq+0x16c>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x34>
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d003      	beq.n	80071f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ee:	e09b      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071f0:	4b53      	ldr	r3, [pc, #332]	; (8007340 <HAL_RCC_GetSysClockFreq+0x184>)
 80071f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071f4:	e09b      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071f6:	4b53      	ldr	r3, [pc, #332]	; (8007344 <HAL_RCC_GetSysClockFreq+0x188>)
 80071f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071fa:	e098      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071fc:	4b4f      	ldr	r3, [pc, #316]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007206:	4b4d      	ldr	r3, [pc, #308]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d028      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007212:	4b4a      	ldr	r3, [pc, #296]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	2200      	movs	r2, #0
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	627a      	str	r2, [r7, #36]	; 0x24
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007224:	2100      	movs	r1, #0
 8007226:	4b47      	ldr	r3, [pc, #284]	; (8007344 <HAL_RCC_GetSysClockFreq+0x188>)
 8007228:	fb03 f201 	mul.w	r2, r3, r1
 800722c:	2300      	movs	r3, #0
 800722e:	fb00 f303 	mul.w	r3, r0, r3
 8007232:	4413      	add	r3, r2
 8007234:	4a43      	ldr	r2, [pc, #268]	; (8007344 <HAL_RCC_GetSysClockFreq+0x188>)
 8007236:	fba0 1202 	umull	r1, r2, r0, r2
 800723a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800723c:	460a      	mov	r2, r1
 800723e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007242:	4413      	add	r3, r2
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2200      	movs	r2, #0
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	61fa      	str	r2, [r7, #28]
 800724e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007256:	f7f9 fd01 	bl	8000c5c <__aeabi_uldivmod>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4613      	mov	r3, r2
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007262:	e053      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007264:	4b35      	ldr	r3, [pc, #212]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	099b      	lsrs	r3, r3, #6
 800726a:	2200      	movs	r2, #0
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	617a      	str	r2, [r7, #20]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	4652      	mov	r2, sl
 800727c:	465b      	mov	r3, fp
 800727e:	f04f 0000 	mov.w	r0, #0
 8007282:	f04f 0100 	mov.w	r1, #0
 8007286:	0159      	lsls	r1, r3, #5
 8007288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800728c:	0150      	lsls	r0, r2, #5
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	ebb2 080a 	subs.w	r8, r2, sl
 8007296:	eb63 090b 	sbc.w	r9, r3, fp
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072ae:	ebb2 0408 	subs.w	r4, r2, r8
 80072b2:	eb63 0509 	sbc.w	r5, r3, r9
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	00eb      	lsls	r3, r5, #3
 80072c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072c4:	00e2      	lsls	r2, r4, #3
 80072c6:	4614      	mov	r4, r2
 80072c8:	461d      	mov	r5, r3
 80072ca:	eb14 030a 	adds.w	r3, r4, sl
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	eb45 030b 	adc.w	r3, r5, fp
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072e2:	4629      	mov	r1, r5
 80072e4:	028b      	lsls	r3, r1, #10
 80072e6:	4621      	mov	r1, r4
 80072e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072ec:	4621      	mov	r1, r4
 80072ee:	028a      	lsls	r2, r1, #10
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f6:	2200      	movs	r2, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	60fa      	str	r2, [r7, #12]
 80072fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007300:	f7f9 fcac 	bl	8000c5c <__aeabi_uldivmod>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4613      	mov	r3, r2
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800730c:	4b0b      	ldr	r3, [pc, #44]	; (800733c <HAL_RCC_GetSysClockFreq+0x180>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	3301      	adds	r3, #1
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800731c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007326:	e002      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <HAL_RCC_GetSysClockFreq+0x184>)
 800732a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800732c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007330:	4618      	mov	r0, r3
 8007332:	3740      	adds	r7, #64	; 0x40
 8007334:	46bd      	mov	sp, r7
 8007336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	00f42400 	.word	0x00f42400
 8007344:	017d7840 	.word	0x017d7840

08007348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800734c:	4b03      	ldr	r3, [pc, #12]	; (800735c <HAL_RCC_GetHCLKFreq+0x14>)
 800734e:	681b      	ldr	r3, [r3, #0]
}
 8007350:	4618      	mov	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000034 	.word	0x20000034

08007360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007364:	f7ff fff0 	bl	8007348 <HAL_RCC_GetHCLKFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	0a9b      	lsrs	r3, r3, #10
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	4903      	ldr	r1, [pc, #12]	; (8007384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007376:	5ccb      	ldrb	r3, [r1, r3]
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40023800 	.word	0x40023800
 8007384:	0800e3ac 	.word	0x0800e3ac

08007388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800738c:	f7ff ffdc 	bl	8007348 <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	0b5b      	lsrs	r3, r3, #13
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4903      	ldr	r1, [pc, #12]	; (80073ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40023800 	.word	0x40023800
 80073ac:	0800e3ac 	.word	0x0800e3ac

080073b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e041      	b.n	8007446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fd f978 	bl	80046cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f000 ff94 	bl	800831c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e041      	b.n	80074e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f839 	bl	80074ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3304      	adds	r3, #4
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f000 ff45 	bl	800831c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <HAL_TIM_PWM_Start+0x24>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	bf14      	ite	ne
 800751c:	2301      	movne	r3, #1
 800751e:	2300      	moveq	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	e022      	b.n	800756a <HAL_TIM_PWM_Start+0x6a>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d109      	bne.n	800753e <HAL_TIM_PWM_Start+0x3e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	bf14      	ite	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2300      	moveq	r3, #0
 800753a:	b2db      	uxtb	r3, r3
 800753c:	e015      	b.n	800756a <HAL_TIM_PWM_Start+0x6a>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d109      	bne.n	8007558 <HAL_TIM_PWM_Start+0x58>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	e008      	b.n	800756a <HAL_TIM_PWM_Start+0x6a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	bf14      	ite	ne
 8007564:	2301      	movne	r3, #1
 8007566:	2300      	moveq	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07c      	b.n	800766c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <HAL_TIM_PWM_Start+0x82>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007580:	e013      	b.n	80075aa <HAL_TIM_PWM_Start+0xaa>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d104      	bne.n	8007592 <HAL_TIM_PWM_Start+0x92>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007590:	e00b      	b.n	80075aa <HAL_TIM_PWM_Start+0xaa>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b08      	cmp	r3, #8
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_PWM_Start+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a0:	e003      	b.n	80075aa <HAL_TIM_PWM_Start+0xaa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fac6 	bl	8008b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2d      	ldr	r2, [pc, #180]	; (8007674 <HAL_TIM_PWM_Start+0x174>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d004      	beq.n	80075cc <HAL_TIM_PWM_Start+0xcc>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <HAL_TIM_PWM_Start+0x178>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_PWM_Start+0xd0>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <HAL_TIM_PWM_Start+0xd2>
 80075d0:	2300      	movs	r3, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a22      	ldr	r2, [pc, #136]	; (8007674 <HAL_TIM_PWM_Start+0x174>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d022      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f8:	d01d      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_TIM_PWM_Start+0x17c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d018      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <HAL_TIM_PWM_Start+0x180>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d013      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <HAL_TIM_PWM_Start+0x184>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00e      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a16      	ldr	r2, [pc, #88]	; (8007678 <HAL_TIM_PWM_Start+0x178>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d009      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <HAL_TIM_PWM_Start+0x188>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d004      	beq.n	8007636 <HAL_TIM_PWM_Start+0x136>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a16      	ldr	r2, [pc, #88]	; (800768c <HAL_TIM_PWM_Start+0x18c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d111      	bne.n	800765a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b06      	cmp	r3, #6
 8007646:	d010      	beq.n	800766a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	e007      	b.n	800766a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0201 	orr.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40010000 	.word	0x40010000
 8007678:	40010400 	.word	0x40010400
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40014000 	.word	0x40014000
 800768c:	40001800 	.word	0x40001800

08007690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e041      	b.n	8007726 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fd f920 	bl	80048fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f000 fe24 	bl	800831c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <HAL_TIM_IC_Start_IT+0x1e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800774a:	b2db      	uxtb	r3, r3
 800774c:	e013      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x46>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b04      	cmp	r3, #4
 8007752:	d104      	bne.n	800775e <HAL_TIM_IC_Start_IT+0x2e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e00b      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x46>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d104      	bne.n	800776e <HAL_TIM_IC_Start_IT+0x3e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e003      	b.n	8007776 <HAL_TIM_IC_Start_IT+0x46>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007774:	b2db      	uxtb	r3, r3
 8007776:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <HAL_TIM_IC_Start_IT+0x58>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e013      	b.n	80077b0 <HAL_TIM_IC_Start_IT+0x80>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b04      	cmp	r3, #4
 800778c:	d104      	bne.n	8007798 <HAL_TIM_IC_Start_IT+0x68>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007794:	b2db      	uxtb	r3, r3
 8007796:	e00b      	b.n	80077b0 <HAL_TIM_IC_Start_IT+0x80>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b08      	cmp	r3, #8
 800779c:	d104      	bne.n	80077a8 <HAL_TIM_IC_Start_IT+0x78>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	e003      	b.n	80077b0 <HAL_TIM_IC_Start_IT+0x80>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d102      	bne.n	80077be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80077b8:	7b7b      	ldrb	r3, [r7, #13]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d001      	beq.n	80077c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e0cc      	b.n	800795c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <HAL_TIM_IC_Start_IT+0xa2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d0:	e013      	b.n	80077fa <HAL_TIM_IC_Start_IT+0xca>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d104      	bne.n	80077e2 <HAL_TIM_IC_Start_IT+0xb2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077e0:	e00b      	b.n	80077fa <HAL_TIM_IC_Start_IT+0xca>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_IC_Start_IT+0xc2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f0:	e003      	b.n	80077fa <HAL_TIM_IC_Start_IT+0xca>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2202      	movs	r2, #2
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_TIM_IC_Start_IT+0xda>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007808:	e013      	b.n	8007832 <HAL_TIM_IC_Start_IT+0x102>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d104      	bne.n	800781a <HAL_TIM_IC_Start_IT+0xea>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007818:	e00b      	b.n	8007832 <HAL_TIM_IC_Start_IT+0x102>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d104      	bne.n	800782a <HAL_TIM_IC_Start_IT+0xfa>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007828:	e003      	b.n	8007832 <HAL_TIM_IC_Start_IT+0x102>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b0c      	cmp	r3, #12
 8007836:	d841      	bhi.n	80078bc <HAL_TIM_IC_Start_IT+0x18c>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <HAL_TIM_IC_Start_IT+0x110>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007875 	.word	0x08007875
 8007844:	080078bd 	.word	0x080078bd
 8007848:	080078bd 	.word	0x080078bd
 800784c:	080078bd 	.word	0x080078bd
 8007850:	08007887 	.word	0x08007887
 8007854:	080078bd 	.word	0x080078bd
 8007858:	080078bd 	.word	0x080078bd
 800785c:	080078bd 	.word	0x080078bd
 8007860:	08007899 	.word	0x08007899
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078bd 	.word	0x080078bd
 800786c:	080078bd 	.word	0x080078bd
 8007870:	080078ab 	.word	0x080078ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0202 	orr.w	r2, r2, #2
 8007882:	60da      	str	r2, [r3, #12]
      break;
 8007884:	e01d      	b.n	80078c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f042 0204 	orr.w	r2, r2, #4
 8007894:	60da      	str	r2, [r3, #12]
      break;
 8007896:	e014      	b.n	80078c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0208 	orr.w	r2, r2, #8
 80078a6:	60da      	str	r2, [r3, #12]
      break;
 80078a8:	e00b      	b.n	80078c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0210 	orr.w	r2, r2, #16
 80078b8:	60da      	str	r2, [r3, #12]
      break;
 80078ba:	e002      	b.n	80078c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d148      	bne.n	800795a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2201      	movs	r2, #1
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f937 	bl	8008b44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a22      	ldr	r2, [pc, #136]	; (8007964 <HAL_TIM_IC_Start_IT+0x234>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d022      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e8:	d01d      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <HAL_TIM_IC_Start_IT+0x238>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d018      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <HAL_TIM_IC_Start_IT+0x23c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <HAL_TIM_IC_Start_IT+0x240>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00e      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a19      	ldr	r2, [pc, #100]	; (8007974 <HAL_TIM_IC_Start_IT+0x244>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d009      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a18      	ldr	r2, [pc, #96]	; (8007978 <HAL_TIM_IC_Start_IT+0x248>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <HAL_TIM_IC_Start_IT+0x1f6>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a16      	ldr	r2, [pc, #88]	; (800797c <HAL_TIM_IC_Start_IT+0x24c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d111      	bne.n	800794a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b06      	cmp	r3, #6
 8007936:	d010      	beq.n	800795a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007948:	e007      	b.n	800795a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40010000 	.word	0x40010000
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800
 8007970:	40000c00 	.word	0x40000c00
 8007974:	40010400 	.word	0x40010400
 8007978:	40014000 	.word	0x40014000
 800797c:	40001800 	.word	0x40001800

08007980 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e097      	b.n	8007ac4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fc ff0d 	bl	80047c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f000 fca1 	bl	800831c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	4313      	orrs	r3, r2
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a20:	f023 030c 	bic.w	r3, r3, #12
 8007a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	011a      	lsls	r2, r3, #4
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	031b      	lsls	r3, r3, #12
 8007a50:	4313      	orrs	r3, r2
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4313      	orrs	r3, r2
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007adc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ae4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007af4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d110      	bne.n	8007b1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d102      	bne.n	8007b08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b02:	7b7b      	ldrb	r3, [r7, #13]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d001      	beq.n	8007b0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e069      	b.n	8007be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b1c:	e031      	b.n	8007b82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d110      	bne.n	8007b46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d102      	bne.n	8007b30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b2a:	7b3b      	ldrb	r3, [r7, #12]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d001      	beq.n	8007b34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e055      	b.n	8007be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b44:	e01d      	b.n	8007b82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d108      	bne.n	8007b5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d105      	bne.n	8007b5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b52:	7b7b      	ldrb	r3, [r7, #13]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d102      	bne.n	8007b5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b58:	7b3b      	ldrb	r3, [r7, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d001      	beq.n	8007b62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e03e      	b.n	8007be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_TIM_Encoder_Start+0xc4>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d008      	beq.n	8007ba0 <HAL_TIM_Encoder_Start+0xd4>
 8007b8e:	e00f      	b.n	8007bb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2201      	movs	r2, #1
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 ffd3 	bl	8008b44 <TIM_CCxChannelCmd>
      break;
 8007b9e:	e016      	b.n	8007bce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 ffcb 	bl	8008b44 <TIM_CCxChannelCmd>
      break;
 8007bae:	e00e      	b.n	8007bce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 ffc3 	bl	8008b44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 ffbc 	bl	8008b44 <TIM_CCxChannelCmd>
      break;
 8007bcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0202 	mvn.w	r2, #2
 8007c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7f9 fd60 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fb54 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fb5b 	bl	80082f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0204 	mvn.w	r2, #4
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7f9 fd36 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb2a 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb31 	bl	80082f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0208 	mvn.w	r2, #8
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7f9 fd0c 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb00 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb07 	bl	80082f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d122      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d11b      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0210 	mvn.w	r2, #16
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2208      	movs	r2, #8
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 fce2 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007d2c:	e005      	b.n	8007d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fad6 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fadd 	bl	80082f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10e      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d107      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0201 	mvn.w	r2, #1
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fab0 	bl	80082cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d10e      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b80      	cmp	r3, #128	; 0x80
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 ffd4 	bl	8008d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d10e      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 faa2 	bl	8008308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d10e      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d107      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0220 	mvn.w	r2, #32
 8007de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 ff9e 	bl	8008d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e088      	b.n	8007f28 <HAL_TIM_IC_ConfigChannel+0x130>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11b      	bne.n	8007e5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f000 fcc2 	bl	80087bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 020c 	bic.w	r2, r2, #12
 8007e46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6999      	ldr	r1, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	619a      	str	r2, [r3, #24]
 8007e5a:	e060      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d11c      	bne.n	8007e9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6819      	ldr	r1, [r3, #0]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f000 fd46 	bl	8008902 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699a      	ldr	r2, [r3, #24]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6999      	ldr	r1, [r3, #24]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	021a      	lsls	r2, r3, #8
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	619a      	str	r2, [r3, #24]
 8007e9a:	e040      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d11b      	bne.n	8007eda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6819      	ldr	r1, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f000 fd93 	bl	80089dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 020c 	bic.w	r2, r2, #12
 8007ec4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69d9      	ldr	r1, [r3, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	61da      	str	r2, [r3, #28]
 8007ed8:	e021      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d11c      	bne.n	8007f1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f000 fdb0 	bl	8008a54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69da      	ldr	r2, [r3, #28]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69d9      	ldr	r1, [r3, #28]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021a      	lsls	r2, r3, #8
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	61da      	str	r2, [r3, #28]
 8007f18:	e001      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e0ae      	b.n	80080ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b0c      	cmp	r3, #12
 8007f5a:	f200 809f 	bhi.w	800809c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	0800809d 	.word	0x0800809d
 8007f6c:	0800809d 	.word	0x0800809d
 8007f70:	0800809d 	.word	0x0800809d
 8007f74:	08007fd9 	.word	0x08007fd9
 8007f78:	0800809d 	.word	0x0800809d
 8007f7c:	0800809d 	.word	0x0800809d
 8007f80:	0800809d 	.word	0x0800809d
 8007f84:	0800801b 	.word	0x0800801b
 8007f88:	0800809d 	.word	0x0800809d
 8007f8c:	0800809d 	.word	0x0800809d
 8007f90:	0800809d 	.word	0x0800809d
 8007f94:	0800805b 	.word	0x0800805b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fa5c 	bl	800845c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0208 	orr.w	r2, r2, #8
 8007fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699a      	ldr	r2, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0204 	bic.w	r2, r2, #4
 8007fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6999      	ldr	r1, [r3, #24]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	619a      	str	r2, [r3, #24]
      break;
 8007fd6:	e064      	b.n	80080a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 faac 	bl	800853c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6999      	ldr	r1, [r3, #24]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	619a      	str	r2, [r3, #24]
      break;
 8008018:	e043      	b.n	80080a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fb01 	bl	8008628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0208 	orr.w	r2, r2, #8
 8008034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69da      	ldr	r2, [r3, #28]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0204 	bic.w	r2, r2, #4
 8008044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69d9      	ldr	r1, [r3, #28]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	61da      	str	r2, [r3, #28]
      break;
 8008058:	e023      	b.n	80080a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fb55 	bl	8008710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69d9      	ldr	r1, [r3, #28]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	021a      	lsls	r2, r3, #8
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	61da      	str	r2, [r3, #28]
      break;
 800809a:	e002      	b.n	80080a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	75fb      	strb	r3, [r7, #23]
      break;
 80080a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_TIM_ConfigClockSource+0x1c>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e0b4      	b.n	800823a <HAL_TIM_ConfigClockSource+0x186>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008108:	d03e      	beq.n	8008188 <HAL_TIM_ConfigClockSource+0xd4>
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	f200 8087 	bhi.w	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008116:	f000 8086 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x172>
 800811a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811e:	d87f      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008120:	2b70      	cmp	r3, #112	; 0x70
 8008122:	d01a      	beq.n	800815a <HAL_TIM_ConfigClockSource+0xa6>
 8008124:	2b70      	cmp	r3, #112	; 0x70
 8008126:	d87b      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008128:	2b60      	cmp	r3, #96	; 0x60
 800812a:	d050      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0x11a>
 800812c:	2b60      	cmp	r3, #96	; 0x60
 800812e:	d877      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008130:	2b50      	cmp	r3, #80	; 0x50
 8008132:	d03c      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0xfa>
 8008134:	2b50      	cmp	r3, #80	; 0x50
 8008136:	d873      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008138:	2b40      	cmp	r3, #64	; 0x40
 800813a:	d058      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x13a>
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d86f      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008140:	2b30      	cmp	r3, #48	; 0x30
 8008142:	d064      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x15a>
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	d86b      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008148:	2b20      	cmp	r3, #32
 800814a:	d060      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x15a>
 800814c:	2b20      	cmp	r3, #32
 800814e:	d867      	bhi.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d05c      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x15a>
 8008154:	2b10      	cmp	r3, #16
 8008156:	d05a      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x15a>
 8008158:	e062      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f000 fccb 	bl	8008b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800817c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
      break;
 8008186:	e04f      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6899      	ldr	r1, [r3, #8]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f000 fcb4 	bl	8008b04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081aa:	609a      	str	r2, [r3, #8]
      break;
 80081ac:	e03c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	461a      	mov	r2, r3
 80081bc:	f000 fb72 	bl	80088a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2150      	movs	r1, #80	; 0x50
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc81 	bl	8008ace <TIM_ITRx_SetConfig>
      break;
 80081cc:	e02c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	461a      	mov	r2, r3
 80081dc:	f000 fbce 	bl	800897c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2160      	movs	r1, #96	; 0x60
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fc71 	bl	8008ace <TIM_ITRx_SetConfig>
      break;
 80081ec:	e01c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 fb52 	bl	80088a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fc61 	bl	8008ace <TIM_ITRx_SetConfig>
      break;
 800820c:	e00c      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f000 fc58 	bl	8008ace <TIM_ITRx_SetConfig>
      break;
 800821e:	e003      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
      break;
 8008224:	e000      	b.n	8008228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b0c      	cmp	r3, #12
 8008256:	d831      	bhi.n	80082bc <HAL_TIM_ReadCapturedValue+0x78>
 8008258:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <HAL_TIM_ReadCapturedValue+0x1c>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	08008295 	.word	0x08008295
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082bd 	.word	0x080082bd
 800826c:	080082bd 	.word	0x080082bd
 8008270:	0800829f 	.word	0x0800829f
 8008274:	080082bd 	.word	0x080082bd
 8008278:	080082bd 	.word	0x080082bd
 800827c:	080082bd 	.word	0x080082bd
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082bd 	.word	0x080082bd
 8008288:	080082bd 	.word	0x080082bd
 800828c:	080082bd 	.word	0x080082bd
 8008290:	080082b3 	.word	0x080082b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829a:	60fb      	str	r3, [r7, #12]

      break;
 800829c:	e00f      	b.n	80082be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	60fb      	str	r3, [r7, #12]

      break;
 80082a6:	e00a      	b.n	80082be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ae:	60fb      	str	r3, [r7, #12]

      break;
 80082b0:	e005      	b.n	80082be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	60fb      	str	r3, [r7, #12]

      break;
 80082ba:	e000      	b.n	80082be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80082bc:	bf00      	nop
  }

  return tmpreg;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a40      	ldr	r2, [pc, #256]	; (8008430 <TIM_Base_SetConfig+0x114>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d013      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833a:	d00f      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3d      	ldr	r2, [pc, #244]	; (8008434 <TIM_Base_SetConfig+0x118>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00b      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a3c      	ldr	r2, [pc, #240]	; (8008438 <TIM_Base_SetConfig+0x11c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a3b      	ldr	r2, [pc, #236]	; (800843c <TIM_Base_SetConfig+0x120>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a3a      	ldr	r2, [pc, #232]	; (8008440 <TIM_Base_SetConfig+0x124>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d108      	bne.n	800836e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2f      	ldr	r2, [pc, #188]	; (8008430 <TIM_Base_SetConfig+0x114>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d02b      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837c:	d027      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2c      	ldr	r2, [pc, #176]	; (8008434 <TIM_Base_SetConfig+0x118>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d023      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2b      	ldr	r2, [pc, #172]	; (8008438 <TIM_Base_SetConfig+0x11c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01f      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2a      	ldr	r2, [pc, #168]	; (800843c <TIM_Base_SetConfig+0x120>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01b      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a29      	ldr	r2, [pc, #164]	; (8008440 <TIM_Base_SetConfig+0x124>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d017      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a28      	ldr	r2, [pc, #160]	; (8008444 <TIM_Base_SetConfig+0x128>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a27      	ldr	r2, [pc, #156]	; (8008448 <TIM_Base_SetConfig+0x12c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00f      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a26      	ldr	r2, [pc, #152]	; (800844c <TIM_Base_SetConfig+0x130>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00b      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a25      	ldr	r2, [pc, #148]	; (8008450 <TIM_Base_SetConfig+0x134>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d007      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a24      	ldr	r2, [pc, #144]	; (8008454 <TIM_Base_SetConfig+0x138>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d003      	beq.n	80083ce <TIM_Base_SetConfig+0xb2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a23      	ldr	r2, [pc, #140]	; (8008458 <TIM_Base_SetConfig+0x13c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d108      	bne.n	80083e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689a      	ldr	r2, [r3, #8]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <TIM_Base_SetConfig+0x114>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0xf8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a0c      	ldr	r2, [pc, #48]	; (8008440 <TIM_Base_SetConfig+0x124>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d103      	bne.n	800841c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	615a      	str	r2, [r3, #20]
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40010000 	.word	0x40010000
 8008434:	40000400 	.word	0x40000400
 8008438:	40000800 	.word	0x40000800
 800843c:	40000c00 	.word	0x40000c00
 8008440:	40010400 	.word	0x40010400
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400
 800844c:	40014800 	.word	0x40014800
 8008450:	40001800 	.word	0x40001800
 8008454:	40001c00 	.word	0x40001c00
 8008458:	40002000 	.word	0x40002000

0800845c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f023 0302 	bic.w	r3, r3, #2
 80084a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a20      	ldr	r2, [pc, #128]	; (8008534 <TIM_OC1_SetConfig+0xd8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC1_SetConfig+0x64>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1f      	ldr	r2, [pc, #124]	; (8008538 <TIM_OC1_SetConfig+0xdc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10c      	bne.n	80084da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f023 0308 	bic.w	r3, r3, #8
 80084c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f023 0304 	bic.w	r3, r3, #4
 80084d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a15      	ldr	r2, [pc, #84]	; (8008534 <TIM_OC1_SetConfig+0xd8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d003      	beq.n	80084ea <TIM_OC1_SetConfig+0x8e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a14      	ldr	r2, [pc, #80]	; (8008538 <TIM_OC1_SetConfig+0xdc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d111      	bne.n	800850e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	621a      	str	r2, [r3, #32]
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	40010000 	.word	0x40010000
 8008538:	40010400 	.word	0x40010400

0800853c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0210 	bic.w	r2, r3, #16
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 0320 	bic.w	r3, r3, #32
 8008586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a22      	ldr	r2, [pc, #136]	; (8008620 <TIM_OC2_SetConfig+0xe4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC2_SetConfig+0x68>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a21      	ldr	r2, [pc, #132]	; (8008624 <TIM_OC2_SetConfig+0xe8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d10d      	bne.n	80085c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a17      	ldr	r2, [pc, #92]	; (8008620 <TIM_OC2_SetConfig+0xe4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC2_SetConfig+0x94>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a16      	ldr	r2, [pc, #88]	; (8008624 <TIM_OC2_SetConfig+0xe8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d113      	bne.n	80085f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400

08008628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a21      	ldr	r2, [pc, #132]	; (8008708 <TIM_OC3_SetConfig+0xe0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d003      	beq.n	800868e <TIM_OC3_SetConfig+0x66>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a20      	ldr	r2, [pc, #128]	; (800870c <TIM_OC3_SetConfig+0xe4>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d10d      	bne.n	80086aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a16      	ldr	r2, [pc, #88]	; (8008708 <TIM_OC3_SetConfig+0xe0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_OC3_SetConfig+0x92>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <TIM_OC3_SetConfig+0xe4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d113      	bne.n	80086e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	621a      	str	r2, [r3, #32]
}
 80086fc:	bf00      	nop
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40010000 	.word	0x40010000
 800870c:	40010400 	.word	0x40010400

08008710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800875a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	031b      	lsls	r3, r3, #12
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <TIM_OC4_SetConfig+0xa4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_OC4_SetConfig+0x68>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <TIM_OC4_SetConfig+0xa8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d109      	bne.n	800878c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800877e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	019b      	lsls	r3, r3, #6
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	621a      	str	r2, [r3, #32]
}
 80087a6:	bf00      	nop
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40010400 	.word	0x40010400

080087bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f023 0201 	bic.w	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <TIM_TI1_SetConfig+0xcc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01b      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f0:	d017      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a25      	ldr	r2, [pc, #148]	; (800888c <TIM_TI1_SetConfig+0xd0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4a24      	ldr	r2, [pc, #144]	; (8008890 <TIM_TI1_SetConfig+0xd4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a23      	ldr	r2, [pc, #140]	; (8008894 <TIM_TI1_SetConfig+0xd8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4a22      	ldr	r2, [pc, #136]	; (8008898 <TIM_TI1_SetConfig+0xdc>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4a21      	ldr	r2, [pc, #132]	; (800889c <TIM_TI1_SetConfig+0xe0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_TI1_SetConfig+0x66>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <TIM_TI1_SetConfig+0xe4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d101      	bne.n	8008826 <TIM_TI1_SetConfig+0x6a>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <TIM_TI1_SetConfig+0x6c>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d008      	beq.n	800883e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e003      	b.n	8008846 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f043 0301 	orr.w	r3, r3, #1
 8008844:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800884c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	b2db      	uxtb	r3, r3
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f023 030a 	bic.w	r3, r3, #10
 8008860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f003 030a 	and.w	r3, r3, #10
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40010400 	.word	0x40010400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40001800 	.word	0x40001800

080088a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f023 0201 	bic.w	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f023 030a 	bic.w	r3, r3, #10
 80088e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008902:	b480      	push	{r7}
 8008904:	b087      	sub	sp, #28
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f023 0210 	bic.w	r2, r3, #16
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800892e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	b29b      	uxth	r3, r3
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008954:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	621a      	str	r2, [r3, #32]
}
 8008970:	bf00      	nop
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	f023 0210 	bic.w	r2, r3, #16
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	031b      	lsls	r3, r3, #12
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	621a      	str	r2, [r3, #32]
}
 80089d0:	bf00      	nop
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f023 0303 	bic.w	r3, r3, #3
 8008a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	621a      	str	r2, [r3, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	031b      	lsls	r3, r3, #12
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	031b      	lsls	r3, r3, #12
 8008aac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f043 0307 	orr.w	r3, r3, #7
 8008af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	609a      	str	r2, [r3, #8]
}
 8008af8:	bf00      	nop
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	021a      	lsls	r2, r3, #8
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	609a      	str	r2, [r3, #8]
}
 8008b38:	bf00      	nop
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2201      	movs	r2, #1
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a1a      	ldr	r2, [r3, #32]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	401a      	ands	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d101      	bne.n	8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e05a      	b.n	8008c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a21      	ldr	r2, [pc, #132]	; (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d022      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf4:	d01d      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a1d      	ldr	r2, [pc, #116]	; (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d018      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a1b      	ldr	r2, [pc, #108]	; (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00e      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d009      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d004      	beq.n	8008c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a15      	ldr	r2, [pc, #84]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d10c      	bne.n	8008c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40010000 	.word	0x40010000
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40000c00 	.word	0x40000c00
 8008c7c:	40010400 	.word	0x40010400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40001800 	.word	0x40001800

08008c88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e03d      	b.n	8008d20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e03f      	b.n	8008de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7fb fe0e 	bl	800499c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2224      	movs	r2, #36	; 0x24
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 ff6f 	bl	8009c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b08a      	sub	sp, #40	; 0x28
 8008df2:	af02      	add	r7, sp, #8
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	603b      	str	r3, [r7, #0]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d17c      	bne.n	8008f08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <HAL_UART_Transmit+0x2c>
 8008e14:	88fb      	ldrh	r3, [r7, #6]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e075      	b.n	8008f0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d101      	bne.n	8008e2c <HAL_UART_Transmit+0x3e>
 8008e28:	2302      	movs	r3, #2
 8008e2a:	e06e      	b.n	8008f0a <HAL_UART_Transmit+0x11c>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2221      	movs	r2, #33	; 0x21
 8008e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e42:	f7fb ff49 	bl	8004cd8 <HAL_GetTick>
 8008e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	88fa      	ldrh	r2, [r7, #6]
 8008e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5c:	d108      	bne.n	8008e70 <HAL_UART_Transmit+0x82>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e003      	b.n	8008e78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008e80:	e02a      	b.n	8008ed8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2180      	movs	r1, #128	; 0x80
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fc2b 	bl	80096e8 <UART_WaitOnFlagUntilTimeout>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e036      	b.n	8008f0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	e007      	b.n	8008eca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1cf      	bne.n	8008e82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2140      	movs	r1, #64	; 0x40
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fbfb 	bl	80096e8 <UART_WaitOnFlagUntilTimeout>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e006      	b.n	8008f0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e000      	b.n	8008f0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008f08:	2302      	movs	r3, #2
  }
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d11d      	bne.n	8008f68 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_UART_Receive_DMA+0x26>
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e016      	b.n	8008f6a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_UART_Receive_DMA+0x38>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e00f      	b.n	8008f6a <HAL_UART_Receive_DMA+0x58>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 fc30 	bl	80097c4 <UART_Start_Receive_DMA>
 8008f64:	4603      	mov	r3, r0
 8008f66:	e000      	b.n	8008f6a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f68:	2302      	movs	r3, #2
  }
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
	...

08008f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b0ba      	sub	sp, #232	; 0xe8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10f      	bne.n	8008fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <HAL_UART_IRQHandler+0x66>
 8008fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fd97 	bl	8009b06 <UART_Receive_IT>
      return;
 8008fd8:	e256      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80de 	beq.w	80091a0 <HAL_UART_IRQHandler+0x22c>
 8008fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d106      	bne.n	8008ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80d1 	beq.w	80091a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <HAL_UART_IRQHandler+0xae>
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f043 0201 	orr.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <HAL_UART_IRQHandler+0xd2>
 800902e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f043 0202 	orr.w	r2, r3, #2
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <HAL_UART_IRQHandler+0xf6>
 8009052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d005      	beq.n	800906a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f043 0204 	orr.w	r2, r3, #4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800906a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <HAL_UART_IRQHandler+0x126>
 8009076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f043 0208 	orr.w	r2, r3, #8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 81ed 	beq.w	800947e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_UART_IRQHandler+0x14e>
 80090b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fd22 	bl	8009b06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	bf0c      	ite	eq
 80090d0:	2301      	moveq	r3, #1
 80090d2:	2300      	movne	r3, #0
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f003 0308 	and.w	r3, r3, #8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <HAL_UART_IRQHandler+0x17a>
 80090e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04f      	beq.n	800918e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc2a 	bl	8009948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d141      	bne.n	8009186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3314      	adds	r3, #20
 8009108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800911c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3314      	adds	r3, #20
 800912a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800912e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800913a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1d9      	bne.n	8009102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	2b00      	cmp	r3, #0
 8009154:	d013      	beq.n	800917e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	4a7d      	ldr	r2, [pc, #500]	; (8009350 <HAL_UART_IRQHandler+0x3dc>)
 800915c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	4618      	mov	r0, r3
 8009164:	f7fc f870 	bl	8005248 <HAL_DMA_Abort_IT>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d016      	beq.n	800919c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917c:	e00e      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9a4 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009184:	e00a      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9a0 	bl	80094cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	e006      	b.n	800919c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f99c 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800919a:	e170      	b.n	800947e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800919c:	bf00      	nop
    return;
 800919e:	e16e      	b.n	800947e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	f040 814a 	bne.w	800943e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8143 	beq.w	800943e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 813c 	beq.w	800943e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	60bb      	str	r3, [r7, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	f040 80b4 	bne.w	8009354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8140 	beq.w	8009482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800920a:	429a      	cmp	r2, r3
 800920c:	f080 8139 	bcs.w	8009482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009222:	f000 8088 	beq.w	8009336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	330c      	adds	r3, #12
 800922c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800923c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800925e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800926a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1d9      	bne.n	8009226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3314      	adds	r3, #20
 8009278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3314      	adds	r3, #20
 8009292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800929a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800929e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e1      	bne.n	8009272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3314      	adds	r3, #20
 80092ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e3      	bne.n	80092ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009306:	f023 0310 	bic.w	r3, r3, #16
 800930a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009318:	65ba      	str	r2, [r7, #88]	; 0x58
 800931a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800931e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009320:	e841 2300 	strex	r3, r2, [r1]
 8009324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e3      	bne.n	80092f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	4618      	mov	r0, r3
 8009332:	f7fb ff19 	bl	8005168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800933e:	b29b      	uxth	r3, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8ca 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800934c:	e099      	b.n	8009482 <HAL_UART_IRQHandler+0x50e>
 800934e:	bf00      	nop
 8009350:	08009a0f 	.word	0x08009a0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800935c:	b29b      	uxth	r3, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 808b 	beq.w	8009486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8086 	beq.w	8009486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	330c      	adds	r3, #12
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800938a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800939e:	647a      	str	r2, [r7, #68]	; 0x44
 80093a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e3      	bne.n	800937a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	623b      	str	r3, [r7, #32]
   return(result);
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093d6:	633a      	str	r2, [r7, #48]	; 0x30
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e3      	bne.n	80093b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60fb      	str	r3, [r7, #12]
   return(result);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800941c:	61fa      	str	r2, [r7, #28]
 800941e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	69b9      	ldr	r1, [r7, #24]
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	617b      	str	r3, [r7, #20]
   return(result);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e3      	bne.n	80093f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f852 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800943c:	e023      	b.n	8009486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <HAL_UART_IRQHandler+0x4ea>
 800944a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800944e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 faed 	bl	8009a36 <UART_Transmit_IT>
    return;
 800945c:	e014      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <HAL_UART_IRQHandler+0x514>
 800946a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fb2d 	bl	8009ad6 <UART_EndTransmit_IT>
    return;
 800947c:	e004      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
    return;
 800947e:	bf00      	nop
 8009480:	e002      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
      return;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <HAL_UART_IRQHandler+0x514>
      return;
 8009486:	bf00      	nop
  }
}
 8009488:	37e8      	adds	r7, #232	; 0xe8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop

08009490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b09c      	sub	sp, #112	; 0x70
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d172      	bne.n	80095fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009516:	2200      	movs	r2, #0
 8009518:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800951a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	330c      	adds	r3, #12
 8009520:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800952a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800952c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009530:	66bb      	str	r3, [r7, #104]	; 0x68
 8009532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	330c      	adds	r3, #12
 8009538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800953a:	65ba      	str	r2, [r7, #88]	; 0x58
 800953c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e5      	bne.n	800951a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3314      	adds	r3, #20
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	667b      	str	r3, [r7, #100]	; 0x64
 8009566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3314      	adds	r3, #20
 800956c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800956e:	647a      	str	r2, [r7, #68]	; 0x44
 8009570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800957c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e5      	bne.n	800954e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3314      	adds	r3, #20
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	623b      	str	r3, [r7, #32]
   return(result);
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009598:	663b      	str	r3, [r7, #96]	; 0x60
 800959a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3314      	adds	r3, #20
 80095a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095a2:	633a      	str	r2, [r7, #48]	; 0x30
 80095a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e5      	bne.n	8009582 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d119      	bne.n	80095fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330c      	adds	r3, #12
 80095cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f023 0310 	bic.w	r3, r3, #16
 80095dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e6:	61fa      	str	r2, [r7, #28]
 80095e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	69b9      	ldr	r1, [r7, #24]
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	617b      	str	r3, [r7, #20]
   return(result);
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e5      	bne.n	80095c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d106      	bne.n	8009610 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009606:	4619      	mov	r1, r3
 8009608:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800960a:	f7ff ff69 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800960e:	e002      	b.n	8009616 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009610:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009612:	f7ff ff47 	bl	80094a4 <HAL_UART_RxCpltCallback>
}
 8009616:	bf00      	nop
 8009618:	3770      	adds	r7, #112	; 0x70
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009630:	2b01      	cmp	r3, #1
 8009632:	d108      	bne.n	8009646 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	4619      	mov	r1, r3
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff ff4e 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009644:	e002      	b.n	800964c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff ff36 	bl	80094b8 <HAL_UART_RxHalfCpltCallback>
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	bf0c      	ite	eq
 8009674:	2301      	moveq	r3, #1
 8009676:	2300      	movne	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b21      	cmp	r3, #33	; 0x21
 8009686:	d108      	bne.n	800969a <UART_DMAError+0x46>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009694:	68b8      	ldr	r0, [r7, #8]
 8009696:	f000 f92f 	bl	80098f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b40      	cmp	r3, #64	; 0x40
 80096a6:	bf0c      	ite	eq
 80096a8:	2301      	moveq	r3, #1
 80096aa:	2300      	movne	r3, #0
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b22      	cmp	r3, #34	; 0x22
 80096ba:	d108      	bne.n	80096ce <UART_DMAError+0x7a>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2200      	movs	r2, #0
 80096c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80096c8:	68b8      	ldr	r0, [r7, #8]
 80096ca:	f000 f93d 	bl	8009948 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	f043 0210 	orr.w	r2, r3, #16
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096da:	68b8      	ldr	r0, [r7, #8]
 80096dc:	f7ff fef6 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b090      	sub	sp, #64	; 0x40
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	4613      	mov	r3, r2
 80096f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f8:	e050      	b.n	800979c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d04c      	beq.n	800979c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <UART_WaitOnFlagUntilTimeout+0x30>
 8009708:	f7fb fae6 	bl	8004cd8 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009714:	429a      	cmp	r2, r3
 8009716:	d241      	bcs.n	800979c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800972e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009738:	637a      	str	r2, [r7, #52]	; 0x34
 800973a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800973e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	613b      	str	r3, [r7, #16]
   return(result);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800976c:	623a      	str	r2, [r7, #32]
 800976e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	69f9      	ldr	r1, [r7, #28]
 8009772:	6a3a      	ldr	r2, [r7, #32]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	61bb      	str	r3, [r7, #24]
   return(result);
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e00f      	b.n	80097bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4013      	ands	r3, r2
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	bf0c      	ite	eq
 80097ac:	2301      	moveq	r3, #1
 80097ae:	2300      	movne	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d09f      	beq.n	80096fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3740      	adds	r7, #64	; 0x40
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b098      	sub	sp, #96	; 0x60
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	88fa      	ldrh	r2, [r7, #6]
 80097dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2222      	movs	r2, #34	; 0x22
 80097e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	4a3e      	ldr	r2, [pc, #248]	; (80098ec <UART_Start_Receive_DMA+0x128>)
 80097f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	4a3d      	ldr	r2, [pc, #244]	; (80098f0 <UART_Start_Receive_DMA+0x12c>)
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	4a3c      	ldr	r2, [pc, #240]	; (80098f4 <UART_Start_Receive_DMA+0x130>)
 8009802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	2200      	movs	r2, #0
 800980a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	88fb      	ldrh	r3, [r7, #6]
 8009824:	f7fb fc48 	bl	80050b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800985c:	65bb      	str	r3, [r7, #88]	; 0x58
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	330c      	adds	r3, #12
 8009864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009866:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009868:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800986c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3314      	adds	r3, #20
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	f043 0301 	orr.w	r3, r3, #1
 8009890:	657b      	str	r3, [r7, #84]	; 0x54
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800989a:	63ba      	str	r2, [r7, #56]	; 0x38
 800989c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3314      	adds	r3, #20
 80098b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	617b      	str	r3, [r7, #20]
   return(result);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	653b      	str	r3, [r7, #80]	; 0x50
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3314      	adds	r3, #20
 80098cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098ce:	627a      	str	r2, [r7, #36]	; 0x24
 80098d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6a39      	ldr	r1, [r7, #32]
 80098d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	61fb      	str	r3, [r7, #28]
   return(result);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3760      	adds	r7, #96	; 0x60
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	080094f9 	.word	0x080094f9
 80098f0:	0800961f 	.word	0x0800961f
 80098f4:	08009655 	.word	0x08009655

080098f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b089      	sub	sp, #36	; 0x24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	61ba      	str	r2, [r7, #24]
 8009922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6979      	ldr	r1, [r7, #20]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	613b      	str	r3, [r7, #16]
   return(result);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e5      	bne.n	8009900 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800993c:	bf00      	nop
 800993e:	3724      	adds	r7, #36	; 0x24
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b095      	sub	sp, #84	; 0x54
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009970:	643a      	str	r2, [r7, #64]	; 0x40
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e5      	bne.n	8009950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3314      	adds	r3, #20
 800998a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	61fb      	str	r3, [r7, #28]
   return(result);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	64bb      	str	r3, [r7, #72]	; 0x48
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3314      	adds	r3, #20
 80099a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e5      	bne.n	8009984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d119      	bne.n	80099f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f023 0310 	bic.w	r3, r3, #16
 80099d6:	647b      	str	r3, [r7, #68]	; 0x44
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099e0:	61ba      	str	r2, [r7, #24]
 80099e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6979      	ldr	r1, [r7, #20]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	613b      	str	r3, [r7, #16]
   return(result);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e5      	bne.n	80099c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a02:	bf00      	nop
 8009a04:	3754      	adds	r7, #84	; 0x54
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fd4f 	bl	80094cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b21      	cmp	r3, #33	; 0x21
 8009a48:	d13e      	bne.n	8009ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a52:	d114      	bne.n	8009a7e <UART_Transmit_IT+0x48>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d110      	bne.n	8009a7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	1c9a      	adds	r2, r3, #2
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	621a      	str	r2, [r3, #32]
 8009a7c:	e008      	b.n	8009a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	1c59      	adds	r1, r3, #1
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6211      	str	r1, [r2, #32]
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e000      	b.n	8009aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ac8:	2302      	movs	r3, #2
  }
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fcca 	bl	8009490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b08c      	sub	sp, #48	; 0x30
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b22      	cmp	r3, #34	; 0x22
 8009b18:	f040 80ab 	bne.w	8009c72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b24:	d117      	bne.n	8009b56 <UART_Receive_IT+0x50>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d113      	bne.n	8009b56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	1c9a      	adds	r2, r3, #2
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
 8009b54:	e026      	b.n	8009ba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d007      	beq.n	8009b7a <UART_Receive_IT+0x74>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <UART_Receive_IT+0x82>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	e008      	b.n	8009b9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d15a      	bne.n	8009c6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0220 	bic.w	r2, r2, #32
 8009bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695a      	ldr	r2, [r3, #20]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0201 	bic.w	r2, r2, #1
 8009be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d135      	bne.n	8009c64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f023 0310 	bic.w	r3, r3, #16
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1e:	623a      	str	r2, [r7, #32]
 8009c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	69f9      	ldr	r1, [r7, #28]
 8009c24:	6a3a      	ldr	r2, [r7, #32]
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e5      	bne.n	8009bfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b10      	cmp	r3, #16
 8009c3e:	d10a      	bne.n	8009c56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff fc3f 	bl	80094e0 <HAL_UARTEx_RxEventCallback>
 8009c62:	e002      	b.n	8009c6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff fc1d 	bl	80094a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e002      	b.n	8009c74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e000      	b.n	8009c74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c72:	2302      	movs	r3, #2
  }
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3730      	adds	r7, #48	; 0x30
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c80:	b0c0      	sub	sp, #256	; 0x100
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c98:	68d9      	ldr	r1, [r3, #12]
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	ea40 0301 	orr.w	r3, r0, r1
 8009ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cd4:	f021 010c 	bic.w	r1, r1, #12
 8009cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf6:	6999      	ldr	r1, [r3, #24]
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	ea40 0301 	orr.w	r3, r0, r1
 8009d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b8f      	ldr	r3, [pc, #572]	; (8009f48 <UART_SetConfig+0x2cc>)
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d005      	beq.n	8009d1c <UART_SetConfig+0xa0>
 8009d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b8d      	ldr	r3, [pc, #564]	; (8009f4c <UART_SetConfig+0x2d0>)
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d104      	bne.n	8009d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d1c:	f7fd fb34 	bl	8007388 <HAL_RCC_GetPCLK2Freq>
 8009d20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009d24:	e003      	b.n	8009d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d26:	f7fd fb1b 	bl	8007360 <HAL_RCC_GetPCLK1Freq>
 8009d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d38:	f040 810c 	bne.w	8009f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	1891      	adds	r1, r2, r2
 8009d54:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d56:	415b      	adcs	r3, r3
 8009d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d5e:	4621      	mov	r1, r4
 8009d60:	eb12 0801 	adds.w	r8, r2, r1
 8009d64:	4629      	mov	r1, r5
 8009d66:	eb43 0901 	adc.w	r9, r3, r1
 8009d6a:	f04f 0200 	mov.w	r2, #0
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d7e:	4690      	mov	r8, r2
 8009d80:	4699      	mov	r9, r3
 8009d82:	4623      	mov	r3, r4
 8009d84:	eb18 0303 	adds.w	r3, r8, r3
 8009d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	eb49 0303 	adc.w	r3, r9, r3
 8009d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009da2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009daa:	460b      	mov	r3, r1
 8009dac:	18db      	adds	r3, r3, r3
 8009dae:	653b      	str	r3, [r7, #80]	; 0x50
 8009db0:	4613      	mov	r3, r2
 8009db2:	eb42 0303 	adc.w	r3, r2, r3
 8009db6:	657b      	str	r3, [r7, #84]	; 0x54
 8009db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009dc0:	f7f6 ff4c 	bl	8000c5c <__aeabi_uldivmod>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4b61      	ldr	r3, [pc, #388]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009dca:	fba3 2302 	umull	r2, r3, r3, r2
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	011c      	lsls	r4, r3, #4
 8009dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	1891      	adds	r1, r2, r2
 8009dea:	64b9      	str	r1, [r7, #72]	; 0x48
 8009dec:	415b      	adcs	r3, r3
 8009dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009df4:	4641      	mov	r1, r8
 8009df6:	eb12 0a01 	adds.w	sl, r2, r1
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e14:	4692      	mov	sl, r2
 8009e16:	469b      	mov	fp, r3
 8009e18:	4643      	mov	r3, r8
 8009e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e22:	464b      	mov	r3, r9
 8009e24:	eb4b 0303 	adc.w	r3, fp, r3
 8009e28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e40:	460b      	mov	r3, r1
 8009e42:	18db      	adds	r3, r3, r3
 8009e44:	643b      	str	r3, [r7, #64]	; 0x40
 8009e46:	4613      	mov	r3, r2
 8009e48:	eb42 0303 	adc.w	r3, r2, r3
 8009e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e56:	f7f6 ff01 	bl	8000c5c <__aeabi_uldivmod>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4b3b      	ldr	r3, [pc, #236]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009e62:	fba3 2301 	umull	r2, r3, r3, r1
 8009e66:	095b      	lsrs	r3, r3, #5
 8009e68:	2264      	movs	r2, #100	; 0x64
 8009e6a:	fb02 f303 	mul.w	r3, r2, r3
 8009e6e:	1acb      	subs	r3, r1, r3
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e76:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009e78:	fba3 2302 	umull	r2, r3, r3, r2
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e84:	441c      	add	r4, r3
 8009e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e98:	4642      	mov	r2, r8
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	1891      	adds	r1, r2, r2
 8009e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ea0:	415b      	adcs	r3, r3
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ea8:	4641      	mov	r1, r8
 8009eaa:	1851      	adds	r1, r2, r1
 8009eac:	6339      	str	r1, [r7, #48]	; 0x30
 8009eae:	4649      	mov	r1, r9
 8009eb0:	414b      	adcs	r3, r1
 8009eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	00cb      	lsls	r3, r1, #3
 8009ec4:	4651      	mov	r1, sl
 8009ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eca:	4651      	mov	r1, sl
 8009ecc:	00ca      	lsls	r2, r1, #3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	189b      	adds	r3, r3, r2
 8009ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009edc:	464b      	mov	r3, r9
 8009ede:	460a      	mov	r2, r1
 8009ee0:	eb42 0303 	adc.w	r3, r2, r3
 8009ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009efc:	460b      	mov	r3, r1
 8009efe:	18db      	adds	r3, r3, r3
 8009f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f02:	4613      	mov	r3, r2
 8009f04:	eb42 0303 	adc.w	r3, r2, r3
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009f12:	f7f6 fea3 	bl	8000c5c <__aeabi_uldivmod>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4b0d      	ldr	r3, [pc, #52]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	2164      	movs	r1, #100	; 0x64
 8009f24:	fb01 f303 	mul.w	r3, r1, r3
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	3332      	adds	r3, #50	; 0x32
 8009f2e:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <UART_SetConfig+0x2d4>)
 8009f30:	fba2 2303 	umull	r2, r3, r2, r3
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	f003 0207 	and.w	r2, r3, #7
 8009f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4422      	add	r2, r4
 8009f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f44:	e106      	b.n	800a154 <UART_SetConfig+0x4d8>
 8009f46:	bf00      	nop
 8009f48:	40011000 	.word	0x40011000
 8009f4c:	40011400 	.word	0x40011400
 8009f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f66:	4642      	mov	r2, r8
 8009f68:	464b      	mov	r3, r9
 8009f6a:	1891      	adds	r1, r2, r2
 8009f6c:	6239      	str	r1, [r7, #32]
 8009f6e:	415b      	adcs	r3, r3
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
 8009f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f76:	4641      	mov	r1, r8
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	eb43 0501 	adc.w	r5, r3, r1
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	00eb      	lsls	r3, r5, #3
 8009f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f8e:	00e2      	lsls	r2, r4, #3
 8009f90:	4614      	mov	r4, r2
 8009f92:	461d      	mov	r5, r3
 8009f94:	4643      	mov	r3, r8
 8009f96:	18e3      	adds	r3, r4, r3
 8009f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	eb45 0303 	adc.w	r3, r5, r3
 8009fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009fb6:	f04f 0200 	mov.w	r2, #0
 8009fba:	f04f 0300 	mov.w	r3, #0
 8009fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	008b      	lsls	r3, r1, #2
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fcc:	4621      	mov	r1, r4
 8009fce:	008a      	lsls	r2, r1, #2
 8009fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009fd4:	f7f6 fe42 	bl	8000c5c <__aeabi_uldivmod>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4b60      	ldr	r3, [pc, #384]	; (800a160 <UART_SetConfig+0x4e4>)
 8009fde:	fba3 2302 	umull	r2, r3, r3, r2
 8009fe2:	095b      	lsrs	r3, r3, #5
 8009fe4:	011c      	lsls	r4, r3, #4
 8009fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	464b      	mov	r3, r9
 8009ffc:	1891      	adds	r1, r2, r2
 8009ffe:	61b9      	str	r1, [r7, #24]
 800a000:	415b      	adcs	r3, r3
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a008:	4641      	mov	r1, r8
 800a00a:	1851      	adds	r1, r2, r1
 800a00c:	6139      	str	r1, [r7, #16]
 800a00e:	4649      	mov	r1, r9
 800a010:	414b      	adcs	r3, r1
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a020:	4659      	mov	r1, fp
 800a022:	00cb      	lsls	r3, r1, #3
 800a024:	4651      	mov	r1, sl
 800a026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a02a:	4651      	mov	r1, sl
 800a02c:	00ca      	lsls	r2, r1, #3
 800a02e:	4610      	mov	r0, r2
 800a030:	4619      	mov	r1, r3
 800a032:	4603      	mov	r3, r0
 800a034:	4642      	mov	r2, r8
 800a036:	189b      	adds	r3, r3, r2
 800a038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a03c:	464b      	mov	r3, r9
 800a03e:	460a      	mov	r2, r1
 800a040:	eb42 0303 	adc.w	r3, r2, r3
 800a044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	67bb      	str	r3, [r7, #120]	; 0x78
 800a052:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a054:	f04f 0200 	mov.w	r2, #0
 800a058:	f04f 0300 	mov.w	r3, #0
 800a05c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a060:	4649      	mov	r1, r9
 800a062:	008b      	lsls	r3, r1, #2
 800a064:	4641      	mov	r1, r8
 800a066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a06a:	4641      	mov	r1, r8
 800a06c:	008a      	lsls	r2, r1, #2
 800a06e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a072:	f7f6 fdf3 	bl	8000c5c <__aeabi_uldivmod>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	4b38      	ldr	r3, [pc, #224]	; (800a160 <UART_SetConfig+0x4e4>)
 800a07e:	fba3 2301 	umull	r2, r3, r3, r1
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	2264      	movs	r2, #100	; 0x64
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	1acb      	subs	r3, r1, r3
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	3332      	adds	r3, #50	; 0x32
 800a090:	4a33      	ldr	r2, [pc, #204]	; (800a160 <UART_SetConfig+0x4e4>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a09c:	441c      	add	r4, r3
 800a09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	673b      	str	r3, [r7, #112]	; 0x70
 800a0a6:	677a      	str	r2, [r7, #116]	; 0x74
 800a0a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	1891      	adds	r1, r2, r2
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	415b      	adcs	r3, r3
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0bc:	4641      	mov	r1, r8
 800a0be:	1851      	adds	r1, r2, r1
 800a0c0:	6039      	str	r1, [r7, #0]
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	414b      	adcs	r3, r1
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	f04f 0200 	mov.w	r2, #0
 800a0cc:	f04f 0300 	mov.w	r3, #0
 800a0d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	00cb      	lsls	r3, r1, #3
 800a0d8:	4651      	mov	r1, sl
 800a0da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0de:	4651      	mov	r1, sl
 800a0e0:	00ca      	lsls	r2, r1, #3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	189b      	adds	r3, r3, r2
 800a0ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	eb42 0303 	adc.w	r3, r2, r3
 800a0f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	663b      	str	r3, [r7, #96]	; 0x60
 800a102:	667a      	str	r2, [r7, #100]	; 0x64
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a110:	4649      	mov	r1, r9
 800a112:	008b      	lsls	r3, r1, #2
 800a114:	4641      	mov	r1, r8
 800a116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a11a:	4641      	mov	r1, r8
 800a11c:	008a      	lsls	r2, r1, #2
 800a11e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a122:	f7f6 fd9b 	bl	8000c5c <__aeabi_uldivmod>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <UART_SetConfig+0x4e4>)
 800a12c:	fba3 1302 	umull	r1, r3, r3, r2
 800a130:	095b      	lsrs	r3, r3, #5
 800a132:	2164      	movs	r1, #100	; 0x64
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	011b      	lsls	r3, r3, #4
 800a13c:	3332      	adds	r3, #50	; 0x32
 800a13e:	4a08      	ldr	r2, [pc, #32]	; (800a160 <UART_SetConfig+0x4e4>)
 800a140:	fba2 2303 	umull	r2, r3, r2, r3
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	f003 020f 	and.w	r2, r3, #15
 800a14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4422      	add	r2, r4
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	bf00      	nop
 800a156:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a15a:	46bd      	mov	sp, r7
 800a15c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a160:	51eb851f 	.word	0x51eb851f

0800a164 <__NVIC_SetPriority>:
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a174:	2b00      	cmp	r3, #0
 800a176:	db0a      	blt.n	800a18e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	490c      	ldr	r1, [pc, #48]	; (800a1b0 <__NVIC_SetPriority+0x4c>)
 800a17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a182:	0112      	lsls	r2, r2, #4
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	440b      	add	r3, r1
 800a188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a18c:	e00a      	b.n	800a1a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	b2da      	uxtb	r2, r3
 800a192:	4908      	ldr	r1, [pc, #32]	; (800a1b4 <__NVIC_SetPriority+0x50>)
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	3b04      	subs	r3, #4
 800a19c:	0112      	lsls	r2, r2, #4
 800a19e:	b2d2      	uxtb	r2, r2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	761a      	strb	r2, [r3, #24]
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	e000e100 	.word	0xe000e100
 800a1b4:	e000ed00 	.word	0xe000ed00

0800a1b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1bc:	2100      	movs	r1, #0
 800a1be:	f06f 0004 	mvn.w	r0, #4
 800a1c2:	f7ff ffcf 	bl	800a164 <__NVIC_SetPriority>
#endif
}
 800a1c6:	bf00      	nop
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1d2:	f3ef 8305 	mrs	r3, IPSR
 800a1d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1de:	f06f 0305 	mvn.w	r3, #5
 800a1e2:	607b      	str	r3, [r7, #4]
 800a1e4:	e00c      	b.n	800a200 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <osKernelInitialize+0x44>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <osKernelInitialize+0x44>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	607b      	str	r3, [r7, #4]
 800a1f8:	e002      	b.n	800a200 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a200:	687b      	ldr	r3, [r7, #4]
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000944 	.word	0x20000944

0800a214 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a21a:	f3ef 8305 	mrs	r3, IPSR
 800a21e:	603b      	str	r3, [r7, #0]
  return(result);
 800a220:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a226:	f06f 0305 	mvn.w	r3, #5
 800a22a:	607b      	str	r3, [r7, #4]
 800a22c:	e010      	b.n	800a250 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a22e:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <osKernelStart+0x48>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d109      	bne.n	800a24a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a236:	f7ff ffbf 	bl	800a1b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <osKernelStart+0x48>)
 800a23c:	2202      	movs	r2, #2
 800a23e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a240:	f001 f910 	bl	800b464 <vTaskStartScheduler>
      stat = osOK;
 800a244:	2300      	movs	r3, #0
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e002      	b.n	800a250 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295
 800a24e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a250:	687b      	ldr	r3, [r7, #4]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20000944 	.word	0x20000944

0800a260 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a260:	b580      	push	{r7, lr}
 800a262:	b08e      	sub	sp, #56	; 0x38
 800a264:	af04      	add	r7, sp, #16
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a270:	f3ef 8305 	mrs	r3, IPSR
 800a274:	617b      	str	r3, [r7, #20]
  return(result);
 800a276:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d17e      	bne.n	800a37a <osThreadNew+0x11a>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d07b      	beq.n	800a37a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a282:	2380      	movs	r3, #128	; 0x80
 800a284:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a286:	2318      	movs	r3, #24
 800a288:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a28e:	f04f 33ff 	mov.w	r3, #4294967295
 800a292:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d045      	beq.n	800a326 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <osThreadNew+0x48>
        name = attr->name;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <osThreadNew+0x6e>
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	2b38      	cmp	r3, #56	; 0x38
 800a2c0:	d805      	bhi.n	800a2ce <osThreadNew+0x6e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <osThreadNew+0x72>
        return (NULL);
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e054      	b.n	800a37c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	089b      	lsrs	r3, r3, #2
 800a2e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <osThreadNew+0xa8>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b5b      	cmp	r3, #91	; 0x5b
 800a2f0:	d90a      	bls.n	800a308 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <osThreadNew+0xa8>
        mem = 1;
 800a302:	2301      	movs	r3, #1
 800a304:	61bb      	str	r3, [r7, #24]
 800a306:	e010      	b.n	800a32a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10c      	bne.n	800a32a <osThreadNew+0xca>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d108      	bne.n	800a32a <osThreadNew+0xca>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <osThreadNew+0xca>
          mem = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	e001      	b.n	800a32a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d110      	bne.n	800a352 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a338:	9202      	str	r2, [sp, #8]
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fe38 	bl	800afbc <xTaskCreateStatic>
 800a34c:	4603      	mov	r3, r0
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	e013      	b.n	800a37a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d110      	bne.n	800a37a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	f107 0310 	add.w	r3, r7, #16
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 fe83 	bl	800b076 <xTaskCreate>
 800a370:	4603      	mov	r3, r0
 800a372:	2b01      	cmp	r3, #1
 800a374:	d001      	beq.n	800a37a <osThreadNew+0x11a>
            hTask = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a37a:	693b      	ldr	r3, [r7, #16]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3728      	adds	r7, #40	; 0x28
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a38c:	f3ef 8305 	mrs	r3, IPSR
 800a390:	60bb      	str	r3, [r7, #8]
  return(result);
 800a392:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <osDelay+0x1c>
    stat = osErrorISR;
 800a398:	f06f 0305 	mvn.w	r3, #5
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	e007      	b.n	800a3b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f826 	bl	800b3fc <vTaskDelay>
    }
  }

  return (stat);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b086      	sub	sp, #24
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c2:	f3ef 8305 	mrs	r3, IPSR
 800a3c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e019      	b.n	800a40a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a3da:	f001 f955 	bl	800b688 <xTaskGetTickCount>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <osDelayUntil+0x4a>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	db06      	blt.n	800a404 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a3f6:	f107 0308 	add.w	r3, r7, #8
 800a3fa:	6939      	ldr	r1, [r7, #16]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 ff7f 	bl	800b300 <vTaskDelayUntil>
 800a402:	e002      	b.n	800a40a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a404:	f06f 0303 	mvn.w	r3, #3
 800a408:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a40a:	697b      	ldr	r3, [r7, #20]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a07      	ldr	r2, [pc, #28]	; (800a440 <vApplicationGetIdleTaskMemory+0x2c>)
 800a424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	4a06      	ldr	r2, [pc, #24]	; (800a444 <vApplicationGetIdleTaskMemory+0x30>)
 800a42a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2280      	movs	r2, #128	; 0x80
 800a430:	601a      	str	r2, [r3, #0]
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	20000948 	.word	0x20000948
 800a444:	200009a4 	.word	0x200009a4

0800a448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4a07      	ldr	r2, [pc, #28]	; (800a474 <vApplicationGetTimerTaskMemory+0x2c>)
 800a458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4a06      	ldr	r2, [pc, #24]	; (800a478 <vApplicationGetTimerTaskMemory+0x30>)
 800a45e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a466:	601a      	str	r2, [r3, #0]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	20000ba4 	.word	0x20000ba4
 800a478:	20000c00 	.word	0x20000c00

0800a47c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f103 0208 	add.w	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f04f 32ff 	mov.w	r2, #4294967295
 800a494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f103 0208 	add.w	r2, r3, #8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f103 0208 	add.w	r2, r3, #8
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	1c5a      	adds	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d103      	bne.n	800a53e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e00c      	b.n	800a558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3308      	adds	r3, #8
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	e002      	b.n	800a54c <vListInsert+0x2e>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d2f6      	bcs.n	800a546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6892      	ldr	r2, [r2, #8]
 800a5a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6852      	ldr	r2, [r2, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d103      	bne.n	800a5c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	1e5a      	subs	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a60e:	f002 f8c9 	bl	800c7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61a:	68f9      	ldr	r1, [r7, #12]
 800a61c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	441a      	add	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63e:	3b01      	subs	r3, #1
 800a640:	68f9      	ldr	r1, [r7, #12]
 800a642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	22ff      	movs	r2, #255	; 0xff
 800a652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	22ff      	movs	r2, #255	; 0xff
 800a65a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d114      	bne.n	800a68e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01a      	beq.n	800a6a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3310      	adds	r3, #16
 800a670:	4618      	mov	r0, r3
 800a672:	f001 f981 	bl	800b978 <xTaskRemoveFromEventList>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d012      	beq.n	800a6a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a67c:	4b0c      	ldr	r3, [pc, #48]	; (800a6b0 <xQueueGenericReset+0xcc>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	e009      	b.n	800a6a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3310      	adds	r3, #16
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fef2 	bl	800a47c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3324      	adds	r3, #36	; 0x24
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff feed 	bl	800a47c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6a2:	f002 f8af 	bl	800c804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6a6:	2301      	movs	r3, #1
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08e      	sub	sp, #56	; 0x38
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6da:	bf00      	nop
 800a6dc:	e7fe      	b.n	800a6dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <xQueueGenericCreateStatic+0x52>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <xQueueGenericCreateStatic+0x56>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueueGenericCreateStatic+0x58>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <xQueueGenericCreateStatic+0x7e>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <xQueueGenericCreateStatic+0x82>
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <xQueueGenericCreateStatic+0x84>
 800a736:	2300      	movs	r3, #0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	61fb      	str	r3, [r7, #28]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a752:	2350      	movs	r3, #80	; 0x50
 800a754:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b50      	cmp	r3, #80	; 0x50
 800a75a:	d00a      	beq.n	800a772 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	61bb      	str	r3, [r7, #24]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a772:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00d      	beq.n	800a79a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	2201      	movs	r2, #1
 800a782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a786:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4613      	mov	r3, r2
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	68b9      	ldr	r1, [r7, #8]
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f805 	bl	800a7a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3730      	adds	r7, #48	; 0x30
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d103      	bne.n	800a7c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	e002      	b.n	800a7c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	69b8      	ldr	r0, [r7, #24]
 800a7d6:	f7ff ff05 	bl	800a5e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08e      	sub	sp, #56	; 0x38
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xQueueGenericSend+0x32>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <xQueueGenericSend+0x40>
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <xQueueGenericSend+0x44>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <xQueueGenericSend+0x46>
 800a830:	2300      	movs	r3, #0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10a      	bne.n	800a84c <xQueueGenericSend+0x60>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d103      	bne.n	800a85a <xQueueGenericSend+0x6e>
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <xQueueGenericSend+0x72>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <xQueueGenericSend+0x74>
 800a85e:	2300      	movs	r3, #0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <xQueueGenericSend+0x8e>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	623b      	str	r3, [r7, #32]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a87a:	f001 fa3b 	bl	800bcf4 <xTaskGetSchedulerState>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <xQueueGenericSend+0x9e>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <xQueueGenericSend+0xa2>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <xQueueGenericSend+0xa4>
 800a88e:	2300      	movs	r3, #0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xQueueGenericSend+0xbe>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	61fb      	str	r3, [r7, #28]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8aa:	f001 ff7b 	bl	800c7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <xQueueGenericSend+0xd4>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d129      	bne.n	800a914 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c6:	f000 fa0b 	bl	800ace0 <prvCopyDataToQueue>
 800a8ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d010      	beq.n	800a8f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	3324      	adds	r3, #36	; 0x24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 f84d 	bl	800b978 <xTaskRemoveFromEventList>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d013      	beq.n	800a90c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8e4:	4b3f      	ldr	r3, [pc, #252]	; (800a9e4 <xQueueGenericSend+0x1f8>)
 800a8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	e00a      	b.n	800a90c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d007      	beq.n	800a90c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8fc:	4b39      	ldr	r3, [pc, #228]	; (800a9e4 <xQueueGenericSend+0x1f8>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a90c:	f001 ff7a 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800a910:	2301      	movs	r3, #1
 800a912:	e063      	b.n	800a9dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d103      	bne.n	800a922 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a91a:	f001 ff73 	bl	800c804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	e05c      	b.n	800a9dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	2b00      	cmp	r3, #0
 800a926:	d106      	bne.n	800a936 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a928:	f107 0314 	add.w	r3, r7, #20
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 f887 	bl	800ba40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a932:	2301      	movs	r3, #1
 800a934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a936:	f001 ff65 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a93a:	f000 fdf9 	bl	800b530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a93e:	f001 ff31 	bl	800c7a4 <vPortEnterCritical>
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a948:	b25b      	sxtb	r3, r3
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94e:	d103      	bne.n	800a958 <xQueueGenericSend+0x16c>
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a95e:	b25b      	sxtb	r3, r3
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a964:	d103      	bne.n	800a96e <xQueueGenericSend+0x182>
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a96e:	f001 ff49 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a972:	1d3a      	adds	r2, r7, #4
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f876 	bl	800ba6c <xTaskCheckForTimeOut>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d124      	bne.n	800a9d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a988:	f000 faa2 	bl	800aed0 <prvIsQueueFull>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d018      	beq.n	800a9c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	3310      	adds	r3, #16
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 ff9c 	bl	800b8d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a2:	f000 fa2d 	bl	800ae00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9a6:	f000 fdd1 	bl	800b54c <xTaskResumeAll>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f47f af7c 	bne.w	800a8aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9b2:	4b0c      	ldr	r3, [pc, #48]	; (800a9e4 <xQueueGenericSend+0x1f8>)
 800a9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	e772      	b.n	800a8aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9c6:	f000 fa1b 	bl	800ae00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ca:	f000 fdbf 	bl	800b54c <xTaskResumeAll>
 800a9ce:	e76c      	b.n	800a8aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d2:	f000 fa15 	bl	800ae00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9d6:	f000 fdb9 	bl	800b54c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3738      	adds	r7, #56	; 0x38
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b090      	sub	sp, #64	; 0x40
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d103      	bne.n	800aa24 <xQueueGenericSendFromISR+0x3c>
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <xQueueGenericSendFromISR+0x40>
 800aa24:	2301      	movs	r3, #1
 800aa26:	e000      	b.n	800aa2a <xQueueGenericSendFromISR+0x42>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d103      	bne.n	800aa52 <xQueueGenericSendFromISR+0x6a>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d101      	bne.n	800aa56 <xQueueGenericSendFromISR+0x6e>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <xQueueGenericSendFromISR+0x70>
 800aa56:	2300      	movs	r3, #0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	623b      	str	r3, [r7, #32]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa72:	f001 ff79 	bl	800c968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa76:	f3ef 8211 	mrs	r2, BASEPRI
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	61fa      	str	r2, [r7, #28]
 800aa8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d302      	bcc.n	800aaa4 <xQueueGenericSendFromISR+0xbc>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d12f      	bne.n	800ab04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaba:	f000 f911 	bl	800ace0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aabe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d112      	bne.n	800aaee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d016      	beq.n	800aafe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	3324      	adds	r3, #36	; 0x24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 ff4f 	bl	800b978 <xTaskRemoveFromEventList>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00b      	beq.n	800aafe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	e007      	b.n	800aafe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aaee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	b25a      	sxtb	r2, r3
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aafe:	2301      	movs	r3, #1
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab02:	e001      	b.n	800ab08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3740      	adds	r7, #64	; 0x40
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <xQueueReceive+0x30>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	623b      	str	r3, [r7, #32]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <xQueueReceive+0x3e>
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <xQueueReceive+0x42>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <xQueueReceive+0x44>
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <xQueueReceive+0x5e>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	61fb      	str	r3, [r7, #28]
}
 800ab7a:	bf00      	nop
 800ab7c:	e7fe      	b.n	800ab7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab7e:	f001 f8b9 	bl	800bcf4 <xTaskGetSchedulerState>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <xQueueReceive+0x6e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <xQueueReceive+0x72>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e000      	b.n	800ab94 <xQueueReceive+0x74>
 800ab92:	2300      	movs	r3, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xQueueReceive+0x8e>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	61bb      	str	r3, [r7, #24]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abae:	f001 fdf9 	bl	800c7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01f      	beq.n	800abfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc2:	f000 f8f7 	bl	800adb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00f      	beq.n	800abf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	3310      	adds	r3, #16
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fecc 	bl	800b978 <xTaskRemoveFromEventList>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abe6:	4b3d      	ldr	r3, [pc, #244]	; (800acdc <xQueueReceive+0x1bc>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800abf6:	f001 fe05 	bl	800c804 <vPortExitCritical>
				return pdPASS;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e069      	b.n	800acd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d103      	bne.n	800ac0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac04:	f001 fdfe 	bl	800c804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	e062      	b.n	800acd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 ff12 	bl	800ba40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac20:	f001 fdf0 	bl	800c804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac24:	f000 fc84 	bl	800b530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac28:	f001 fdbc 	bl	800c7a4 <vPortEnterCritical>
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac32:	b25b      	sxtb	r3, r3
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d103      	bne.n	800ac42 <xQueueReceive+0x122>
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d103      	bne.n	800ac58 <xQueueReceive+0x138>
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac58:	f001 fdd4 	bl	800c804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac5c:	1d3a      	adds	r2, r7, #4
 800ac5e:	f107 0310 	add.w	r3, r7, #16
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 ff01 	bl	800ba6c <xTaskCheckForTimeOut>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d123      	bne.n	800acb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac72:	f000 f917 	bl	800aea4 <prvIsQueueEmpty>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d017      	beq.n	800acac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	3324      	adds	r3, #36	; 0x24
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fe27 	bl	800b8d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8c:	f000 f8b8 	bl	800ae00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac90:	f000 fc5c 	bl	800b54c <xTaskResumeAll>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d189      	bne.n	800abae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <xQueueReceive+0x1bc>)
 800ac9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	e780      	b.n	800abae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acae:	f000 f8a7 	bl	800ae00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acb2:	f000 fc4b 	bl	800b54c <xTaskResumeAll>
 800acb6:	e77a      	b.n	800abae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acba:	f000 f8a1 	bl	800ae00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acbe:	f000 fc45 	bl	800b54c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc4:	f000 f8ee 	bl	800aea4 <prvIsQueueEmpty>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f43f af6f 	beq.w	800abae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3730      	adds	r7, #48	; 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acec:	2300      	movs	r3, #0
 800acee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10d      	bne.n	800ad1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d14d      	bne.n	800ada2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 f810 	bl	800bd30 <xTaskPriorityDisinherit>
 800ad10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	e043      	b.n	800ada2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d119      	bne.n	800ad54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6858      	ldr	r0, [r3, #4]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	461a      	mov	r2, r3
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	f002 f8a2 	bl	800ce74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	441a      	add	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d32b      	bcc.n	800ada2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	e026      	b.n	800ada2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	68d8      	ldr	r0, [r3, #12]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	68b9      	ldr	r1, [r7, #8]
 800ad60:	f002 f888 	bl	800ce74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68da      	ldr	r2, [r3, #12]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6c:	425b      	negs	r3, r3
 800ad6e:	441a      	add	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d207      	bcs.n	800ad90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	689a      	ldr	r2, [r3, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	425b      	negs	r3, r3
 800ad8a:	441a      	add	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d105      	bne.n	800ada2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adaa:	697b      	ldr	r3, [r7, #20]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d018      	beq.n	800adf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	441a      	add	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	429a      	cmp	r2, r3
 800adde:	d303      	bcc.n	800ade8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68d9      	ldr	r1, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf0:	461a      	mov	r2, r3
 800adf2:	6838      	ldr	r0, [r7, #0]
 800adf4:	f002 f83e 	bl	800ce74 <memcpy>
	}
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae08:	f001 fccc 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae14:	e011      	b.n	800ae3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d012      	beq.n	800ae44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3324      	adds	r3, #36	; 0x24
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 fda8 	bl	800b978 <xTaskRemoveFromEventList>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae2e:	f000 fe7f 	bl	800bb30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dce9      	bgt.n	800ae16 <prvUnlockQueue+0x16>
 800ae42:	e000      	b.n	800ae46 <prvUnlockQueue+0x46>
					break;
 800ae44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	22ff      	movs	r2, #255	; 0xff
 800ae4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae4e:	f001 fcd9 	bl	800c804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae52:	f001 fca7 	bl	800c7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae5e:	e011      	b.n	800ae84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fd83 	bl	800b978 <xTaskRemoveFromEventList>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae78:	f000 fe5a 	bl	800bb30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dce9      	bgt.n	800ae60 <prvUnlockQueue+0x60>
 800ae8c:	e000      	b.n	800ae90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	22ff      	movs	r2, #255	; 0xff
 800ae94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae98:	f001 fcb4 	bl	800c804 <vPortExitCritical>
}
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aeac:	f001 fc7a 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	e001      	b.n	800aec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aec2:	f001 fc9f 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800aec6:	68fb      	ldr	r3, [r7, #12]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aed8:	f001 fc64 	bl	800c7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d102      	bne.n	800aeee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef2:	f001 fc87 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af0a:	2300      	movs	r3, #0
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e014      	b.n	800af3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af10:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <vQueueAddToRegistry+0x50>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10b      	bne.n	800af34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af1c:	490c      	ldr	r1, [pc, #48]	; (800af50 <vQueueAddToRegistry+0x50>)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af26:	4a0a      	ldr	r2, [pc, #40]	; (800af50 <vQueueAddToRegistry+0x50>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	4413      	add	r3, r2
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af32:	e006      	b.n	800af42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b07      	cmp	r3, #7
 800af3e:	d9e7      	bls.n	800af10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af40:	bf00      	nop
 800af42:	bf00      	nop
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20001000 	.word	0x20001000

0800af54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af64:	f001 fc1e 	bl	800c7a4 <vPortEnterCritical>
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af6e:	b25b      	sxtb	r3, r3
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d103      	bne.n	800af7e <vQueueWaitForMessageRestricted+0x2a>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af84:	b25b      	sxtb	r3, r3
 800af86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8a:	d103      	bne.n	800af94 <vQueueWaitForMessageRestricted+0x40>
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af94:	f001 fc36 	bl	800c804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	3324      	adds	r3, #36	; 0x24
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 fcb9 	bl	800b920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afae:	6978      	ldr	r0, [r7, #20]
 800afb0:	f7ff ff26 	bl	800ae00 <prvUnlockQueue>
	}
 800afb4:	bf00      	nop
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08e      	sub	sp, #56	; 0x38
 800afc0:	af04      	add	r7, sp, #16
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	623b      	str	r3, [r7, #32]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xTaskCreateStatic+0x46>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	61fb      	str	r3, [r7, #28]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b002:	235c      	movs	r3, #92	; 0x5c
 800b004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b5c      	cmp	r3, #92	; 0x5c
 800b00a:	d00a      	beq.n	800b022 <xTaskCreateStatic+0x66>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61bb      	str	r3, [r7, #24]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b022:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d01e      	beq.n	800b068 <xTaskCreateStatic+0xac>
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01b      	beq.n	800b068 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b038:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	2202      	movs	r2, #2
 800b03e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b042:	2300      	movs	r3, #0
 800b044:	9303      	str	r3, [sp, #12]
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	f107 0314 	add.w	r3, r7, #20
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 f850 	bl	800b100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b062:	f000 f8dd 	bl	800b220 <prvAddNewTaskToReadyList>
 800b066:	e001      	b.n	800b06c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b06c:	697b      	ldr	r3, [r7, #20]
	}
 800b06e:	4618      	mov	r0, r3
 800b070:	3728      	adds	r7, #40	; 0x28
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b076:	b580      	push	{r7, lr}
 800b078:	b08c      	sub	sp, #48	; 0x30
 800b07a:	af04      	add	r7, sp, #16
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	603b      	str	r3, [r7, #0]
 800b082:	4613      	mov	r3, r2
 800b084:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f001 fcac 	bl	800c9e8 <pvPortMalloc>
 800b090:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00e      	beq.n	800b0b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b098:	205c      	movs	r0, #92	; 0x5c
 800b09a:	f001 fca5 	bl	800c9e8 <pvPortMalloc>
 800b09e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b0ac:	e005      	b.n	800b0ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0ae:	6978      	ldr	r0, [r7, #20]
 800b0b0:	f001 fd66 	bl	800cb80 <vPortFree>
 800b0b4:	e001      	b.n	800b0ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d017      	beq.n	800b0f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0c8:	88fa      	ldrh	r2, [r7, #6]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	9302      	str	r3, [sp, #8]
 800b0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f80e 	bl	800b100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0e4:	69f8      	ldr	r0, [r7, #28]
 800b0e6:	f000 f89b 	bl	800b220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	e002      	b.n	800b0f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3720      	adds	r7, #32
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	461a      	mov	r2, r3
 800b118:	21a5      	movs	r1, #165	; 0xa5
 800b11a:	f001 fe6f 	bl	800cdfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b128:	3b01      	subs	r3, #1
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	f023 0307 	bic.w	r3, r3, #7
 800b136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	f003 0307 	and.w	r3, r3, #7
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	617b      	str	r3, [r7, #20]
}
 800b154:	bf00      	nop
 800b156:	e7fe      	b.n	800b156 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01f      	beq.n	800b19e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b15e:	2300      	movs	r3, #0
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	e012      	b.n	800b18a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	7819      	ldrb	r1, [r3, #0]
 800b16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	4413      	add	r3, r2
 800b172:	3334      	adds	r3, #52	; 0x34
 800b174:	460a      	mov	r2, r1
 800b176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	4413      	add	r3, r2
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	3301      	adds	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	2b0f      	cmp	r3, #15
 800b18e:	d9e9      	bls.n	800b164 <prvInitialiseNewTask+0x64>
 800b190:	e000      	b.n	800b194 <prvInitialiseNewTask+0x94>
			{
				break;
 800b192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b19c:	e003      	b.n	800b1a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	2b37      	cmp	r3, #55	; 0x37
 800b1aa:	d901      	bls.n	800b1b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1ac:	2337      	movs	r3, #55	; 0x37
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	2200      	movs	r2, #0
 800b1c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7ff f978 	bl	800a4bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff f973 	bl	800a4bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	69b8      	ldr	r0, [r7, #24]
 800b200:	f001 f9a6 	bl	800c550 <pxPortInitialiseStack>
 800b204:	4602      	mov	r2, r0
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b216:	bf00      	nop
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b228:	f001 fabc 	bl	800c7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b22c:	4b2d      	ldr	r3, [pc, #180]	; (800b2e4 <prvAddNewTaskToReadyList+0xc4>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	4a2c      	ldr	r2, [pc, #176]	; (800b2e4 <prvAddNewTaskToReadyList+0xc4>)
 800b234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b236:	4b2c      	ldr	r3, [pc, #176]	; (800b2e8 <prvAddNewTaskToReadyList+0xc8>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d109      	bne.n	800b252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b23e:	4a2a      	ldr	r2, [pc, #168]	; (800b2e8 <prvAddNewTaskToReadyList+0xc8>)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b244:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <prvAddNewTaskToReadyList+0xc4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d110      	bne.n	800b26e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b24c:	f000 fc94 	bl	800bb78 <prvInitialiseTaskLists>
 800b250:	e00d      	b.n	800b26e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b252:	4b26      	ldr	r3, [pc, #152]	; (800b2ec <prvAddNewTaskToReadyList+0xcc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b25a:	4b23      	ldr	r3, [pc, #140]	; (800b2e8 <prvAddNewTaskToReadyList+0xc8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	429a      	cmp	r2, r3
 800b266:	d802      	bhi.n	800b26e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b268:	4a1f      	ldr	r2, [pc, #124]	; (800b2e8 <prvAddNewTaskToReadyList+0xc8>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b26e:	4b20      	ldr	r3, [pc, #128]	; (800b2f0 <prvAddNewTaskToReadyList+0xd0>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	4a1e      	ldr	r2, [pc, #120]	; (800b2f0 <prvAddNewTaskToReadyList+0xd0>)
 800b276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b278:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <prvAddNewTaskToReadyList+0xd0>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b284:	4b1b      	ldr	r3, [pc, #108]	; (800b2f4 <prvAddNewTaskToReadyList+0xd4>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d903      	bls.n	800b294 <prvAddNewTaskToReadyList+0x74>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <prvAddNewTaskToReadyList+0xd4>)
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b298:	4613      	mov	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4a15      	ldr	r2, [pc, #84]	; (800b2f8 <prvAddNewTaskToReadyList+0xd8>)
 800b2a2:	441a      	add	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	f7ff f913 	bl	800a4d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2b0:	f001 faa8 	bl	800c804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <prvAddNewTaskToReadyList+0xcc>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00e      	beq.n	800b2da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2bc:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <prvAddNewTaskToReadyList+0xc8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d207      	bcs.n	800b2da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2ca:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <prvAddNewTaskToReadyList+0xdc>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20001514 	.word	0x20001514
 800b2e8:	20001040 	.word	0x20001040
 800b2ec:	20001520 	.word	0x20001520
 800b2f0:	20001530 	.word	0x20001530
 800b2f4:	2000151c 	.word	0x2000151c
 800b2f8:	20001044 	.word	0x20001044
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <vTaskDelayUntil+0x2a>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	617b      	str	r3, [r7, #20]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <vTaskDelayUntil+0x46>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	613b      	str	r3, [r7, #16]
}
 800b342:	bf00      	nop
 800b344:	e7fe      	b.n	800b344 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <vTaskDelayUntil+0xf0>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <vTaskDelayUntil+0x64>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	60fb      	str	r3, [r7, #12]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b364:	f000 f8e4 	bl	800b530 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b368:	4b22      	ldr	r3, [pc, #136]	; (800b3f4 <vTaskDelayUntil+0xf4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4413      	add	r3, r2
 800b376:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6a3a      	ldr	r2, [r7, #32]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d20b      	bcs.n	800b39a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	69fa      	ldr	r2, [r7, #28]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d211      	bcs.n	800b3b0 <vTaskDelayUntil+0xb0>
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	429a      	cmp	r2, r3
 800b392:	d90d      	bls.n	800b3b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b394:	2301      	movs	r3, #1
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
 800b398:	e00a      	b.n	800b3b0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d303      	bcc.n	800b3ac <vTaskDelayUntil+0xac>
 800b3a4:	69fa      	ldr	r2, [r7, #28]
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d901      	bls.n	800b3b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d006      	beq.n	800b3ca <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 fd21 	bl	800be0c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b3ca:	f000 f8bf 	bl	800b54c <xTaskResumeAll>
 800b3ce:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d107      	bne.n	800b3e6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b3d6:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <vTaskDelayUntil+0xf8>)
 800b3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3e6:	bf00      	nop
 800b3e8:	3728      	adds	r7, #40	; 0x28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	2000153c 	.word	0x2000153c
 800b3f4:	20001518 	.word	0x20001518
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d017      	beq.n	800b43e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b40e:	4b13      	ldr	r3, [pc, #76]	; (800b45c <vTaskDelay+0x60>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <vTaskDelay+0x30>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	60bb      	str	r3, [r7, #8]
}
 800b428:	bf00      	nop
 800b42a:	e7fe      	b.n	800b42a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b42c:	f000 f880 	bl	800b530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b430:	2100      	movs	r1, #0
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fcea 	bl	800be0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b438:	f000 f888 	bl	800b54c <xTaskResumeAll>
 800b43c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d107      	bne.n	800b454 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <vTaskDelay+0x64>)
 800b446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000153c 	.word	0x2000153c
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08a      	sub	sp, #40	; 0x28
 800b468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b472:	463a      	mov	r2, r7
 800b474:	1d39      	adds	r1, r7, #4
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe ffca 	bl	800a414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	9202      	str	r2, [sp, #8]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	2300      	movs	r3, #0
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	2300      	movs	r3, #0
 800b490:	460a      	mov	r2, r1
 800b492:	4921      	ldr	r1, [pc, #132]	; (800b518 <vTaskStartScheduler+0xb4>)
 800b494:	4821      	ldr	r0, [pc, #132]	; (800b51c <vTaskStartScheduler+0xb8>)
 800b496:	f7ff fd91 	bl	800afbc <xTaskCreateStatic>
 800b49a:	4603      	mov	r3, r0
 800b49c:	4a20      	ldr	r2, [pc, #128]	; (800b520 <vTaskStartScheduler+0xbc>)
 800b49e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4a0:	4b1f      	ldr	r3, [pc, #124]	; (800b520 <vTaskStartScheduler+0xbc>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	617b      	str	r3, [r7, #20]
 800b4ac:	e001      	b.n	800b4b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d102      	bne.n	800b4be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4b8:	f000 fcfc 	bl	800beb4 <xTimerCreateTimerTask>
 800b4bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d116      	bne.n	800b4f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	613b      	str	r3, [r7, #16]
}
 800b4d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4d8:	4b12      	ldr	r3, [pc, #72]	; (800b524 <vTaskStartScheduler+0xc0>)
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295
 800b4de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4e0:	4b11      	ldr	r3, [pc, #68]	; (800b528 <vTaskStartScheduler+0xc4>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4e6:	4b11      	ldr	r3, [pc, #68]	; (800b52c <vTaskStartScheduler+0xc8>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4ec:	f001 f8b8 	bl	800c660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4f0:	e00e      	b.n	800b510 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d10a      	bne.n	800b510 <vTaskStartScheduler+0xac>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	60fb      	str	r3, [r7, #12]
}
 800b50c:	bf00      	nop
 800b50e:	e7fe      	b.n	800b50e <vTaskStartScheduler+0xaa>
}
 800b510:	bf00      	nop
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	0800d86c 	.word	0x0800d86c
 800b51c:	0800bb49 	.word	0x0800bb49
 800b520:	20001538 	.word	0x20001538
 800b524:	20001534 	.word	0x20001534
 800b528:	20001520 	.word	0x20001520
 800b52c:	20001518 	.word	0x20001518

0800b530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b534:	4b04      	ldr	r3, [pc, #16]	; (800b548 <vTaskSuspendAll+0x18>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	4a03      	ldr	r2, [pc, #12]	; (800b548 <vTaskSuspendAll+0x18>)
 800b53c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b53e:	bf00      	nop
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	2000153c 	.word	0x2000153c

0800b54c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b55a:	4b42      	ldr	r3, [pc, #264]	; (800b664 <xTaskResumeAll+0x118>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <xTaskResumeAll+0x2c>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	603b      	str	r3, [r7, #0]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b578:	f001 f914 	bl	800c7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b57c:	4b39      	ldr	r3, [pc, #228]	; (800b664 <xTaskResumeAll+0x118>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3b01      	subs	r3, #1
 800b582:	4a38      	ldr	r2, [pc, #224]	; (800b664 <xTaskResumeAll+0x118>)
 800b584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b586:	4b37      	ldr	r3, [pc, #220]	; (800b664 <xTaskResumeAll+0x118>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d162      	bne.n	800b654 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b58e:	4b36      	ldr	r3, [pc, #216]	; (800b668 <xTaskResumeAll+0x11c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d05e      	beq.n	800b654 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b596:	e02f      	b.n	800b5f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b598:	4b34      	ldr	r3, [pc, #208]	; (800b66c <xTaskResumeAll+0x120>)
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3318      	adds	r3, #24
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe fff3 	bl	800a590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe ffee 	bl	800a590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <xTaskResumeAll+0x124>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d903      	bls.n	800b5c8 <xTaskResumeAll+0x7c>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a2a      	ldr	r2, [pc, #168]	; (800b670 <xTaskResumeAll+0x124>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a27      	ldr	r2, [pc, #156]	; (800b674 <xTaskResumeAll+0x128>)
 800b5d6:	441a      	add	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7fe ff79 	bl	800a4d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	4b23      	ldr	r3, [pc, #140]	; (800b678 <xTaskResumeAll+0x12c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d302      	bcc.n	800b5f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5f2:	4b22      	ldr	r3, [pc, #136]	; (800b67c <xTaskResumeAll+0x130>)
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5f8:	4b1c      	ldr	r3, [pc, #112]	; (800b66c <xTaskResumeAll+0x120>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1cb      	bne.n	800b598 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b606:	f000 fb55 	bl	800bcb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b60a:	4b1d      	ldr	r3, [pc, #116]	; (800b680 <xTaskResumeAll+0x134>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d010      	beq.n	800b638 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b616:	f000 f847 	bl	800b6a8 <xTaskIncrementTick>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b620:	4b16      	ldr	r3, [pc, #88]	; (800b67c <xTaskResumeAll+0x130>)
 800b622:	2201      	movs	r2, #1
 800b624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3b01      	subs	r3, #1
 800b62a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1f1      	bne.n	800b616 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b632:	4b13      	ldr	r3, [pc, #76]	; (800b680 <xTaskResumeAll+0x134>)
 800b634:	2200      	movs	r2, #0
 800b636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b638:	4b10      	ldr	r3, [pc, #64]	; (800b67c <xTaskResumeAll+0x130>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b640:	2301      	movs	r3, #1
 800b642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b644:	4b0f      	ldr	r3, [pc, #60]	; (800b684 <xTaskResumeAll+0x138>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b654:	f001 f8d6 	bl	800c804 <vPortExitCritical>

	return xAlreadyYielded;
 800b658:	68bb      	ldr	r3, [r7, #8]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	2000153c 	.word	0x2000153c
 800b668:	20001514 	.word	0x20001514
 800b66c:	200014d4 	.word	0x200014d4
 800b670:	2000151c 	.word	0x2000151c
 800b674:	20001044 	.word	0x20001044
 800b678:	20001040 	.word	0x20001040
 800b67c:	20001528 	.word	0x20001528
 800b680:	20001524 	.word	0x20001524
 800b684:	e000ed04 	.word	0xe000ed04

0800b688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b68e:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <xTaskGetTickCount+0x1c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b694:	687b      	ldr	r3, [r7, #4]
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	20001518 	.word	0x20001518

0800b6a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6b2:	4b4f      	ldr	r3, [pc, #316]	; (800b7f0 <xTaskIncrementTick+0x148>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f040 808f 	bne.w	800b7da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6bc:	4b4d      	ldr	r3, [pc, #308]	; (800b7f4 <xTaskIncrementTick+0x14c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6c4:	4a4b      	ldr	r2, [pc, #300]	; (800b7f4 <xTaskIncrementTick+0x14c>)
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d120      	bne.n	800b712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6d0:	4b49      	ldr	r3, [pc, #292]	; (800b7f8 <xTaskIncrementTick+0x150>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	603b      	str	r3, [r7, #0]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <xTaskIncrementTick+0x46>
 800b6f0:	4b41      	ldr	r3, [pc, #260]	; (800b7f8 <xTaskIncrementTick+0x150>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	4b41      	ldr	r3, [pc, #260]	; (800b7fc <xTaskIncrementTick+0x154>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a3f      	ldr	r2, [pc, #252]	; (800b7f8 <xTaskIncrementTick+0x150>)
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	4a3f      	ldr	r2, [pc, #252]	; (800b7fc <xTaskIncrementTick+0x154>)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	4b3e      	ldr	r3, [pc, #248]	; (800b800 <xTaskIncrementTick+0x158>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a3d      	ldr	r2, [pc, #244]	; (800b800 <xTaskIncrementTick+0x158>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	f000 fad1 	bl	800bcb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b712:	4b3c      	ldr	r3, [pc, #240]	; (800b804 <xTaskIncrementTick+0x15c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d349      	bcc.n	800b7b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b71c:	4b36      	ldr	r3, [pc, #216]	; (800b7f8 <xTaskIncrementTick+0x150>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d104      	bne.n	800b730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b726:	4b37      	ldr	r3, [pc, #220]	; (800b804 <xTaskIncrementTick+0x15c>)
 800b728:	f04f 32ff 	mov.w	r2, #4294967295
 800b72c:	601a      	str	r2, [r3, #0]
					break;
 800b72e:	e03f      	b.n	800b7b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b730:	4b31      	ldr	r3, [pc, #196]	; (800b7f8 <xTaskIncrementTick+0x150>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d203      	bcs.n	800b750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b748:	4a2e      	ldr	r2, [pc, #184]	; (800b804 <xTaskIncrementTick+0x15c>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b74e:	e02f      	b.n	800b7b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	3304      	adds	r3, #4
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe ff1b 	bl	800a590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	3318      	adds	r3, #24
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe ff12 	bl	800a590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4b25      	ldr	r3, [pc, #148]	; (800b808 <xTaskIncrementTick+0x160>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d903      	bls.n	800b780 <xTaskIncrementTick+0xd8>
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77c:	4a22      	ldr	r2, [pc, #136]	; (800b808 <xTaskIncrementTick+0x160>)
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4a1f      	ldr	r2, [pc, #124]	; (800b80c <xTaskIncrementTick+0x164>)
 800b78e:	441a      	add	r2, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f7fe fe9d 	bl	800a4d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4b1b      	ldr	r3, [pc, #108]	; (800b810 <xTaskIncrementTick+0x168>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d3b8      	bcc.n	800b71c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ae:	e7b5      	b.n	800b71c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7b0:	4b17      	ldr	r3, [pc, #92]	; (800b810 <xTaskIncrementTick+0x168>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	4915      	ldr	r1, [pc, #84]	; (800b80c <xTaskIncrementTick+0x164>)
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	440b      	add	r3, r1
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d901      	bls.n	800b7cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b7cc:	4b11      	ldr	r3, [pc, #68]	; (800b814 <xTaskIncrementTick+0x16c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e004      	b.n	800b7e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <xTaskIncrementTick+0x170>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	4a0d      	ldr	r2, [pc, #52]	; (800b818 <xTaskIncrementTick+0x170>)
 800b7e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7e4:	697b      	ldr	r3, [r7, #20]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	2000153c 	.word	0x2000153c
 800b7f4:	20001518 	.word	0x20001518
 800b7f8:	200014cc 	.word	0x200014cc
 800b7fc:	200014d0 	.word	0x200014d0
 800b800:	2000152c 	.word	0x2000152c
 800b804:	20001534 	.word	0x20001534
 800b808:	2000151c 	.word	0x2000151c
 800b80c:	20001044 	.word	0x20001044
 800b810:	20001040 	.word	0x20001040
 800b814:	20001528 	.word	0x20001528
 800b818:	20001524 	.word	0x20001524

0800b81c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <vTaskSwitchContext+0xa8>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b82a:	4b27      	ldr	r3, [pc, #156]	; (800b8c8 <vTaskSwitchContext+0xac>)
 800b82c:	2201      	movs	r2, #1
 800b82e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b830:	e041      	b.n	800b8b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b832:	4b25      	ldr	r3, [pc, #148]	; (800b8c8 <vTaskSwitchContext+0xac>)
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b838:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <vTaskSwitchContext+0xb0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e010      	b.n	800b862 <vTaskSwitchContext+0x46>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <vTaskSwitchContext+0x40>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	607b      	str	r3, [r7, #4]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <vTaskSwitchContext+0x3e>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3b01      	subs	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	491b      	ldr	r1, [pc, #108]	; (800b8d0 <vTaskSwitchContext+0xb4>)
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	4613      	mov	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0e4      	beq.n	800b840 <vTaskSwitchContext+0x24>
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	4613      	mov	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4a13      	ldr	r2, [pc, #76]	; (800b8d0 <vTaskSwitchContext+0xb4>)
 800b882:	4413      	add	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	605a      	str	r2, [r3, #4]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	3308      	adds	r3, #8
 800b898:	429a      	cmp	r2, r3
 800b89a:	d104      	bne.n	800b8a6 <vTaskSwitchContext+0x8a>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	605a      	str	r2, [r3, #4]
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	4a09      	ldr	r2, [pc, #36]	; (800b8d4 <vTaskSwitchContext+0xb8>)
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	4a06      	ldr	r2, [pc, #24]	; (800b8cc <vTaskSwitchContext+0xb0>)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6013      	str	r3, [r2, #0]
}
 800b8b6:	bf00      	nop
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000153c 	.word	0x2000153c
 800b8c8:	20001528 	.word	0x20001528
 800b8cc:	2000151c 	.word	0x2000151c
 800b8d0:	20001044 	.word	0x20001044
 800b8d4:	20001040 	.word	0x20001040

0800b8d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	60fb      	str	r3, [r7, #12]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8fe:	4b07      	ldr	r3, [pc, #28]	; (800b91c <vTaskPlaceOnEventList+0x44>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3318      	adds	r3, #24
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7fe fe09 	bl	800a51e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b90c:	2101      	movs	r1, #1
 800b90e:	6838      	ldr	r0, [r7, #0]
 800b910:	f000 fa7c 	bl	800be0c <prvAddCurrentTaskToDelayedList>
}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20001040 	.word	0x20001040

0800b920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	617b      	str	r3, [r7, #20]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b948:	4b0a      	ldr	r3, [pc, #40]	; (800b974 <vTaskPlaceOnEventListRestricted+0x54>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3318      	adds	r3, #24
 800b94e:	4619      	mov	r1, r3
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7fe fdc0 	bl	800a4d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b95c:	f04f 33ff 	mov.w	r3, #4294967295
 800b960:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b962:	6879      	ldr	r1, [r7, #4]
 800b964:	68b8      	ldr	r0, [r7, #8]
 800b966:	f000 fa51 	bl	800be0c <prvAddCurrentTaskToDelayedList>
	}
 800b96a:	bf00      	nop
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20001040 	.word	0x20001040

0800b978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	60fb      	str	r3, [r7, #12]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3318      	adds	r3, #24
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe fdf1 	bl	800a590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ae:	4b1e      	ldr	r3, [pc, #120]	; (800ba28 <xTaskRemoveFromEventList+0xb0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d11d      	bne.n	800b9f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fde8 	bl	800a590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c4:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <xTaskRemoveFromEventList+0xb4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d903      	bls.n	800b9d4 <xTaskRemoveFromEventList+0x5c>
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	4a16      	ldr	r2, [pc, #88]	; (800ba2c <xTaskRemoveFromEventList+0xb4>)
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	4613      	mov	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <xTaskRemoveFromEventList+0xb8>)
 800b9e2:	441a      	add	r2, r3
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f7fe fd73 	bl	800a4d6 <vListInsertEnd>
 800b9f0:	e005      	b.n	800b9fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3318      	adds	r3, #24
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	480e      	ldr	r0, [pc, #56]	; (800ba34 <xTaskRemoveFromEventList+0xbc>)
 800b9fa:	f7fe fd6c 	bl	800a4d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba02:	4b0d      	ldr	r3, [pc, #52]	; (800ba38 <xTaskRemoveFromEventList+0xc0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d905      	bls.n	800ba18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <xTaskRemoveFromEventList+0xc4>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	e001      	b.n	800ba1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba1c:	697b      	ldr	r3, [r7, #20]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	2000153c 	.word	0x2000153c
 800ba2c:	2000151c 	.word	0x2000151c
 800ba30:	20001044 	.word	0x20001044
 800ba34:	200014d4 	.word	0x200014d4
 800ba38:	20001040 	.word	0x20001040
 800ba3c:	20001528 	.word	0x20001528

0800ba40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <vTaskInternalSetTimeOutState+0x24>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba50:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <vTaskInternalSetTimeOutState+0x28>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	605a      	str	r2, [r3, #4]
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	2000152c 	.word	0x2000152c
 800ba68:	20001518 	.word	0x20001518

0800ba6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	613b      	str	r3, [r7, #16]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800baae:	f000 fe79 	bl	800c7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bab2:	4b1d      	ldr	r3, [pc, #116]	; (800bb28 <xTaskCheckForTimeOut+0xbc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d102      	bne.n	800bad2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	61fb      	str	r3, [r7, #28]
 800bad0:	e023      	b.n	800bb1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	4b15      	ldr	r3, [pc, #84]	; (800bb2c <xTaskCheckForTimeOut+0xc0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d007      	beq.n	800baee <xTaskCheckForTimeOut+0x82>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d302      	bcc.n	800baee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	e015      	b.n	800bb1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d20b      	bcs.n	800bb10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	1ad2      	subs	r2, r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff ff9b 	bl	800ba40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
 800bb0e:	e004      	b.n	800bb1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb16:	2301      	movs	r3, #1
 800bb18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb1a:	f000 fe73 	bl	800c804 <vPortExitCritical>

	return xReturn;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3720      	adds	r7, #32
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	20001518 	.word	0x20001518
 800bb2c:	2000152c 	.word	0x2000152c

0800bb30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb34:	4b03      	ldr	r3, [pc, #12]	; (800bb44 <vTaskMissedYield+0x14>)
 800bb36:	2201      	movs	r2, #1
 800bb38:	601a      	str	r2, [r3, #0]
}
 800bb3a:	bf00      	nop
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20001528 	.word	0x20001528

0800bb48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb50:	f000 f852 	bl	800bbf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb54:	4b06      	ldr	r3, [pc, #24]	; (800bb70 <prvIdleTask+0x28>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d9f9      	bls.n	800bb50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb5c:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <prvIdleTask+0x2c>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb6c:	e7f0      	b.n	800bb50 <prvIdleTask+0x8>
 800bb6e:	bf00      	nop
 800bb70:	20001044 	.word	0x20001044
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb7e:	2300      	movs	r3, #0
 800bb80:	607b      	str	r3, [r7, #4]
 800bb82:	e00c      	b.n	800bb9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4a12      	ldr	r2, [pc, #72]	; (800bbd8 <prvInitialiseTaskLists+0x60>)
 800bb90:	4413      	add	r3, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe fc72 	bl	800a47c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	607b      	str	r3, [r7, #4]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b37      	cmp	r3, #55	; 0x37
 800bba2:	d9ef      	bls.n	800bb84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bba4:	480d      	ldr	r0, [pc, #52]	; (800bbdc <prvInitialiseTaskLists+0x64>)
 800bba6:	f7fe fc69 	bl	800a47c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbaa:	480d      	ldr	r0, [pc, #52]	; (800bbe0 <prvInitialiseTaskLists+0x68>)
 800bbac:	f7fe fc66 	bl	800a47c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbb0:	480c      	ldr	r0, [pc, #48]	; (800bbe4 <prvInitialiseTaskLists+0x6c>)
 800bbb2:	f7fe fc63 	bl	800a47c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbb6:	480c      	ldr	r0, [pc, #48]	; (800bbe8 <prvInitialiseTaskLists+0x70>)
 800bbb8:	f7fe fc60 	bl	800a47c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbbc:	480b      	ldr	r0, [pc, #44]	; (800bbec <prvInitialiseTaskLists+0x74>)
 800bbbe:	f7fe fc5d 	bl	800a47c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <prvInitialiseTaskLists+0x78>)
 800bbc4:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <prvInitialiseTaskLists+0x64>)
 800bbc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbc8:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <prvInitialiseTaskLists+0x7c>)
 800bbca:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <prvInitialiseTaskLists+0x68>)
 800bbcc:	601a      	str	r2, [r3, #0]
}
 800bbce:	bf00      	nop
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20001044 	.word	0x20001044
 800bbdc:	200014a4 	.word	0x200014a4
 800bbe0:	200014b8 	.word	0x200014b8
 800bbe4:	200014d4 	.word	0x200014d4
 800bbe8:	200014e8 	.word	0x200014e8
 800bbec:	20001500 	.word	0x20001500
 800bbf0:	200014cc 	.word	0x200014cc
 800bbf4:	200014d0 	.word	0x200014d0

0800bbf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbfe:	e019      	b.n	800bc34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc00:	f000 fdd0 	bl	800c7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc04:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <prvCheckTasksWaitingTermination+0x50>)
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fcbd 	bl	800a590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc16:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <prvCheckTasksWaitingTermination+0x54>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	4a0b      	ldr	r2, [pc, #44]	; (800bc4c <prvCheckTasksWaitingTermination+0x54>)
 800bc1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <prvCheckTasksWaitingTermination+0x58>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3b01      	subs	r3, #1
 800bc26:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <prvCheckTasksWaitingTermination+0x58>)
 800bc28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc2a:	f000 fdeb 	bl	800c804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f810 	bl	800bc54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc34:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <prvCheckTasksWaitingTermination+0x58>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e1      	bne.n	800bc00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	200014e8 	.word	0x200014e8
 800bc4c:	20001514 	.word	0x20001514
 800bc50:	200014fc 	.word	0x200014fc

0800bc54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d108      	bne.n	800bc78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 ff88 	bl	800cb80 <vPortFree>
				vPortFree( pxTCB );
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 ff85 	bl	800cb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc76:	e018      	b.n	800bcaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d103      	bne.n	800bc8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 ff7c 	bl	800cb80 <vPortFree>
	}
 800bc88:	e00f      	b.n	800bcaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d00a      	beq.n	800bcaa <prvDeleteTCB+0x56>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	60fb      	str	r3, [r7, #12]
}
 800bca6:	bf00      	nop
 800bca8:	e7fe      	b.n	800bca8 <prvDeleteTCB+0x54>
	}
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <prvResetNextTaskUnblockTime+0x38>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bccc:	e008      	b.n	800bce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <prvResetNextTaskUnblockTime+0x38>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	4a04      	ldr	r2, [pc, #16]	; (800bcf0 <prvResetNextTaskUnblockTime+0x3c>)
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	200014cc 	.word	0x200014cc
 800bcf0:	20001534 	.word	0x20001534

0800bcf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <xTaskGetSchedulerState+0x34>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd02:	2301      	movs	r3, #1
 800bd04:	607b      	str	r3, [r7, #4]
 800bd06:	e008      	b.n	800bd1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd08:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <xTaskGetSchedulerState+0x38>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd10:	2302      	movs	r3, #2
 800bd12:	607b      	str	r3, [r7, #4]
 800bd14:	e001      	b.n	800bd1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd1a:	687b      	ldr	r3, [r7, #4]
	}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	20001520 	.word	0x20001520
 800bd2c:	2000153c 	.word	0x2000153c

0800bd30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d056      	beq.n	800bdf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd46:	4b2e      	ldr	r3, [pc, #184]	; (800be00 <xTaskPriorityDisinherit+0xd0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d00a      	beq.n	800bd66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	60fb      	str	r3, [r7, #12]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	60bb      	str	r3, [r7, #8]
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd88:	1e5a      	subs	r2, r3, #1
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d02c      	beq.n	800bdf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d128      	bne.n	800bdf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fbf2 	bl	800a590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <xTaskPriorityDisinherit+0xd4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d903      	bls.n	800bdd4 <xTaskPriorityDisinherit+0xa4>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	4a0c      	ldr	r2, [pc, #48]	; (800be04 <xTaskPriorityDisinherit+0xd4>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a09      	ldr	r2, [pc, #36]	; (800be08 <xTaskPriorityDisinherit+0xd8>)
 800bde2:	441a      	add	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe fb73 	bl	800a4d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdf4:	697b      	ldr	r3, [r7, #20]
	}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20001040 	.word	0x20001040
 800be04:	2000151c 	.word	0x2000151c
 800be08:	20001044 	.word	0x20001044

0800be0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be16:	4b21      	ldr	r3, [pc, #132]	; (800be9c <prvAddCurrentTaskToDelayedList+0x90>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be1c:	4b20      	ldr	r3, [pc, #128]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3304      	adds	r3, #4
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fbb4 	bl	800a590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2e:	d10a      	bne.n	800be46 <prvAddCurrentTaskToDelayedList+0x3a>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d007      	beq.n	800be46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3304      	adds	r3, #4
 800be3c:	4619      	mov	r1, r3
 800be3e:	4819      	ldr	r0, [pc, #100]	; (800bea4 <prvAddCurrentTaskToDelayedList+0x98>)
 800be40:	f7fe fb49 	bl	800a4d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be44:	e026      	b.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4413      	add	r3, r2
 800be4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be4e:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d209      	bcs.n	800be72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3304      	adds	r3, #4
 800be68:	4619      	mov	r1, r3
 800be6a:	4610      	mov	r0, r2
 800be6c:	f7fe fb57 	bl	800a51e <vListInsert>
}
 800be70:	e010      	b.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be72:	4b0e      	ldr	r3, [pc, #56]	; (800beac <prvAddCurrentTaskToDelayedList+0xa0>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	4610      	mov	r0, r2
 800be80:	f7fe fb4d 	bl	800a51e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d202      	bcs.n	800be94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be8e:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	6013      	str	r3, [r2, #0]
}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20001518 	.word	0x20001518
 800bea0:	20001040 	.word	0x20001040
 800bea4:	20001500 	.word	0x20001500
 800bea8:	200014d0 	.word	0x200014d0
 800beac:	200014cc 	.word	0x200014cc
 800beb0:	20001534 	.word	0x20001534

0800beb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bebe:	f000 fb07 	bl	800c4d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <xTimerCreateTimerTask+0x80>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d021      	beq.n	800bf0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bed2:	1d3a      	adds	r2, r7, #4
 800bed4:	f107 0108 	add.w	r1, r7, #8
 800bed8:	f107 030c 	add.w	r3, r7, #12
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fab3 	bl	800a448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bee2:	6879      	ldr	r1, [r7, #4]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	9202      	str	r2, [sp, #8]
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	2302      	movs	r3, #2
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	2300      	movs	r3, #0
 800bef2:	460a      	mov	r2, r1
 800bef4:	4910      	ldr	r1, [pc, #64]	; (800bf38 <xTimerCreateTimerTask+0x84>)
 800bef6:	4811      	ldr	r0, [pc, #68]	; (800bf3c <xTimerCreateTimerTask+0x88>)
 800bef8:	f7ff f860 	bl	800afbc <xTaskCreateStatic>
 800befc:	4603      	mov	r3, r0
 800befe:	4a10      	ldr	r2, [pc, #64]	; (800bf40 <xTimerCreateTimerTask+0x8c>)
 800bf00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf02:	4b0f      	ldr	r3, [pc, #60]	; (800bf40 <xTimerCreateTimerTask+0x8c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	613b      	str	r3, [r7, #16]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf2a:	697b      	ldr	r3, [r7, #20]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20001570 	.word	0x20001570
 800bf38:	0800d874 	.word	0x0800d874
 800bf3c:	0800c079 	.word	0x0800c079
 800bf40:	20001574 	.word	0x20001574

0800bf44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08a      	sub	sp, #40	; 0x28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10a      	bne.n	800bf72 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	623b      	str	r3, [r7, #32]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf72:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <xTimerGenericCommand+0x98>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d02a      	beq.n	800bfd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b05      	cmp	r3, #5
 800bf8a:	dc18      	bgt.n	800bfbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf8c:	f7ff feb2 	bl	800bcf4 <xTaskGetSchedulerState>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d109      	bne.n	800bfaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf96:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <xTimerGenericCommand+0x98>)
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f107 0110 	add.w	r1, r7, #16
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa2:	f7fe fc23 	bl	800a7ec <xQueueGenericSend>
 800bfa6:	6278      	str	r0, [r7, #36]	; 0x24
 800bfa8:	e012      	b.n	800bfd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bfaa:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <xTimerGenericCommand+0x98>)
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	f107 0110 	add.w	r1, r7, #16
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f7fe fc19 	bl	800a7ec <xQueueGenericSend>
 800bfba:	6278      	str	r0, [r7, #36]	; 0x24
 800bfbc:	e008      	b.n	800bfd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <xTimerGenericCommand+0x98>)
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	f107 0110 	add.w	r1, r7, #16
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	f7fe fd0d 	bl	800a9e8 <xQueueGenericSendFromISR>
 800bfce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3728      	adds	r7, #40	; 0x28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20001570 	.word	0x20001570

0800bfe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfea:	4b22      	ldr	r3, [pc, #136]	; (800c074 <prvProcessExpiredTimer+0x94>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fac9 	bl	800a590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d022      	beq.n	800c052 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	699a      	ldr	r2, [r3, #24]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	18d1      	adds	r1, r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	6978      	ldr	r0, [r7, #20]
 800c01a:	f000 f8d1 	bl	800c1c0 <prvInsertTimerInActiveList>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01f      	beq.n	800c064 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c024:	2300      	movs	r3, #0
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	2300      	movs	r3, #0
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	2100      	movs	r1, #0
 800c02e:	6978      	ldr	r0, [r7, #20]
 800c030:	f7ff ff88 	bl	800bf44 <xTimerGenericCommand>
 800c034:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d113      	bne.n	800c064 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	60fb      	str	r3, [r7, #12]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c058:	f023 0301 	bic.w	r3, r3, #1
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	6a1b      	ldr	r3, [r3, #32]
 800c068:	6978      	ldr	r0, [r7, #20]
 800c06a:	4798      	blx	r3
}
 800c06c:	bf00      	nop
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20001568 	.word	0x20001568

0800c078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f857 	bl	800c138 <prvGetNextExpireTime>
 800c08a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	4619      	mov	r1, r3
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f803 	bl	800c09c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c096:	f000 f8d5 	bl	800c244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c09a:	e7f1      	b.n	800c080 <prvTimerTask+0x8>

0800c09c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0a6:	f7ff fa43 	bl	800b530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0aa:	f107 0308 	add.w	r3, r7, #8
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f866 	bl	800c180 <prvSampleTimeNow>
 800c0b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d130      	bne.n	800c11e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <prvProcessTimerOrBlockTask+0x3c>
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d806      	bhi.n	800c0d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0ca:	f7ff fa3f 	bl	800b54c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0ce:	68f9      	ldr	r1, [r7, #12]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff ff85 	bl	800bfe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0d6:	e024      	b.n	800c122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d008      	beq.n	800c0f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0de:	4b13      	ldr	r3, [pc, #76]	; (800c12c <prvProcessTimerOrBlockTask+0x90>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <prvProcessTimerOrBlockTask+0x50>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e000      	b.n	800c0ee <prvProcessTimerOrBlockTask+0x52>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <prvProcessTimerOrBlockTask+0x94>)
 800c0f2:	6818      	ldr	r0, [r3, #0]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	f7fe ff29 	bl	800af54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c102:	f7ff fa23 	bl	800b54c <xTaskResumeAll>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <prvProcessTimerOrBlockTask+0x98>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	f3bf 8f6f 	isb	sy
}
 800c11c:	e001      	b.n	800c122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c11e:	f7ff fa15 	bl	800b54c <xTaskResumeAll>
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000156c 	.word	0x2000156c
 800c130:	20001570 	.word	0x20001570
 800c134:	e000ed04 	.word	0xe000ed04

0800c138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <prvGetNextExpireTime+0x44>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <prvGetNextExpireTime+0x16>
 800c14a:	2201      	movs	r2, #1
 800c14c:	e000      	b.n	800c150 <prvGetNextExpireTime+0x18>
 800c14e:	2200      	movs	r2, #0
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d105      	bne.n	800c168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c15c:	4b07      	ldr	r3, [pc, #28]	; (800c17c <prvGetNextExpireTime+0x44>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e001      	b.n	800c16c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c16c:	68fb      	ldr	r3, [r7, #12]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20001568 	.word	0x20001568

0800c180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c188:	f7ff fa7e 	bl	800b688 <xTaskGetTickCount>
 800c18c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c18e:	4b0b      	ldr	r3, [pc, #44]	; (800c1bc <prvSampleTimeNow+0x3c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	429a      	cmp	r2, r3
 800c196:	d205      	bcs.n	800c1a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c198:	f000 f936 	bl	800c408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1aa:	4a04      	ldr	r2, [pc, #16]	; (800c1bc <prvSampleTimeNow+0x3c>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20001578 	.word	0x20001578

0800c1c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d812      	bhi.n	800c20c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	1ad2      	subs	r2, r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d302      	bcc.n	800c1fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]
 800c1f8:	e01b      	b.n	800c232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1fa:	4b10      	ldr	r3, [pc, #64]	; (800c23c <prvInsertTimerInActiveList+0x7c>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3304      	adds	r3, #4
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7fe f98a 	bl	800a51e <vListInsert>
 800c20a:	e012      	b.n	800c232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d206      	bcs.n	800c222 <prvInsertTimerInActiveList+0x62>
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d302      	bcc.n	800c222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	e007      	b.n	800c232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c222:	4b07      	ldr	r3, [pc, #28]	; (800c240 <prvInsertTimerInActiveList+0x80>)
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3304      	adds	r3, #4
 800c22a:	4619      	mov	r1, r3
 800c22c:	4610      	mov	r0, r2
 800c22e:	f7fe f976 	bl	800a51e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c232:	697b      	ldr	r3, [r7, #20]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	2000156c 	.word	0x2000156c
 800c240:	20001568 	.word	0x20001568

0800c244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	; 0x38
 800c248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c24a:	e0ca      	b.n	800c3e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	da18      	bge.n	800c284 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c252:	1d3b      	adds	r3, r7, #4
 800c254:	3304      	adds	r3, #4
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10a      	bne.n	800c274 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	61fb      	str	r3, [r7, #28]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c27a:	6850      	ldr	r0, [r2, #4]
 800c27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c27e:	6892      	ldr	r2, [r2, #8]
 800c280:	4611      	mov	r1, r2
 800c282:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f2c0 80ab 	blt.w	800c3e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d004      	beq.n	800c2a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	3304      	adds	r3, #4
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fe f977 	bl	800a590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2a2:	463b      	mov	r3, r7
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff ff6b 	bl	800c180 <prvSampleTimeNow>
 800c2aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	f200 8096 	bhi.w	800c3e0 <prvProcessReceivedCommands+0x19c>
 800c2b4:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <prvProcessReceivedCommands+0x78>)
 800c2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ba:	bf00      	nop
 800c2bc:	0800c2e5 	.word	0x0800c2e5
 800c2c0:	0800c2e5 	.word	0x0800c2e5
 800c2c4:	0800c2e5 	.word	0x0800c2e5
 800c2c8:	0800c359 	.word	0x0800c359
 800c2cc:	0800c36d 	.word	0x0800c36d
 800c2d0:	0800c3b7 	.word	0x0800c3b7
 800c2d4:	0800c2e5 	.word	0x0800c2e5
 800c2d8:	0800c2e5 	.word	0x0800c2e5
 800c2dc:	0800c359 	.word	0x0800c359
 800c2e0:	0800c36d 	.word	0x0800c36d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ea:	f043 0301 	orr.w	r3, r3, #1
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	18d1      	adds	r1, r2, r3
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c304:	f7ff ff5c 	bl	800c1c0 <prvInsertTimerInActiveList>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d069      	beq.n	800c3e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d05e      	beq.n	800c3e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	441a      	add	r2, r3
 800c32c:	2300      	movs	r3, #0
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	2300      	movs	r3, #0
 800c332:	2100      	movs	r1, #0
 800c334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c336:	f7ff fe05 	bl	800bf44 <xTimerGenericCommand>
 800c33a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d14f      	bne.n	800c3e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	61bb      	str	r3, [r7, #24]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	b2da      	uxtb	r2, r3
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c36a:	e03a      	b.n	800c3e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c372:	f043 0301 	orr.w	r3, r3, #1
 800c376:	b2da      	uxtb	r2, r3
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10a      	bne.n	800c3a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	617b      	str	r3, [r7, #20]
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	18d1      	adds	r1, r2, r3
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3b0:	f7ff ff06 	bl	800c1c0 <prvInsertTimerInActiveList>
					break;
 800c3b4:	e015      	b.n	800c3e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3bc:	f003 0302 	and.w	r3, r3, #2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d103      	bne.n	800c3cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c6:	f000 fbdb 	bl	800cb80 <vPortFree>
 800c3ca:	e00a      	b.n	800c3e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d2:	f023 0301 	bic.w	r3, r3, #1
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3de:	e000      	b.n	800c3e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c3e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3e2:	4b08      	ldr	r3, [pc, #32]	; (800c404 <prvProcessReceivedCommands+0x1c0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	1d39      	adds	r1, r7, #4
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fb98 	bl	800ab20 <xQueueReceive>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f47f af2a 	bne.w	800c24c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	3730      	adds	r7, #48	; 0x30
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20001570 	.word	0x20001570

0800c408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c40e:	e048      	b.n	800c4a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c410:	4b2d      	ldr	r3, [pc, #180]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c41a:	4b2b      	ldr	r3, [pc, #172]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3304      	adds	r3, #4
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe f8b1 	bl	800a590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d02e      	beq.n	800c4a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4413      	add	r3, r2
 800c44c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	429a      	cmp	r2, r3
 800c454:	d90e      	bls.n	800c474 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c462:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3304      	adds	r3, #4
 800c46a:	4619      	mov	r1, r3
 800c46c:	4610      	mov	r0, r2
 800c46e:	f7fe f856 	bl	800a51e <vListInsert>
 800c472:	e016      	b.n	800c4a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c474:	2300      	movs	r3, #0
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	2300      	movs	r3, #0
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fd60 	bl	800bf44 <xTimerGenericCommand>
 800c484:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	603b      	str	r3, [r7, #0]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1b1      	bne.n	800c410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4ac:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4b2:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <prvSwitchTimerLists+0xc4>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a04      	ldr	r2, [pc, #16]	; (800c4c8 <prvSwitchTimerLists+0xc0>)
 800c4b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4ba:	4a04      	ldr	r2, [pc, #16]	; (800c4cc <prvSwitchTimerLists+0xc4>)
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	6013      	str	r3, [r2, #0]
}
 800c4c0:	bf00      	nop
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20001568 	.word	0x20001568
 800c4cc:	2000156c 	.word	0x2000156c

0800c4d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4d6:	f000 f965 	bl	800c7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <prvCheckForValidListAndQueue+0x60>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d120      	bne.n	800c524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4e2:	4814      	ldr	r0, [pc, #80]	; (800c534 <prvCheckForValidListAndQueue+0x64>)
 800c4e4:	f7fd ffca 	bl	800a47c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4e8:	4813      	ldr	r0, [pc, #76]	; (800c538 <prvCheckForValidListAndQueue+0x68>)
 800c4ea:	f7fd ffc7 	bl	800a47c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <prvCheckForValidListAndQueue+0x6c>)
 800c4f0:	4a10      	ldr	r2, [pc, #64]	; (800c534 <prvCheckForValidListAndQueue+0x64>)
 800c4f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4f4:	4b12      	ldr	r3, [pc, #72]	; (800c540 <prvCheckForValidListAndQueue+0x70>)
 800c4f6:	4a10      	ldr	r2, [pc, #64]	; (800c538 <prvCheckForValidListAndQueue+0x68>)
 800c4f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <prvCheckForValidListAndQueue+0x74>)
 800c500:	4a11      	ldr	r2, [pc, #68]	; (800c548 <prvCheckForValidListAndQueue+0x78>)
 800c502:	2110      	movs	r1, #16
 800c504:	200a      	movs	r0, #10
 800c506:	f7fe f8d5 	bl	800a6b4 <xQueueGenericCreateStatic>
 800c50a:	4603      	mov	r3, r0
 800c50c:	4a08      	ldr	r2, [pc, #32]	; (800c530 <prvCheckForValidListAndQueue+0x60>)
 800c50e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <prvCheckForValidListAndQueue+0x60>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <prvCheckForValidListAndQueue+0x60>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	490b      	ldr	r1, [pc, #44]	; (800c54c <prvCheckForValidListAndQueue+0x7c>)
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe fcee 	bl	800af00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c524:	f000 f96e 	bl	800c804 <vPortExitCritical>
}
 800c528:	bf00      	nop
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20001570 	.word	0x20001570
 800c534:	20001540 	.word	0x20001540
 800c538:	20001554 	.word	0x20001554
 800c53c:	20001568 	.word	0x20001568
 800c540:	2000156c 	.word	0x2000156c
 800c544:	2000161c 	.word	0x2000161c
 800c548:	2000157c 	.word	0x2000157c
 800c54c:	0800d87c 	.word	0x0800d87c

0800c550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3b04      	subs	r3, #4
 800c560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3b04      	subs	r3, #4
 800c56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	f023 0201 	bic.w	r2, r3, #1
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3b04      	subs	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c580:	4a0c      	ldr	r2, [pc, #48]	; (800c5b4 <pxPortInitialiseStack+0x64>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3b14      	subs	r3, #20
 800c58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3b04      	subs	r3, #4
 800c596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f06f 0202 	mvn.w	r2, #2
 800c59e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3b20      	subs	r3, #32
 800c5a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	0800c5b9 	.word	0x0800c5b9

0800c5b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <prvTaskExitError+0x54>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d00a      	beq.n	800c5e2 <prvTaskExitError+0x2a>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <prvTaskExitError+0x28>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	60bb      	str	r3, [r7, #8]
}
 800c5f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5f6:	bf00      	nop
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0fc      	beq.n	800c5f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5fe:	bf00      	nop
 800c600:	bf00      	nop
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	20000040 	.word	0x20000040

0800c610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c610:	4b07      	ldr	r3, [pc, #28]	; (800c630 <pxCurrentTCBConst2>)
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	6808      	ldr	r0, [r1, #0]
 800c616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	f380 8809 	msr	PSP, r0
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8811 	msr	BASEPRI, r0
 800c62a:	4770      	bx	lr
 800c62c:	f3af 8000 	nop.w

0800c630 <pxCurrentTCBConst2>:
 800c630:	20001040 	.word	0x20001040
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop

0800c638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c638:	4808      	ldr	r0, [pc, #32]	; (800c65c <prvPortStartFirstTask+0x24>)
 800c63a:	6800      	ldr	r0, [r0, #0]
 800c63c:	6800      	ldr	r0, [r0, #0]
 800c63e:	f380 8808 	msr	MSP, r0
 800c642:	f04f 0000 	mov.w	r0, #0
 800c646:	f380 8814 	msr	CONTROL, r0
 800c64a:	b662      	cpsie	i
 800c64c:	b661      	cpsie	f
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	df00      	svc	0
 800c658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c65a:	bf00      	nop
 800c65c:	e000ed08 	.word	0xe000ed08

0800c660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c666:	4b46      	ldr	r3, [pc, #280]	; (800c780 <xPortStartScheduler+0x120>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a46      	ldr	r2, [pc, #280]	; (800c784 <xPortStartScheduler+0x124>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d10a      	bne.n	800c686 <xPortStartScheduler+0x26>
	__asm volatile
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	613b      	str	r3, [r7, #16]
}
 800c682:	bf00      	nop
 800c684:	e7fe      	b.n	800c684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c686:	4b3e      	ldr	r3, [pc, #248]	; (800c780 <xPortStartScheduler+0x120>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a3f      	ldr	r2, [pc, #252]	; (800c788 <xPortStartScheduler+0x128>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d10a      	bne.n	800c6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6a6:	4b39      	ldr	r3, [pc, #228]	; (800c78c <xPortStartScheduler+0x12c>)
 800c6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	22ff      	movs	r2, #255	; 0xff
 800c6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	4b31      	ldr	r3, [pc, #196]	; (800c790 <xPortStartScheduler+0x130>)
 800c6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6ce:	4b31      	ldr	r3, [pc, #196]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6d4:	e009      	b.n	800c6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6d6:	4b2f      	ldr	r3, [pc, #188]	; (800c794 <xPortStartScheduler+0x134>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	4a2d      	ldr	r2, [pc, #180]	; (800c794 <xPortStartScheduler+0x134>)
 800c6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6ea:	78fb      	ldrb	r3, [r7, #3]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f2:	2b80      	cmp	r3, #128	; 0x80
 800c6f4:	d0ef      	beq.n	800c6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6f6:	4b27      	ldr	r3, [pc, #156]	; (800c794 <xPortStartScheduler+0x134>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f1c3 0307 	rsb	r3, r3, #7
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d00a      	beq.n	800c718 <xPortStartScheduler+0xb8>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	60bb      	str	r3, [r7, #8]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c718:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <xPortStartScheduler+0x134>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	021b      	lsls	r3, r3, #8
 800c71e:	4a1d      	ldr	r2, [pc, #116]	; (800c794 <xPortStartScheduler+0x134>)
 800c720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <xPortStartScheduler+0x134>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c72a:	4a1a      	ldr	r2, [pc, #104]	; (800c794 <xPortStartScheduler+0x134>)
 800c72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	b2da      	uxtb	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c736:	4b18      	ldr	r3, [pc, #96]	; (800c798 <xPortStartScheduler+0x138>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <xPortStartScheduler+0x138>)
 800c73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c742:	4b15      	ldr	r3, [pc, #84]	; (800c798 <xPortStartScheduler+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a14      	ldr	r2, [pc, #80]	; (800c798 <xPortStartScheduler+0x138>)
 800c748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c74e:	f000 f8dd 	bl	800c90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c752:	4b12      	ldr	r3, [pc, #72]	; (800c79c <xPortStartScheduler+0x13c>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c758:	f000 f8fc 	bl	800c954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a0f      	ldr	r2, [pc, #60]	; (800c7a0 <xPortStartScheduler+0x140>)
 800c762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c768:	f7ff ff66 	bl	800c638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c76c:	f7ff f856 	bl	800b81c <vTaskSwitchContext>
	prvTaskExitError();
 800c770:	f7ff ff22 	bl	800c5b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	e000ed00 	.word	0xe000ed00
 800c784:	410fc271 	.word	0x410fc271
 800c788:	410fc270 	.word	0x410fc270
 800c78c:	e000e400 	.word	0xe000e400
 800c790:	2000166c 	.word	0x2000166c
 800c794:	20001670 	.word	0x20001670
 800c798:	e000ed20 	.word	0xe000ed20
 800c79c:	20000040 	.word	0x20000040
 800c7a0:	e000ef34 	.word	0xe000ef34

0800c7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7be:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	4a0d      	ldr	r2, [pc, #52]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <vPortEnterCritical+0x58>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10f      	bne.n	800c7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7d0:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <vPortEnterCritical+0x5c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	603b      	str	r3, [r7, #0]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <vPortEnterCritical+0x4a>
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	20000040 	.word	0x20000040
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c80a:	4b12      	ldr	r3, [pc, #72]	; (800c854 <vPortExitCritical+0x50>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <vPortExitCritical+0x24>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	607b      	str	r3, [r7, #4]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <vPortExitCritical+0x50>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	4a09      	ldr	r2, [pc, #36]	; (800c854 <vPortExitCritical+0x50>)
 800c830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c832:	4b08      	ldr	r3, [pc, #32]	; (800c854 <vPortExitCritical+0x50>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <vPortExitCritical+0x42>
 800c83a:	2300      	movs	r3, #0
 800c83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f383 8811 	msr	BASEPRI, r3
}
 800c844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20000040 	.word	0x20000040
	...

0800c860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c860:	f3ef 8009 	mrs	r0, PSP
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <pxCurrentTCBConst>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	f01e 0f10 	tst.w	lr, #16
 800c870:	bf08      	it	eq
 800c872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87a:	6010      	str	r0, [r2, #0]
 800c87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c884:	f380 8811 	msr	BASEPRI, r0
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f7fe ffc4 	bl	800b81c <vTaskSwitchContext>
 800c894:	f04f 0000 	mov.w	r0, #0
 800c898:	f380 8811 	msr	BASEPRI, r0
 800c89c:	bc09      	pop	{r0, r3}
 800c89e:	6819      	ldr	r1, [r3, #0]
 800c8a0:	6808      	ldr	r0, [r1, #0]
 800c8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a6:	f01e 0f10 	tst.w	lr, #16
 800c8aa:	bf08      	it	eq
 800c8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8b0:	f380 8809 	msr	PSP, r0
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst>:
 800c8c0:	20001040 	.word	0x20001040
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	607b      	str	r3, [r7, #4]
}
 800c8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8e2:	f7fe fee1 	bl	800b6a8 <xTaskIncrementTick>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <xPortSysTickHandler+0x40>)
 800c8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <vPortSetupTimerInterrupt+0x34>)
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <vPortSetupTimerInterrupt+0x38>)
 800c918:	2200      	movs	r2, #0
 800c91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c91c:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <vPortSetupTimerInterrupt+0x3c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a0a      	ldr	r2, [pc, #40]	; (800c94c <vPortSetupTimerInterrupt+0x40>)
 800c922:	fba2 2303 	umull	r2, r3, r2, r3
 800c926:	099b      	lsrs	r3, r3, #6
 800c928:	4a09      	ldr	r2, [pc, #36]	; (800c950 <vPortSetupTimerInterrupt+0x44>)
 800c92a:	3b01      	subs	r3, #1
 800c92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c92e:	4b04      	ldr	r3, [pc, #16]	; (800c940 <vPortSetupTimerInterrupt+0x34>)
 800c930:	2207      	movs	r2, #7
 800c932:	601a      	str	r2, [r3, #0]
}
 800c934:	bf00      	nop
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	e000e010 	.word	0xe000e010
 800c944:	e000e018 	.word	0xe000e018
 800c948:	20000034 	.word	0x20000034
 800c94c:	10624dd3 	.word	0x10624dd3
 800c950:	e000e014 	.word	0xe000e014

0800c954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c964 <vPortEnableVFP+0x10>
 800c958:	6801      	ldr	r1, [r0, #0]
 800c95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c95e:	6001      	str	r1, [r0, #0]
 800c960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c962:	bf00      	nop
 800c964:	e000ed88 	.word	0xe000ed88

0800c968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c96e:	f3ef 8305 	mrs	r3, IPSR
 800c972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b0f      	cmp	r3, #15
 800c978:	d914      	bls.n	800c9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <vPortValidateInterruptPriority+0x70>)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	4413      	add	r3, r2
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c984:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <vPortValidateInterruptPriority+0x74>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	7afa      	ldrb	r2, [r7, #11]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d20a      	bcs.n	800c9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9a4:	4b0e      	ldr	r3, [pc, #56]	; (800c9e0 <vPortValidateInterruptPriority+0x78>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9ac:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <vPortValidateInterruptPriority+0x7c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d90a      	bls.n	800c9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	603b      	str	r3, [r7, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <vPortValidateInterruptPriority+0x60>
	}
 800c9ca:	bf00      	nop
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	e000e3f0 	.word	0xe000e3f0
 800c9dc:	2000166c 	.word	0x2000166c
 800c9e0:	e000ed0c 	.word	0xe000ed0c
 800c9e4:	20001670 	.word	0x20001670

0800c9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08a      	sub	sp, #40	; 0x28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9f4:	f7fe fd9c 	bl	800b530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9f8:	4b5b      	ldr	r3, [pc, #364]	; (800cb68 <pvPortMalloc+0x180>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca00:	f000 f920 	bl	800cc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca04:	4b59      	ldr	r3, [pc, #356]	; (800cb6c <pvPortMalloc+0x184>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f040 8093 	bne.w	800cb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01d      	beq.n	800ca54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca18:	2208      	movs	r2, #8
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d014      	beq.n	800ca54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f023 0307 	bic.w	r3, r3, #7
 800ca30:	3308      	adds	r3, #8
 800ca32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <pvPortMalloc+0x6c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	617b      	str	r3, [r7, #20]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d06e      	beq.n	800cb38 <pvPortMalloc+0x150>
 800ca5a:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <pvPortMalloc+0x188>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d869      	bhi.n	800cb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca64:	4b43      	ldr	r3, [pc, #268]	; (800cb74 <pvPortMalloc+0x18c>)
 800ca66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca68:	4b42      	ldr	r3, [pc, #264]	; (800cb74 <pvPortMalloc+0x18c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca6e:	e004      	b.n	800ca7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d903      	bls.n	800ca8c <pvPortMalloc+0xa4>
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d1f1      	bne.n	800ca70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca8c:	4b36      	ldr	r3, [pc, #216]	; (800cb68 <pvPortMalloc+0x180>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d050      	beq.n	800cb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca96:	6a3b      	ldr	r3, [r7, #32]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	2308      	movs	r3, #8
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d91f      	bls.n	800caf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4413      	add	r3, r2
 800cabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <pvPortMalloc+0xf8>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	613b      	str	r3, [r7, #16]
}
 800cadc:	bf00      	nop
 800cade:	e7fe      	b.n	800cade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800caf2:	69b8      	ldr	r0, [r7, #24]
 800caf4:	f000 f908 	bl	800cd08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800caf8:	4b1d      	ldr	r3, [pc, #116]	; (800cb70 <pvPortMalloc+0x188>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	4a1b      	ldr	r2, [pc, #108]	; (800cb70 <pvPortMalloc+0x188>)
 800cb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb06:	4b1a      	ldr	r3, [pc, #104]	; (800cb70 <pvPortMalloc+0x188>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4b1b      	ldr	r3, [pc, #108]	; (800cb78 <pvPortMalloc+0x190>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d203      	bcs.n	800cb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb12:	4b17      	ldr	r3, [pc, #92]	; (800cb70 <pvPortMalloc+0x188>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a18      	ldr	r2, [pc, #96]	; (800cb78 <pvPortMalloc+0x190>)
 800cb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <pvPortMalloc+0x184>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb2e:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <pvPortMalloc+0x194>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	4a11      	ldr	r2, [pc, #68]	; (800cb7c <pvPortMalloc+0x194>)
 800cb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb38:	f7fe fd08 	bl	800b54c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00a      	beq.n	800cb5c <pvPortMalloc+0x174>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	60fb      	str	r3, [r7, #12]
}
 800cb58:	bf00      	nop
 800cb5a:	e7fe      	b.n	800cb5a <pvPortMalloc+0x172>
	return pvReturn;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000527c 	.word	0x2000527c
 800cb6c:	20005290 	.word	0x20005290
 800cb70:	20005280 	.word	0x20005280
 800cb74:	20005274 	.word	0x20005274
 800cb78:	20005284 	.word	0x20005284
 800cb7c:	20005288 	.word	0x20005288

0800cb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d04d      	beq.n	800cc2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb92:	2308      	movs	r3, #8
 800cb94:	425b      	negs	r3, r3
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4413      	add	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	4b24      	ldr	r3, [pc, #144]	; (800cc38 <vPortFree+0xb8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <vPortFree+0x44>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	60fb      	str	r3, [r7, #12]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00a      	beq.n	800cbe2 <vPortFree+0x62>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60bb      	str	r3, [r7, #8]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	4b14      	ldr	r3, [pc, #80]	; (800cc38 <vPortFree+0xb8>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01e      	beq.n	800cc2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d11a      	bne.n	800cc2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	4b0e      	ldr	r3, [pc, #56]	; (800cc38 <vPortFree+0xb8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	43db      	mvns	r3, r3
 800cc02:	401a      	ands	r2, r3
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc08:	f7fe fc92 	bl	800b530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <vPortFree+0xbc>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4413      	add	r3, r2
 800cc16:	4a09      	ldr	r2, [pc, #36]	; (800cc3c <vPortFree+0xbc>)
 800cc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc1a:	6938      	ldr	r0, [r7, #16]
 800cc1c:	f000 f874 	bl	800cd08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <vPortFree+0xc0>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	4a06      	ldr	r2, [pc, #24]	; (800cc40 <vPortFree+0xc0>)
 800cc28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc2a:	f7fe fc8f 	bl	800b54c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc2e:	bf00      	nop
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20005290 	.word	0x20005290
 800cc3c:	20005280 	.word	0x20005280
 800cc40:	2000528c 	.word	0x2000528c

0800cc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc50:	4b27      	ldr	r3, [pc, #156]	; (800ccf0 <prvHeapInit+0xac>)
 800cc52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00c      	beq.n	800cc78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3307      	adds	r3, #7
 800cc62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f023 0307 	bic.w	r3, r3, #7
 800cc6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	4a1f      	ldr	r2, [pc, #124]	; (800ccf0 <prvHeapInit+0xac>)
 800cc74:	4413      	add	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc7c:	4a1d      	ldr	r2, [pc, #116]	; (800ccf4 <prvHeapInit+0xb0>)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc82:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <prvHeapInit+0xb0>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc90:	2208      	movs	r2, #8
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	1a9b      	subs	r3, r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f023 0307 	bic.w	r3, r3, #7
 800cc9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <prvHeapInit+0xb4>)
 800cca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cca6:	4b14      	ldr	r3, [pc, #80]	; (800ccf8 <prvHeapInit+0xb4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccae:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <prvHeapInit+0xb4>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccc4:	4b0c      	ldr	r3, [pc, #48]	; (800ccf8 <prvHeapInit+0xb4>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	4a0a      	ldr	r2, [pc, #40]	; (800ccfc <prvHeapInit+0xb8>)
 800ccd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	4a09      	ldr	r2, [pc, #36]	; (800cd00 <prvHeapInit+0xbc>)
 800ccda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccdc:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <prvHeapInit+0xc0>)
 800ccde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	20001674 	.word	0x20001674
 800ccf4:	20005274 	.word	0x20005274
 800ccf8:	2000527c 	.word	0x2000527c
 800ccfc:	20005284 	.word	0x20005284
 800cd00:	20005280 	.word	0x20005280
 800cd04:	20005290 	.word	0x20005290

0800cd08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd10:	4b28      	ldr	r3, [pc, #160]	; (800cdb4 <prvInsertBlockIntoFreeList+0xac>)
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	e002      	b.n	800cd1c <prvInsertBlockIntoFreeList+0x14>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d8f7      	bhi.n	800cd16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	4413      	add	r3, r2
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d108      	bne.n	800cd4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	441a      	add	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	441a      	add	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d118      	bne.n	800cd90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d00d      	beq.n	800cd86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685a      	ldr	r2, [r3, #4]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	441a      	add	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	e008      	b.n	800cd98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd86:	4b0c      	ldr	r3, [pc, #48]	; (800cdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	e003      	b.n	800cd98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d002      	beq.n	800cda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda6:	bf00      	nop
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20005274 	.word	0x20005274
 800cdb8:	2000527c 	.word	0x2000527c

0800cdbc <siprintf>:
 800cdbc:	b40e      	push	{r1, r2, r3}
 800cdbe:	b500      	push	{lr}
 800cdc0:	b09c      	sub	sp, #112	; 0x70
 800cdc2:	ab1d      	add	r3, sp, #116	; 0x74
 800cdc4:	9002      	str	r0, [sp, #8]
 800cdc6:	9006      	str	r0, [sp, #24]
 800cdc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdcc:	4809      	ldr	r0, [pc, #36]	; (800cdf4 <siprintf+0x38>)
 800cdce:	9107      	str	r1, [sp, #28]
 800cdd0:	9104      	str	r1, [sp, #16]
 800cdd2:	4909      	ldr	r1, [pc, #36]	; (800cdf8 <siprintf+0x3c>)
 800cdd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd8:	9105      	str	r1, [sp, #20]
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	a902      	add	r1, sp, #8
 800cde0:	f000 f9a8 	bl	800d134 <_svfiprintf_r>
 800cde4:	9b02      	ldr	r3, [sp, #8]
 800cde6:	2200      	movs	r2, #0
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	b01c      	add	sp, #112	; 0x70
 800cdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdf0:	b003      	add	sp, #12
 800cdf2:	4770      	bx	lr
 800cdf4:	20000090 	.word	0x20000090
 800cdf8:	ffff0208 	.word	0xffff0208

0800cdfc <memset>:
 800cdfc:	4402      	add	r2, r0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d100      	bne.n	800ce06 <memset+0xa>
 800ce04:	4770      	bx	lr
 800ce06:	f803 1b01 	strb.w	r1, [r3], #1
 800ce0a:	e7f9      	b.n	800ce00 <memset+0x4>

0800ce0c <__errno>:
 800ce0c:	4b01      	ldr	r3, [pc, #4]	; (800ce14 <__errno+0x8>)
 800ce0e:	6818      	ldr	r0, [r3, #0]
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20000090 	.word	0x20000090

0800ce18 <__libc_init_array>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	4d0d      	ldr	r5, [pc, #52]	; (800ce50 <__libc_init_array+0x38>)
 800ce1c:	4c0d      	ldr	r4, [pc, #52]	; (800ce54 <__libc_init_array+0x3c>)
 800ce1e:	1b64      	subs	r4, r4, r5
 800ce20:	10a4      	asrs	r4, r4, #2
 800ce22:	2600      	movs	r6, #0
 800ce24:	42a6      	cmp	r6, r4
 800ce26:	d109      	bne.n	800ce3c <__libc_init_array+0x24>
 800ce28:	4d0b      	ldr	r5, [pc, #44]	; (800ce58 <__libc_init_array+0x40>)
 800ce2a:	4c0c      	ldr	r4, [pc, #48]	; (800ce5c <__libc_init_array+0x44>)
 800ce2c:	f000 fc72 	bl	800d714 <_init>
 800ce30:	1b64      	subs	r4, r4, r5
 800ce32:	10a4      	asrs	r4, r4, #2
 800ce34:	2600      	movs	r6, #0
 800ce36:	42a6      	cmp	r6, r4
 800ce38:	d105      	bne.n	800ce46 <__libc_init_array+0x2e>
 800ce3a:	bd70      	pop	{r4, r5, r6, pc}
 800ce3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce40:	4798      	blx	r3
 800ce42:	3601      	adds	r6, #1
 800ce44:	e7ee      	b.n	800ce24 <__libc_init_array+0xc>
 800ce46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce4a:	4798      	blx	r3
 800ce4c:	3601      	adds	r6, #1
 800ce4e:	e7f2      	b.n	800ce36 <__libc_init_array+0x1e>
 800ce50:	0800e3f8 	.word	0x0800e3f8
 800ce54:	0800e3f8 	.word	0x0800e3f8
 800ce58:	0800e3f8 	.word	0x0800e3f8
 800ce5c:	0800e3fc 	.word	0x0800e3fc

0800ce60 <__retarget_lock_acquire_recursive>:
 800ce60:	4770      	bx	lr

0800ce62 <__retarget_lock_release_recursive>:
 800ce62:	4770      	bx	lr

0800ce64 <strcpy>:
 800ce64:	4603      	mov	r3, r0
 800ce66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce6a:	f803 2b01 	strb.w	r2, [r3], #1
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	d1f9      	bne.n	800ce66 <strcpy+0x2>
 800ce72:	4770      	bx	lr

0800ce74 <memcpy>:
 800ce74:	440a      	add	r2, r1
 800ce76:	4291      	cmp	r1, r2
 800ce78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce7c:	d100      	bne.n	800ce80 <memcpy+0xc>
 800ce7e:	4770      	bx	lr
 800ce80:	b510      	push	{r4, lr}
 800ce82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	d1f9      	bne.n	800ce82 <memcpy+0xe>
 800ce8e:	bd10      	pop	{r4, pc}

0800ce90 <_free_r>:
 800ce90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d044      	beq.n	800cf20 <_free_r+0x90>
 800ce96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce9a:	9001      	str	r0, [sp, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f1a1 0404 	sub.w	r4, r1, #4
 800cea2:	bfb8      	it	lt
 800cea4:	18e4      	addlt	r4, r4, r3
 800cea6:	f000 f8df 	bl	800d068 <__malloc_lock>
 800ceaa:	4a1e      	ldr	r2, [pc, #120]	; (800cf24 <_free_r+0x94>)
 800ceac:	9801      	ldr	r0, [sp, #4]
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	b933      	cbnz	r3, 800cec0 <_free_r+0x30>
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6014      	str	r4, [r2, #0]
 800ceb6:	b003      	add	sp, #12
 800ceb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cebc:	f000 b8da 	b.w	800d074 <__malloc_unlock>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d908      	bls.n	800ced6 <_free_r+0x46>
 800cec4:	6825      	ldr	r5, [r4, #0]
 800cec6:	1961      	adds	r1, r4, r5
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1949      	addeq	r1, r1, r5
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	e7ed      	b.n	800ceb2 <_free_r+0x22>
 800ced6:	461a      	mov	r2, r3
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b10b      	cbz	r3, 800cee0 <_free_r+0x50>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d9fa      	bls.n	800ced6 <_free_r+0x46>
 800cee0:	6811      	ldr	r1, [r2, #0]
 800cee2:	1855      	adds	r5, r2, r1
 800cee4:	42a5      	cmp	r5, r4
 800cee6:	d10b      	bne.n	800cf00 <_free_r+0x70>
 800cee8:	6824      	ldr	r4, [r4, #0]
 800ceea:	4421      	add	r1, r4
 800ceec:	1854      	adds	r4, r2, r1
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	d1e0      	bne.n	800ceb6 <_free_r+0x26>
 800cef4:	681c      	ldr	r4, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6053      	str	r3, [r2, #4]
 800cefa:	440c      	add	r4, r1
 800cefc:	6014      	str	r4, [r2, #0]
 800cefe:	e7da      	b.n	800ceb6 <_free_r+0x26>
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x78>
 800cf02:	230c      	movs	r3, #12
 800cf04:	6003      	str	r3, [r0, #0]
 800cf06:	e7d6      	b.n	800ceb6 <_free_r+0x26>
 800cf08:	6825      	ldr	r5, [r4, #0]
 800cf0a:	1961      	adds	r1, r4, r5
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf04      	itt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	bf04      	itt	eq
 800cf18:	1949      	addeq	r1, r1, r5
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	6054      	str	r4, [r2, #4]
 800cf1e:	e7ca      	b.n	800ceb6 <_free_r+0x26>
 800cf20:	b003      	add	sp, #12
 800cf22:	bd30      	pop	{r4, r5, pc}
 800cf24:	200053d4 	.word	0x200053d4

0800cf28 <sbrk_aligned>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	4e0e      	ldr	r6, [pc, #56]	; (800cf64 <sbrk_aligned+0x3c>)
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	6831      	ldr	r1, [r6, #0]
 800cf30:	4605      	mov	r5, r0
 800cf32:	b911      	cbnz	r1, 800cf3a <sbrk_aligned+0x12>
 800cf34:	f000 fba6 	bl	800d684 <_sbrk_r>
 800cf38:	6030      	str	r0, [r6, #0]
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 fba1 	bl	800d684 <_sbrk_r>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	d00a      	beq.n	800cf5c <sbrk_aligned+0x34>
 800cf46:	1cc4      	adds	r4, r0, #3
 800cf48:	f024 0403 	bic.w	r4, r4, #3
 800cf4c:	42a0      	cmp	r0, r4
 800cf4e:	d007      	beq.n	800cf60 <sbrk_aligned+0x38>
 800cf50:	1a21      	subs	r1, r4, r0
 800cf52:	4628      	mov	r0, r5
 800cf54:	f000 fb96 	bl	800d684 <_sbrk_r>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d101      	bne.n	800cf60 <sbrk_aligned+0x38>
 800cf5c:	f04f 34ff 	mov.w	r4, #4294967295
 800cf60:	4620      	mov	r0, r4
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	200053d8 	.word	0x200053d8

0800cf68 <_malloc_r>:
 800cf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf6c:	1ccd      	adds	r5, r1, #3
 800cf6e:	f025 0503 	bic.w	r5, r5, #3
 800cf72:	3508      	adds	r5, #8
 800cf74:	2d0c      	cmp	r5, #12
 800cf76:	bf38      	it	cc
 800cf78:	250c      	movcc	r5, #12
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	4607      	mov	r7, r0
 800cf7e:	db01      	blt.n	800cf84 <_malloc_r+0x1c>
 800cf80:	42a9      	cmp	r1, r5
 800cf82:	d905      	bls.n	800cf90 <_malloc_r+0x28>
 800cf84:	230c      	movs	r3, #12
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	2600      	movs	r6, #0
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d064 <_malloc_r+0xfc>
 800cf94:	f000 f868 	bl	800d068 <__malloc_lock>
 800cf98:	f8d8 3000 	ldr.w	r3, [r8]
 800cf9c:	461c      	mov	r4, r3
 800cf9e:	bb5c      	cbnz	r4, 800cff8 <_malloc_r+0x90>
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	f7ff ffc0 	bl	800cf28 <sbrk_aligned>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	4604      	mov	r4, r0
 800cfac:	d155      	bne.n	800d05a <_malloc_r+0xf2>
 800cfae:	f8d8 4000 	ldr.w	r4, [r8]
 800cfb2:	4626      	mov	r6, r4
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	d145      	bne.n	800d044 <_malloc_r+0xdc>
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d048      	beq.n	800d04e <_malloc_r+0xe6>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	eb04 0903 	add.w	r9, r4, r3
 800cfc6:	f000 fb5d 	bl	800d684 <_sbrk_r>
 800cfca:	4581      	cmp	r9, r0
 800cfcc:	d13f      	bne.n	800d04e <_malloc_r+0xe6>
 800cfce:	6821      	ldr	r1, [r4, #0]
 800cfd0:	1a6d      	subs	r5, r5, r1
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7ff ffa7 	bl	800cf28 <sbrk_aligned>
 800cfda:	3001      	adds	r0, #1
 800cfdc:	d037      	beq.n	800d04e <_malloc_r+0xe6>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	442b      	add	r3, r5
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d038      	beq.n	800d05e <_malloc_r+0xf6>
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	42a2      	cmp	r2, r4
 800cff0:	d12b      	bne.n	800d04a <_malloc_r+0xe2>
 800cff2:	2200      	movs	r2, #0
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	e00f      	b.n	800d018 <_malloc_r+0xb0>
 800cff8:	6822      	ldr	r2, [r4, #0]
 800cffa:	1b52      	subs	r2, r2, r5
 800cffc:	d41f      	bmi.n	800d03e <_malloc_r+0xd6>
 800cffe:	2a0b      	cmp	r2, #11
 800d000:	d917      	bls.n	800d032 <_malloc_r+0xca>
 800d002:	1961      	adds	r1, r4, r5
 800d004:	42a3      	cmp	r3, r4
 800d006:	6025      	str	r5, [r4, #0]
 800d008:	bf18      	it	ne
 800d00a:	6059      	strne	r1, [r3, #4]
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	bf08      	it	eq
 800d010:	f8c8 1000 	streq.w	r1, [r8]
 800d014:	5162      	str	r2, [r4, r5]
 800d016:	604b      	str	r3, [r1, #4]
 800d018:	4638      	mov	r0, r7
 800d01a:	f104 060b 	add.w	r6, r4, #11
 800d01e:	f000 f829 	bl	800d074 <__malloc_unlock>
 800d022:	f026 0607 	bic.w	r6, r6, #7
 800d026:	1d23      	adds	r3, r4, #4
 800d028:	1af2      	subs	r2, r6, r3
 800d02a:	d0ae      	beq.n	800cf8a <_malloc_r+0x22>
 800d02c:	1b9b      	subs	r3, r3, r6
 800d02e:	50a3      	str	r3, [r4, r2]
 800d030:	e7ab      	b.n	800cf8a <_malloc_r+0x22>
 800d032:	42a3      	cmp	r3, r4
 800d034:	6862      	ldr	r2, [r4, #4]
 800d036:	d1dd      	bne.n	800cff4 <_malloc_r+0x8c>
 800d038:	f8c8 2000 	str.w	r2, [r8]
 800d03c:	e7ec      	b.n	800d018 <_malloc_r+0xb0>
 800d03e:	4623      	mov	r3, r4
 800d040:	6864      	ldr	r4, [r4, #4]
 800d042:	e7ac      	b.n	800cf9e <_malloc_r+0x36>
 800d044:	4634      	mov	r4, r6
 800d046:	6876      	ldr	r6, [r6, #4]
 800d048:	e7b4      	b.n	800cfb4 <_malloc_r+0x4c>
 800d04a:	4613      	mov	r3, r2
 800d04c:	e7cc      	b.n	800cfe8 <_malloc_r+0x80>
 800d04e:	230c      	movs	r3, #12
 800d050:	603b      	str	r3, [r7, #0]
 800d052:	4638      	mov	r0, r7
 800d054:	f000 f80e 	bl	800d074 <__malloc_unlock>
 800d058:	e797      	b.n	800cf8a <_malloc_r+0x22>
 800d05a:	6025      	str	r5, [r4, #0]
 800d05c:	e7dc      	b.n	800d018 <_malloc_r+0xb0>
 800d05e:	605b      	str	r3, [r3, #4]
 800d060:	deff      	udf	#255	; 0xff
 800d062:	bf00      	nop
 800d064:	200053d4 	.word	0x200053d4

0800d068 <__malloc_lock>:
 800d068:	4801      	ldr	r0, [pc, #4]	; (800d070 <__malloc_lock+0x8>)
 800d06a:	f7ff bef9 	b.w	800ce60 <__retarget_lock_acquire_recursive>
 800d06e:	bf00      	nop
 800d070:	200053d0 	.word	0x200053d0

0800d074 <__malloc_unlock>:
 800d074:	4801      	ldr	r0, [pc, #4]	; (800d07c <__malloc_unlock+0x8>)
 800d076:	f7ff bef4 	b.w	800ce62 <__retarget_lock_release_recursive>
 800d07a:	bf00      	nop
 800d07c:	200053d0 	.word	0x200053d0

0800d080 <__ssputs_r>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	688e      	ldr	r6, [r1, #8]
 800d086:	461f      	mov	r7, r3
 800d088:	42be      	cmp	r6, r7
 800d08a:	680b      	ldr	r3, [r1, #0]
 800d08c:	4682      	mov	sl, r0
 800d08e:	460c      	mov	r4, r1
 800d090:	4690      	mov	r8, r2
 800d092:	d82c      	bhi.n	800d0ee <__ssputs_r+0x6e>
 800d094:	898a      	ldrh	r2, [r1, #12]
 800d096:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d09a:	d026      	beq.n	800d0ea <__ssputs_r+0x6a>
 800d09c:	6965      	ldr	r5, [r4, #20]
 800d09e:	6909      	ldr	r1, [r1, #16]
 800d0a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a4:	eba3 0901 	sub.w	r9, r3, r1
 800d0a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0ac:	1c7b      	adds	r3, r7, #1
 800d0ae:	444b      	add	r3, r9
 800d0b0:	106d      	asrs	r5, r5, #1
 800d0b2:	429d      	cmp	r5, r3
 800d0b4:	bf38      	it	cc
 800d0b6:	461d      	movcc	r5, r3
 800d0b8:	0553      	lsls	r3, r2, #21
 800d0ba:	d527      	bpl.n	800d10c <__ssputs_r+0x8c>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	f7ff ff53 	bl	800cf68 <_malloc_r>
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	b360      	cbz	r0, 800d120 <__ssputs_r+0xa0>
 800d0c6:	6921      	ldr	r1, [r4, #16]
 800d0c8:	464a      	mov	r2, r9
 800d0ca:	f7ff fed3 	bl	800ce74 <memcpy>
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d8:	81a3      	strh	r3, [r4, #12]
 800d0da:	6126      	str	r6, [r4, #16]
 800d0dc:	6165      	str	r5, [r4, #20]
 800d0de:	444e      	add	r6, r9
 800d0e0:	eba5 0509 	sub.w	r5, r5, r9
 800d0e4:	6026      	str	r6, [r4, #0]
 800d0e6:	60a5      	str	r5, [r4, #8]
 800d0e8:	463e      	mov	r6, r7
 800d0ea:	42be      	cmp	r6, r7
 800d0ec:	d900      	bls.n	800d0f0 <__ssputs_r+0x70>
 800d0ee:	463e      	mov	r6, r7
 800d0f0:	6820      	ldr	r0, [r4, #0]
 800d0f2:	4632      	mov	r2, r6
 800d0f4:	4641      	mov	r1, r8
 800d0f6:	f000 faab 	bl	800d650 <memmove>
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	1b9b      	subs	r3, r3, r6
 800d0fe:	60a3      	str	r3, [r4, #8]
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	4433      	add	r3, r6
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	2000      	movs	r0, #0
 800d108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10c:	462a      	mov	r2, r5
 800d10e:	f000 fac9 	bl	800d6a4 <_realloc_r>
 800d112:	4606      	mov	r6, r0
 800d114:	2800      	cmp	r0, #0
 800d116:	d1e0      	bne.n	800d0da <__ssputs_r+0x5a>
 800d118:	6921      	ldr	r1, [r4, #16]
 800d11a:	4650      	mov	r0, sl
 800d11c:	f7ff feb8 	bl	800ce90 <_free_r>
 800d120:	230c      	movs	r3, #12
 800d122:	f8ca 3000 	str.w	r3, [sl]
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	f04f 30ff 	mov.w	r0, #4294967295
 800d132:	e7e9      	b.n	800d108 <__ssputs_r+0x88>

0800d134 <_svfiprintf_r>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	4698      	mov	r8, r3
 800d13a:	898b      	ldrh	r3, [r1, #12]
 800d13c:	061b      	lsls	r3, r3, #24
 800d13e:	b09d      	sub	sp, #116	; 0x74
 800d140:	4607      	mov	r7, r0
 800d142:	460d      	mov	r5, r1
 800d144:	4614      	mov	r4, r2
 800d146:	d50e      	bpl.n	800d166 <_svfiprintf_r+0x32>
 800d148:	690b      	ldr	r3, [r1, #16]
 800d14a:	b963      	cbnz	r3, 800d166 <_svfiprintf_r+0x32>
 800d14c:	2140      	movs	r1, #64	; 0x40
 800d14e:	f7ff ff0b 	bl	800cf68 <_malloc_r>
 800d152:	6028      	str	r0, [r5, #0]
 800d154:	6128      	str	r0, [r5, #16]
 800d156:	b920      	cbnz	r0, 800d162 <_svfiprintf_r+0x2e>
 800d158:	230c      	movs	r3, #12
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295
 800d160:	e0d0      	b.n	800d304 <_svfiprintf_r+0x1d0>
 800d162:	2340      	movs	r3, #64	; 0x40
 800d164:	616b      	str	r3, [r5, #20]
 800d166:	2300      	movs	r3, #0
 800d168:	9309      	str	r3, [sp, #36]	; 0x24
 800d16a:	2320      	movs	r3, #32
 800d16c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d170:	f8cd 800c 	str.w	r8, [sp, #12]
 800d174:	2330      	movs	r3, #48	; 0x30
 800d176:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d31c <_svfiprintf_r+0x1e8>
 800d17a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d17e:	f04f 0901 	mov.w	r9, #1
 800d182:	4623      	mov	r3, r4
 800d184:	469a      	mov	sl, r3
 800d186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d18a:	b10a      	cbz	r2, 800d190 <_svfiprintf_r+0x5c>
 800d18c:	2a25      	cmp	r2, #37	; 0x25
 800d18e:	d1f9      	bne.n	800d184 <_svfiprintf_r+0x50>
 800d190:	ebba 0b04 	subs.w	fp, sl, r4
 800d194:	d00b      	beq.n	800d1ae <_svfiprintf_r+0x7a>
 800d196:	465b      	mov	r3, fp
 800d198:	4622      	mov	r2, r4
 800d19a:	4629      	mov	r1, r5
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7ff ff6f 	bl	800d080 <__ssputs_r>
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	f000 80a9 	beq.w	800d2fa <_svfiprintf_r+0x1c6>
 800d1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1aa:	445a      	add	r2, fp
 800d1ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f000 80a1 	beq.w	800d2fa <_svfiprintf_r+0x1c6>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c2:	f10a 0a01 	add.w	sl, sl, #1
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	9307      	str	r3, [sp, #28]
 800d1ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ce:	931a      	str	r3, [sp, #104]	; 0x68
 800d1d0:	4654      	mov	r4, sl
 800d1d2:	2205      	movs	r2, #5
 800d1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d8:	4850      	ldr	r0, [pc, #320]	; (800d31c <_svfiprintf_r+0x1e8>)
 800d1da:	f7f3 f801 	bl	80001e0 <memchr>
 800d1de:	9a04      	ldr	r2, [sp, #16]
 800d1e0:	b9d8      	cbnz	r0, 800d21a <_svfiprintf_r+0xe6>
 800d1e2:	06d0      	lsls	r0, r2, #27
 800d1e4:	bf44      	itt	mi
 800d1e6:	2320      	movmi	r3, #32
 800d1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ec:	0711      	lsls	r1, r2, #28
 800d1ee:	bf44      	itt	mi
 800d1f0:	232b      	movmi	r3, #43	; 0x2b
 800d1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d1fc:	d015      	beq.n	800d22a <_svfiprintf_r+0xf6>
 800d1fe:	9a07      	ldr	r2, [sp, #28]
 800d200:	4654      	mov	r4, sl
 800d202:	2000      	movs	r0, #0
 800d204:	f04f 0c0a 	mov.w	ip, #10
 800d208:	4621      	mov	r1, r4
 800d20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d20e:	3b30      	subs	r3, #48	; 0x30
 800d210:	2b09      	cmp	r3, #9
 800d212:	d94d      	bls.n	800d2b0 <_svfiprintf_r+0x17c>
 800d214:	b1b0      	cbz	r0, 800d244 <_svfiprintf_r+0x110>
 800d216:	9207      	str	r2, [sp, #28]
 800d218:	e014      	b.n	800d244 <_svfiprintf_r+0x110>
 800d21a:	eba0 0308 	sub.w	r3, r0, r8
 800d21e:	fa09 f303 	lsl.w	r3, r9, r3
 800d222:	4313      	orrs	r3, r2
 800d224:	9304      	str	r3, [sp, #16]
 800d226:	46a2      	mov	sl, r4
 800d228:	e7d2      	b.n	800d1d0 <_svfiprintf_r+0x9c>
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	1d19      	adds	r1, r3, #4
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	9103      	str	r1, [sp, #12]
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfbb      	ittet	lt
 800d236:	425b      	neglt	r3, r3
 800d238:	f042 0202 	orrlt.w	r2, r2, #2
 800d23c:	9307      	strge	r3, [sp, #28]
 800d23e:	9307      	strlt	r3, [sp, #28]
 800d240:	bfb8      	it	lt
 800d242:	9204      	strlt	r2, [sp, #16]
 800d244:	7823      	ldrb	r3, [r4, #0]
 800d246:	2b2e      	cmp	r3, #46	; 0x2e
 800d248:	d10c      	bne.n	800d264 <_svfiprintf_r+0x130>
 800d24a:	7863      	ldrb	r3, [r4, #1]
 800d24c:	2b2a      	cmp	r3, #42	; 0x2a
 800d24e:	d134      	bne.n	800d2ba <_svfiprintf_r+0x186>
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	1d1a      	adds	r2, r3, #4
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	9203      	str	r2, [sp, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	bfb8      	it	lt
 800d25c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d260:	3402      	adds	r4, #2
 800d262:	9305      	str	r3, [sp, #20]
 800d264:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d32c <_svfiprintf_r+0x1f8>
 800d268:	7821      	ldrb	r1, [r4, #0]
 800d26a:	2203      	movs	r2, #3
 800d26c:	4650      	mov	r0, sl
 800d26e:	f7f2 ffb7 	bl	80001e0 <memchr>
 800d272:	b138      	cbz	r0, 800d284 <_svfiprintf_r+0x150>
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	eba0 000a 	sub.w	r0, r0, sl
 800d27a:	2240      	movs	r2, #64	; 0x40
 800d27c:	4082      	lsls	r2, r0
 800d27e:	4313      	orrs	r3, r2
 800d280:	3401      	adds	r4, #1
 800d282:	9304      	str	r3, [sp, #16]
 800d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d288:	4825      	ldr	r0, [pc, #148]	; (800d320 <_svfiprintf_r+0x1ec>)
 800d28a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d28e:	2206      	movs	r2, #6
 800d290:	f7f2 ffa6 	bl	80001e0 <memchr>
 800d294:	2800      	cmp	r0, #0
 800d296:	d038      	beq.n	800d30a <_svfiprintf_r+0x1d6>
 800d298:	4b22      	ldr	r3, [pc, #136]	; (800d324 <_svfiprintf_r+0x1f0>)
 800d29a:	bb1b      	cbnz	r3, 800d2e4 <_svfiprintf_r+0x1b0>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	3307      	adds	r3, #7
 800d2a0:	f023 0307 	bic.w	r3, r3, #7
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	9303      	str	r3, [sp, #12]
 800d2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2aa:	4433      	add	r3, r6
 800d2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ae:	e768      	b.n	800d182 <_svfiprintf_r+0x4e>
 800d2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	e7a6      	b.n	800d208 <_svfiprintf_r+0xd4>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	3401      	adds	r4, #1
 800d2be:	9305      	str	r3, [sp, #20]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f04f 0c0a 	mov.w	ip, #10
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2cc:	3a30      	subs	r2, #48	; 0x30
 800d2ce:	2a09      	cmp	r2, #9
 800d2d0:	d903      	bls.n	800d2da <_svfiprintf_r+0x1a6>
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0c6      	beq.n	800d264 <_svfiprintf_r+0x130>
 800d2d6:	9105      	str	r1, [sp, #20]
 800d2d8:	e7c4      	b.n	800d264 <_svfiprintf_r+0x130>
 800d2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2de:	4604      	mov	r4, r0
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e7f0      	b.n	800d2c6 <_svfiprintf_r+0x192>
 800d2e4:	ab03      	add	r3, sp, #12
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	462a      	mov	r2, r5
 800d2ea:	4b0f      	ldr	r3, [pc, #60]	; (800d328 <_svfiprintf_r+0x1f4>)
 800d2ec:	a904      	add	r1, sp, #16
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f3af 8000 	nop.w
 800d2f4:	1c42      	adds	r2, r0, #1
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	d1d6      	bne.n	800d2a8 <_svfiprintf_r+0x174>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	065b      	lsls	r3, r3, #25
 800d2fe:	f53f af2d 	bmi.w	800d15c <_svfiprintf_r+0x28>
 800d302:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d304:	b01d      	add	sp, #116	; 0x74
 800d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30a:	ab03      	add	r3, sp, #12
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	462a      	mov	r2, r5
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <_svfiprintf_r+0x1f4>)
 800d312:	a904      	add	r1, sp, #16
 800d314:	4638      	mov	r0, r7
 800d316:	f000 f879 	bl	800d40c <_printf_i>
 800d31a:	e7eb      	b.n	800d2f4 <_svfiprintf_r+0x1c0>
 800d31c:	0800e3bc 	.word	0x0800e3bc
 800d320:	0800e3c6 	.word	0x0800e3c6
 800d324:	00000000 	.word	0x00000000
 800d328:	0800d081 	.word	0x0800d081
 800d32c:	0800e3c2 	.word	0x0800e3c2

0800d330 <_printf_common>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	4616      	mov	r6, r2
 800d336:	4699      	mov	r9, r3
 800d338:	688a      	ldr	r2, [r1, #8]
 800d33a:	690b      	ldr	r3, [r1, #16]
 800d33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d340:	4293      	cmp	r3, r2
 800d342:	bfb8      	it	lt
 800d344:	4613      	movlt	r3, r2
 800d346:	6033      	str	r3, [r6, #0]
 800d348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d34c:	4607      	mov	r7, r0
 800d34e:	460c      	mov	r4, r1
 800d350:	b10a      	cbz	r2, 800d356 <_printf_common+0x26>
 800d352:	3301      	adds	r3, #1
 800d354:	6033      	str	r3, [r6, #0]
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	0699      	lsls	r1, r3, #26
 800d35a:	bf42      	ittt	mi
 800d35c:	6833      	ldrmi	r3, [r6, #0]
 800d35e:	3302      	addmi	r3, #2
 800d360:	6033      	strmi	r3, [r6, #0]
 800d362:	6825      	ldr	r5, [r4, #0]
 800d364:	f015 0506 	ands.w	r5, r5, #6
 800d368:	d106      	bne.n	800d378 <_printf_common+0x48>
 800d36a:	f104 0a19 	add.w	sl, r4, #25
 800d36e:	68e3      	ldr	r3, [r4, #12]
 800d370:	6832      	ldr	r2, [r6, #0]
 800d372:	1a9b      	subs	r3, r3, r2
 800d374:	42ab      	cmp	r3, r5
 800d376:	dc26      	bgt.n	800d3c6 <_printf_common+0x96>
 800d378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d37c:	1e13      	subs	r3, r2, #0
 800d37e:	6822      	ldr	r2, [r4, #0]
 800d380:	bf18      	it	ne
 800d382:	2301      	movne	r3, #1
 800d384:	0692      	lsls	r2, r2, #26
 800d386:	d42b      	bmi.n	800d3e0 <_printf_common+0xb0>
 800d388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d38c:	4649      	mov	r1, r9
 800d38e:	4638      	mov	r0, r7
 800d390:	47c0      	blx	r8
 800d392:	3001      	adds	r0, #1
 800d394:	d01e      	beq.n	800d3d4 <_printf_common+0xa4>
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	6922      	ldr	r2, [r4, #16]
 800d39a:	f003 0306 	and.w	r3, r3, #6
 800d39e:	2b04      	cmp	r3, #4
 800d3a0:	bf02      	ittt	eq
 800d3a2:	68e5      	ldreq	r5, [r4, #12]
 800d3a4:	6833      	ldreq	r3, [r6, #0]
 800d3a6:	1aed      	subeq	r5, r5, r3
 800d3a8:	68a3      	ldr	r3, [r4, #8]
 800d3aa:	bf0c      	ite	eq
 800d3ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3b0:	2500      	movne	r5, #0
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	bfc4      	itt	gt
 800d3b6:	1a9b      	subgt	r3, r3, r2
 800d3b8:	18ed      	addgt	r5, r5, r3
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	341a      	adds	r4, #26
 800d3be:	42b5      	cmp	r5, r6
 800d3c0:	d11a      	bne.n	800d3f8 <_printf_common+0xc8>
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	e008      	b.n	800d3d8 <_printf_common+0xa8>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	4649      	mov	r1, r9
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	47c0      	blx	r8
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d103      	bne.n	800d3dc <_printf_common+0xac>
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3dc:	3501      	adds	r5, #1
 800d3de:	e7c6      	b.n	800d36e <_printf_common+0x3e>
 800d3e0:	18e1      	adds	r1, r4, r3
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	2030      	movs	r0, #48	; 0x30
 800d3e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3ea:	4422      	add	r2, r4
 800d3ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	e7c7      	b.n	800d388 <_printf_common+0x58>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	4638      	mov	r0, r7
 800d400:	47c0      	blx	r8
 800d402:	3001      	adds	r0, #1
 800d404:	d0e6      	beq.n	800d3d4 <_printf_common+0xa4>
 800d406:	3601      	adds	r6, #1
 800d408:	e7d9      	b.n	800d3be <_printf_common+0x8e>
	...

0800d40c <_printf_i>:
 800d40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d410:	7e0f      	ldrb	r7, [r1, #24]
 800d412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d414:	2f78      	cmp	r7, #120	; 0x78
 800d416:	4691      	mov	r9, r2
 800d418:	4680      	mov	r8, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	469a      	mov	sl, r3
 800d41e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d422:	d807      	bhi.n	800d434 <_printf_i+0x28>
 800d424:	2f62      	cmp	r7, #98	; 0x62
 800d426:	d80a      	bhi.n	800d43e <_printf_i+0x32>
 800d428:	2f00      	cmp	r7, #0
 800d42a:	f000 80d4 	beq.w	800d5d6 <_printf_i+0x1ca>
 800d42e:	2f58      	cmp	r7, #88	; 0x58
 800d430:	f000 80c0 	beq.w	800d5b4 <_printf_i+0x1a8>
 800d434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d43c:	e03a      	b.n	800d4b4 <_printf_i+0xa8>
 800d43e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d442:	2b15      	cmp	r3, #21
 800d444:	d8f6      	bhi.n	800d434 <_printf_i+0x28>
 800d446:	a101      	add	r1, pc, #4	; (adr r1, 800d44c <_printf_i+0x40>)
 800d448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d44c:	0800d4a5 	.word	0x0800d4a5
 800d450:	0800d4b9 	.word	0x0800d4b9
 800d454:	0800d435 	.word	0x0800d435
 800d458:	0800d435 	.word	0x0800d435
 800d45c:	0800d435 	.word	0x0800d435
 800d460:	0800d435 	.word	0x0800d435
 800d464:	0800d4b9 	.word	0x0800d4b9
 800d468:	0800d435 	.word	0x0800d435
 800d46c:	0800d435 	.word	0x0800d435
 800d470:	0800d435 	.word	0x0800d435
 800d474:	0800d435 	.word	0x0800d435
 800d478:	0800d5bd 	.word	0x0800d5bd
 800d47c:	0800d4e5 	.word	0x0800d4e5
 800d480:	0800d577 	.word	0x0800d577
 800d484:	0800d435 	.word	0x0800d435
 800d488:	0800d435 	.word	0x0800d435
 800d48c:	0800d5df 	.word	0x0800d5df
 800d490:	0800d435 	.word	0x0800d435
 800d494:	0800d4e5 	.word	0x0800d4e5
 800d498:	0800d435 	.word	0x0800d435
 800d49c:	0800d435 	.word	0x0800d435
 800d4a0:	0800d57f 	.word	0x0800d57f
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	1d1a      	adds	r2, r3, #4
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	602a      	str	r2, [r5, #0]
 800d4ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e09f      	b.n	800d5f8 <_printf_i+0x1ec>
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	682b      	ldr	r3, [r5, #0]
 800d4bc:	0607      	lsls	r7, r0, #24
 800d4be:	f103 0104 	add.w	r1, r3, #4
 800d4c2:	6029      	str	r1, [r5, #0]
 800d4c4:	d501      	bpl.n	800d4ca <_printf_i+0xbe>
 800d4c6:	681e      	ldr	r6, [r3, #0]
 800d4c8:	e003      	b.n	800d4d2 <_printf_i+0xc6>
 800d4ca:	0646      	lsls	r6, r0, #25
 800d4cc:	d5fb      	bpl.n	800d4c6 <_printf_i+0xba>
 800d4ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d4d2:	2e00      	cmp	r6, #0
 800d4d4:	da03      	bge.n	800d4de <_printf_i+0xd2>
 800d4d6:	232d      	movs	r3, #45	; 0x2d
 800d4d8:	4276      	negs	r6, r6
 800d4da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4de:	485a      	ldr	r0, [pc, #360]	; (800d648 <_printf_i+0x23c>)
 800d4e0:	230a      	movs	r3, #10
 800d4e2:	e012      	b.n	800d50a <_printf_i+0xfe>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	6820      	ldr	r0, [r4, #0]
 800d4e8:	1d19      	adds	r1, r3, #4
 800d4ea:	6029      	str	r1, [r5, #0]
 800d4ec:	0605      	lsls	r5, r0, #24
 800d4ee:	d501      	bpl.n	800d4f4 <_printf_i+0xe8>
 800d4f0:	681e      	ldr	r6, [r3, #0]
 800d4f2:	e002      	b.n	800d4fa <_printf_i+0xee>
 800d4f4:	0641      	lsls	r1, r0, #25
 800d4f6:	d5fb      	bpl.n	800d4f0 <_printf_i+0xe4>
 800d4f8:	881e      	ldrh	r6, [r3, #0]
 800d4fa:	4853      	ldr	r0, [pc, #332]	; (800d648 <_printf_i+0x23c>)
 800d4fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d4fe:	bf0c      	ite	eq
 800d500:	2308      	moveq	r3, #8
 800d502:	230a      	movne	r3, #10
 800d504:	2100      	movs	r1, #0
 800d506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d50a:	6865      	ldr	r5, [r4, #4]
 800d50c:	60a5      	str	r5, [r4, #8]
 800d50e:	2d00      	cmp	r5, #0
 800d510:	bfa2      	ittt	ge
 800d512:	6821      	ldrge	r1, [r4, #0]
 800d514:	f021 0104 	bicge.w	r1, r1, #4
 800d518:	6021      	strge	r1, [r4, #0]
 800d51a:	b90e      	cbnz	r6, 800d520 <_printf_i+0x114>
 800d51c:	2d00      	cmp	r5, #0
 800d51e:	d04b      	beq.n	800d5b8 <_printf_i+0x1ac>
 800d520:	4615      	mov	r5, r2
 800d522:	fbb6 f1f3 	udiv	r1, r6, r3
 800d526:	fb03 6711 	mls	r7, r3, r1, r6
 800d52a:	5dc7      	ldrb	r7, [r0, r7]
 800d52c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d530:	4637      	mov	r7, r6
 800d532:	42bb      	cmp	r3, r7
 800d534:	460e      	mov	r6, r1
 800d536:	d9f4      	bls.n	800d522 <_printf_i+0x116>
 800d538:	2b08      	cmp	r3, #8
 800d53a:	d10b      	bne.n	800d554 <_printf_i+0x148>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	07de      	lsls	r6, r3, #31
 800d540:	d508      	bpl.n	800d554 <_printf_i+0x148>
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	4299      	cmp	r1, r3
 800d548:	bfde      	ittt	le
 800d54a:	2330      	movle	r3, #48	; 0x30
 800d54c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d550:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d554:	1b52      	subs	r2, r2, r5
 800d556:	6122      	str	r2, [r4, #16]
 800d558:	f8cd a000 	str.w	sl, [sp]
 800d55c:	464b      	mov	r3, r9
 800d55e:	aa03      	add	r2, sp, #12
 800d560:	4621      	mov	r1, r4
 800d562:	4640      	mov	r0, r8
 800d564:	f7ff fee4 	bl	800d330 <_printf_common>
 800d568:	3001      	adds	r0, #1
 800d56a:	d14a      	bne.n	800d602 <_printf_i+0x1f6>
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	b004      	add	sp, #16
 800d572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	f043 0320 	orr.w	r3, r3, #32
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	4833      	ldr	r0, [pc, #204]	; (800d64c <_printf_i+0x240>)
 800d580:	2778      	movs	r7, #120	; 0x78
 800d582:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	6829      	ldr	r1, [r5, #0]
 800d58a:	061f      	lsls	r7, r3, #24
 800d58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d590:	d402      	bmi.n	800d598 <_printf_i+0x18c>
 800d592:	065f      	lsls	r7, r3, #25
 800d594:	bf48      	it	mi
 800d596:	b2b6      	uxthmi	r6, r6
 800d598:	07df      	lsls	r7, r3, #31
 800d59a:	bf48      	it	mi
 800d59c:	f043 0320 	orrmi.w	r3, r3, #32
 800d5a0:	6029      	str	r1, [r5, #0]
 800d5a2:	bf48      	it	mi
 800d5a4:	6023      	strmi	r3, [r4, #0]
 800d5a6:	b91e      	cbnz	r6, 800d5b0 <_printf_i+0x1a4>
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	f023 0320 	bic.w	r3, r3, #32
 800d5ae:	6023      	str	r3, [r4, #0]
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	e7a7      	b.n	800d504 <_printf_i+0xf8>
 800d5b4:	4824      	ldr	r0, [pc, #144]	; (800d648 <_printf_i+0x23c>)
 800d5b6:	e7e4      	b.n	800d582 <_printf_i+0x176>
 800d5b8:	4615      	mov	r5, r2
 800d5ba:	e7bd      	b.n	800d538 <_printf_i+0x12c>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	6826      	ldr	r6, [r4, #0]
 800d5c0:	6961      	ldr	r1, [r4, #20]
 800d5c2:	1d18      	adds	r0, r3, #4
 800d5c4:	6028      	str	r0, [r5, #0]
 800d5c6:	0635      	lsls	r5, r6, #24
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	d501      	bpl.n	800d5d0 <_printf_i+0x1c4>
 800d5cc:	6019      	str	r1, [r3, #0]
 800d5ce:	e002      	b.n	800d5d6 <_printf_i+0x1ca>
 800d5d0:	0670      	lsls	r0, r6, #25
 800d5d2:	d5fb      	bpl.n	800d5cc <_printf_i+0x1c0>
 800d5d4:	8019      	strh	r1, [r3, #0]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	6123      	str	r3, [r4, #16]
 800d5da:	4615      	mov	r5, r2
 800d5dc:	e7bc      	b.n	800d558 <_printf_i+0x14c>
 800d5de:	682b      	ldr	r3, [r5, #0]
 800d5e0:	1d1a      	adds	r2, r3, #4
 800d5e2:	602a      	str	r2, [r5, #0]
 800d5e4:	681d      	ldr	r5, [r3, #0]
 800d5e6:	6862      	ldr	r2, [r4, #4]
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7f2 fdf8 	bl	80001e0 <memchr>
 800d5f0:	b108      	cbz	r0, 800d5f6 <_printf_i+0x1ea>
 800d5f2:	1b40      	subs	r0, r0, r5
 800d5f4:	6060      	str	r0, [r4, #4]
 800d5f6:	6863      	ldr	r3, [r4, #4]
 800d5f8:	6123      	str	r3, [r4, #16]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d600:	e7aa      	b.n	800d558 <_printf_i+0x14c>
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	462a      	mov	r2, r5
 800d606:	4649      	mov	r1, r9
 800d608:	4640      	mov	r0, r8
 800d60a:	47d0      	blx	sl
 800d60c:	3001      	adds	r0, #1
 800d60e:	d0ad      	beq.n	800d56c <_printf_i+0x160>
 800d610:	6823      	ldr	r3, [r4, #0]
 800d612:	079b      	lsls	r3, r3, #30
 800d614:	d413      	bmi.n	800d63e <_printf_i+0x232>
 800d616:	68e0      	ldr	r0, [r4, #12]
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	4298      	cmp	r0, r3
 800d61c:	bfb8      	it	lt
 800d61e:	4618      	movlt	r0, r3
 800d620:	e7a6      	b.n	800d570 <_printf_i+0x164>
 800d622:	2301      	movs	r3, #1
 800d624:	4632      	mov	r2, r6
 800d626:	4649      	mov	r1, r9
 800d628:	4640      	mov	r0, r8
 800d62a:	47d0      	blx	sl
 800d62c:	3001      	adds	r0, #1
 800d62e:	d09d      	beq.n	800d56c <_printf_i+0x160>
 800d630:	3501      	adds	r5, #1
 800d632:	68e3      	ldr	r3, [r4, #12]
 800d634:	9903      	ldr	r1, [sp, #12]
 800d636:	1a5b      	subs	r3, r3, r1
 800d638:	42ab      	cmp	r3, r5
 800d63a:	dcf2      	bgt.n	800d622 <_printf_i+0x216>
 800d63c:	e7eb      	b.n	800d616 <_printf_i+0x20a>
 800d63e:	2500      	movs	r5, #0
 800d640:	f104 0619 	add.w	r6, r4, #25
 800d644:	e7f5      	b.n	800d632 <_printf_i+0x226>
 800d646:	bf00      	nop
 800d648:	0800e3cd 	.word	0x0800e3cd
 800d64c:	0800e3de 	.word	0x0800e3de

0800d650 <memmove>:
 800d650:	4288      	cmp	r0, r1
 800d652:	b510      	push	{r4, lr}
 800d654:	eb01 0402 	add.w	r4, r1, r2
 800d658:	d902      	bls.n	800d660 <memmove+0x10>
 800d65a:	4284      	cmp	r4, r0
 800d65c:	4623      	mov	r3, r4
 800d65e:	d807      	bhi.n	800d670 <memmove+0x20>
 800d660:	1e43      	subs	r3, r0, #1
 800d662:	42a1      	cmp	r1, r4
 800d664:	d008      	beq.n	800d678 <memmove+0x28>
 800d666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d66e:	e7f8      	b.n	800d662 <memmove+0x12>
 800d670:	4402      	add	r2, r0
 800d672:	4601      	mov	r1, r0
 800d674:	428a      	cmp	r2, r1
 800d676:	d100      	bne.n	800d67a <memmove+0x2a>
 800d678:	bd10      	pop	{r4, pc}
 800d67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d682:	e7f7      	b.n	800d674 <memmove+0x24>

0800d684 <_sbrk_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4d06      	ldr	r5, [pc, #24]	; (800d6a0 <_sbrk_r+0x1c>)
 800d688:	2300      	movs	r3, #0
 800d68a:	4604      	mov	r4, r0
 800d68c:	4608      	mov	r0, r1
 800d68e:	602b      	str	r3, [r5, #0]
 800d690:	f7f7 fa4a 	bl	8004b28 <_sbrk>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_sbrk_r+0x1a>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_sbrk_r+0x1a>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	200053cc 	.word	0x200053cc

0800d6a4 <_realloc_r>:
 800d6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	4614      	mov	r4, r2
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	b921      	cbnz	r1, 800d6ba <_realloc_r+0x16>
 800d6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	f7ff bc57 	b.w	800cf68 <_malloc_r>
 800d6ba:	b92a      	cbnz	r2, 800d6c8 <_realloc_r+0x24>
 800d6bc:	f7ff fbe8 	bl	800ce90 <_free_r>
 800d6c0:	4625      	mov	r5, r4
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c8:	f000 f81b 	bl	800d702 <_malloc_usable_size_r>
 800d6cc:	4284      	cmp	r4, r0
 800d6ce:	4607      	mov	r7, r0
 800d6d0:	d802      	bhi.n	800d6d8 <_realloc_r+0x34>
 800d6d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6d6:	d812      	bhi.n	800d6fe <_realloc_r+0x5a>
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f7ff fc44 	bl	800cf68 <_malloc_r>
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d0ed      	beq.n	800d6c2 <_realloc_r+0x1e>
 800d6e6:	42bc      	cmp	r4, r7
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	bf28      	it	cs
 800d6ee:	463a      	movcs	r2, r7
 800d6f0:	f7ff fbc0 	bl	800ce74 <memcpy>
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	f7ff fbca 	bl	800ce90 <_free_r>
 800d6fc:	e7e1      	b.n	800d6c2 <_realloc_r+0x1e>
 800d6fe:	4635      	mov	r5, r6
 800d700:	e7df      	b.n	800d6c2 <_realloc_r+0x1e>

0800d702 <_malloc_usable_size_r>:
 800d702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d706:	1f18      	subs	r0, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfbc      	itt	lt
 800d70c:	580b      	ldrlt	r3, [r1, r0]
 800d70e:	18c0      	addlt	r0, r0, r3
 800d710:	4770      	bx	lr
	...

0800d714 <_init>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	bf00      	nop
 800d718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71a:	bc08      	pop	{r3}
 800d71c:	469e      	mov	lr, r3
 800d71e:	4770      	bx	lr

0800d720 <_fini>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr
